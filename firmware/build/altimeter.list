
build/altimeter.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
                .align  2
                .thumb_func
                .global Reset_Handler
Reset_Handler:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001c0:	b672      	cpsid	i

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <endfiniloop+0x4>)
                msr     PSP, r0
 80001c4:	f380 8809 	msr	PSP, r0

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001c8:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001d8:	6008      	str	r0, [r1, #0]
                dsb
 80001da:	f3bf 8f4f 	dsb	sy
                isb
 80001de:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 80001e2:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 80001e6:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 80001ea:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 80001ee:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]
                dsb
 80001f4:	f3bf 8f4f 	dsb	sy
                isb
 80001f8:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 80001fc:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 8000200:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000204:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000208:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800020c:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 800020e:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000210:	f380 8814 	msr	CONTROL, r0
                isb
 8000214:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000218:	f003 ff4a 	bl	80040b0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 800021c:	f000 ff48 	bl	80010b0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000220:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000224:	491c      	ldr	r1, [pc, #112]	; (8000298 <endfiniloop+0x8>)
                ldr     r2, =__main_stack_end__
 8000226:	4a1d      	ldr	r2, [pc, #116]	; (800029c <endfiniloop+0xc>)

08000228 <msloop>:
msloop:
                cmp     r1, r2
 8000228:	4291      	cmp	r1, r2
                itt     lo
 800022a:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800022c:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000230:	e7fa      	bcc.n	8000228 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000232:	491b      	ldr	r1, [pc, #108]	; (80002a0 <endfiniloop+0x10>)
                ldr     r2, =__process_stack_end__
 8000234:	4a17      	ldr	r2, [pc, #92]	; (8000294 <endfiniloop+0x4>)

08000236 <psloop>:
psloop:
                cmp     r1, r2
 8000236:	4291      	cmp	r1, r2
                itt     lo
 8000238:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800023a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800023e:	e7fa      	bcc.n	8000236 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8000240:	4918      	ldr	r1, [pc, #96]	; (80002a4 <endfiniloop+0x14>)
                ldr     r2, =_data_start
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <endfiniloop+0x18>)
                ldr     r3, =_data_end
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <endfiniloop+0x1c>)

08000246 <dloop>:
dloop:
                cmp     r2, r3
 8000246:	429a      	cmp	r2, r3
                ittt    lo
 8000248:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 800024a:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800024e:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000252:	e7f8      	bcc.n	8000246 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000254:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000256:	4916      	ldr	r1, [pc, #88]	; (80002b0 <endfiniloop+0x20>)
                ldr     r2, =_bss_end
 8000258:	4a16      	ldr	r2, [pc, #88]	; (80002b4 <endfiniloop+0x24>)

0800025a <bloop>:
bloop:
                cmp     r1, r2
 800025a:	4291      	cmp	r1, r2
                itt     lo
 800025c:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800025e:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000262:	e7fa      	bcc.n	800025a <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000264:	f003 ff3c 	bl	80040e0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000268:	f003 ff2a 	bl	80040c0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800026c:	4c12      	ldr	r4, [pc, #72]	; (80002b8 <endfiniloop+0x28>)
                ldr     r5, =__init_array_end
 800026e:	4d13      	ldr	r5, [pc, #76]	; (80002bc <endfiniloop+0x2c>)

08000270 <initloop>:
initloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000272:	da03      	bge.n	800027c <endinitloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       initloop
 800027a:	e7f9      	b.n	8000270 <initloop>

0800027c <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 800027c:	f000 f8f0 	bl	8000460 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 8000280:	4c0f      	ldr	r4, [pc, #60]	; (80002c0 <endfiniloop+0x30>)
                ldr     r5, =__fini_array_end
 8000282:	4d10      	ldr	r5, [pc, #64]	; (80002c4 <endfiniloop+0x34>)

08000284 <finiloop>:
finiloop:
                cmp     r4, r5
 8000284:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000286:	da03      	bge.n	8000290 <endfiniloop>
                ldr     r1, [r4], #4
 8000288:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800028c:	4788      	blx	r1
                b       finiloop
 800028e:	e7f9      	b.n	8000284 <finiloop>

08000290 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000290:	f003 bf1e 	b.w	80040d0 <__default_exit>
Reset_Handler:
                /* Interrupts are globally masked initially.*/
                cpsid   i

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000294:	20000800 	.word	0x20000800
#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000298:	20000000 	.word	0x20000000
                ldr     r2, =__main_stack_end__
 800029c:	20000400 	.word	0x20000400
                blo     msloop

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80002a0:	20000400 	.word	0x20000400
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80002a4:	08006060 	.word	0x08006060
                ldr     r2, =_data_start
 80002a8:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002ac:	20000800 	.word	0x20000800

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
                ldr     r1, =_bss_start
 80002b0:	20000800 	.word	0x20000800
                ldr     r2, =_bss_end
 80002b4:	200013c8 	.word	0x200013c8
                /* Late initialization..*/
                bl      __late_init

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80002b8:	080001c0 	.word	0x080001c0
                ldr     r5, =__init_array_end
 80002bc:	080001c0 	.word	0x080001c0
                /* Main program invocation, r0 contains the returned value.*/
                bl      main

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80002c0:	080001c0 	.word	0x080001c0
                ldr     r5, =__fini_array_end
 80002c4:	080001c0 	.word	0x080001c0
	...

080002d0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 80002d4:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002dc:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002de:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 80002e0:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e8 <_port_thread_start>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_thread_start
_port_thread_start:
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002e8:	f004 f902 	bl	80044f0 <_dbg_check_unlock>
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002ec:	f005 f858 	bl	80053a0 <_stats_stop_measure_crit_thd>
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f004 fe68 	bl	8004fd0 <chThdExit>

08000300 <_port_switch_from_isr>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch_from_isr
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
 8000300:	f005 f846 	bl	8005390 <_stats_start_measure_crit_thd>
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 8000304:	f004 f8dc 	bl	80044c0 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 8000308:	f004 fcda 	bl	8004cc0 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 800030c:	f004 f8f0 	bl	80044f0 <_dbg_check_unlock>
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 8000310:	f005 f846 	bl	80053a0 <_stats_stop_measure_crit_thd>

08000314 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000314:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000316:	e7fe      	b.n	8000316 <_port_exit_from_isr+0x2>
	...

08000320 <memcpy>:
 8000320:	4684      	mov	ip, r0
 8000322:	ea41 0300 	orr.w	r3, r1, r0
 8000326:	f013 0303 	ands.w	r3, r3, #3
 800032a:	d16d      	bne.n	8000408 <memcpy+0xe8>
 800032c:	3a40      	subs	r2, #64	; 0x40
 800032e:	d341      	bcc.n	80003b4 <memcpy+0x94>
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	f851 3b04 	ldr.w	r3, [r1], #4
 800038c:	f840 3b04 	str.w	r3, [r0], #4
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	f851 3b04 	ldr.w	r3, [r1], #4
 800039c:	f840 3b04 	str.w	r3, [r0], #4
 80003a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a4:	f840 3b04 	str.w	r3, [r0], #4
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	3a40      	subs	r2, #64	; 0x40
 80003b2:	d2bd      	bcs.n	8000330 <memcpy+0x10>
 80003b4:	3230      	adds	r2, #48	; 0x30
 80003b6:	d311      	bcc.n	80003dc <memcpy+0xbc>
 80003b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003bc:	f840 3b04 	str.w	r3, [r0], #4
 80003c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c4:	f840 3b04 	str.w	r3, [r0], #4
 80003c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003cc:	f840 3b04 	str.w	r3, [r0], #4
 80003d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d4:	f840 3b04 	str.w	r3, [r0], #4
 80003d8:	3a10      	subs	r2, #16
 80003da:	d2ed      	bcs.n	80003b8 <memcpy+0x98>
 80003dc:	320c      	adds	r2, #12
 80003de:	d305      	bcc.n	80003ec <memcpy+0xcc>
 80003e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e4:	f840 3b04 	str.w	r3, [r0], #4
 80003e8:	3a04      	subs	r2, #4
 80003ea:	d2f9      	bcs.n	80003e0 <memcpy+0xc0>
 80003ec:	3204      	adds	r2, #4
 80003ee:	d008      	beq.n	8000402 <memcpy+0xe2>
 80003f0:	07d2      	lsls	r2, r2, #31
 80003f2:	bf1c      	itt	ne
 80003f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80003fc:	d301      	bcc.n	8000402 <memcpy+0xe2>
 80003fe:	880b      	ldrh	r3, [r1, #0]
 8000400:	8003      	strh	r3, [r0, #0]
 8000402:	4660      	mov	r0, ip
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	2a08      	cmp	r2, #8
 800040a:	d313      	bcc.n	8000434 <memcpy+0x114>
 800040c:	078b      	lsls	r3, r1, #30
 800040e:	d08d      	beq.n	800032c <memcpy+0xc>
 8000410:	f010 0303 	ands.w	r3, r0, #3
 8000414:	d08a      	beq.n	800032c <memcpy+0xc>
 8000416:	f1c3 0304 	rsb	r3, r3, #4
 800041a:	1ad2      	subs	r2, r2, r3
 800041c:	07db      	lsls	r3, r3, #31
 800041e:	bf1c      	itt	ne
 8000420:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000424:	f800 3b01 	strbne.w	r3, [r0], #1
 8000428:	d380      	bcc.n	800032c <memcpy+0xc>
 800042a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800042e:	f820 3b02 	strh.w	r3, [r0], #2
 8000432:	e77b      	b.n	800032c <memcpy+0xc>
 8000434:	3a04      	subs	r2, #4
 8000436:	d3d9      	bcc.n	80003ec <memcpy+0xcc>
 8000438:	3a01      	subs	r2, #1
 800043a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800043e:	f800 3b01 	strb.w	r3, [r0], #1
 8000442:	d2f9      	bcs.n	8000438 <memcpy+0x118>
 8000444:	780b      	ldrb	r3, [r1, #0]
 8000446:	7003      	strb	r3, [r0, #0]
 8000448:	784b      	ldrb	r3, [r1, #1]
 800044a:	7043      	strb	r3, [r0, #1]
 800044c:	788b      	ldrb	r3, [r1, #2]
 800044e:	7083      	strb	r3, [r0, #2]
 8000450:	4660      	mov	r0, ip
 8000452:	4770      	bx	lr
	...

08000460 <main>:
#include "hal.h"
#include "measure.h"
#include "status.h"

/* Application Entry Point */
int main(void) {
 8000460:	b508      	push	{r3, lr}

    /* Allow debug access during WFI sleep */
    DBGMCU->CR |= DBGMCU_CR_DBG_SLEEP;
 8000462:	4a07      	ldr	r2, [pc, #28]	; (8000480 <main+0x20>)
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <main+0x20>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6053      	str	r3, [r2, #4]

    /* Initialise ChibiOS */
    halInit();
 800046e:	f003 fd87 	bl	8003f80 <halInit>
    chSysInit();
 8000472:	f003 ff85 	bl	8004380 <chSysInit>
    
    /* Start Status Monitor */
    begin_status();
 8000476:	f000 facb 	bl	8000a10 <begin_status>

    /* Start Measurement Handler*/
    begin_measurements();
 800047a:	f000 fa81 	bl	8000980 <begin_measurements>
 800047e:	e7fe      	b.n	800047e <main+0x1e>
 8000480:	e0042000 	.word	0xe0042000
	...

08000490 <ms5611_configure>:
    STD_DUTY_CYCLE,
};


/* MS5611 Config */
void ms5611_configure(I2CDriver* i2cd) {
 8000490:	b500      	push	{lr}
 8000492:	b083      	sub	sp, #12
 8000494:	9001      	str	r0, [sp, #4]

    ms5611_i2cd = i2cd;
 8000496:	4a08      	ldr	r2, [pc, #32]	; (80004b8 <ms5611_configure+0x28>)
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	6013      	str	r3, [r2, #0]
    i2cStart(ms5611_i2cd, &i2c_cfg);
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <ms5611_configure+0x28>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4618      	mov	r0, r3
 80004a2:	4906      	ldr	r1, [pc, #24]	; (80004bc <ms5611_configure+0x2c>)
 80004a4:	f002 fba4 	bl	8002bf0 <i2cStart>
    
    /* Reset Barometer */
    ms5611_reset();
 80004a8:	f000 f922 	bl	80006f0 <ms5611_reset>
    
    /* Read PROM */
    ms5611_read_prom();
 80004ac:	f000 f930 	bl	8000710 <ms5611_read_prom>
}
 80004b0:	b003      	add	sp, #12
 80004b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80004b6:	bf00      	nop
 80004b8:	20000c44 	.word	0x20000c44
 80004bc:	08006050 	.word	0x08006050

080004c0 <get_pressure>:


/* Calculate Pressure */
int32_t get_pressure(void) {
 80004c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004c4:	b095      	sub	sp, #84	; 0x54

    uint32_t D1, D2;
    
    /* Request d1 & d2 */
    ms5611_d1_conv();
 80004c6:	f000 f9cb 	bl	8000860 <ms5611_d1_conv>
    D1 = ms5611_read_adc();
 80004ca:	f000 f9a9 	bl	8000820 <ms5611_read_adc>
 80004ce:	9013      	str	r0, [sp, #76]	; 0x4c
    ms5611_d2_conv();
 80004d0:	f000 f9ce 	bl	8000870 <ms5611_d2_conv>
    D2 = ms5611_read_adc();
 80004d4:	f000 f9a4 	bl	8000820 <ms5611_read_adc>
 80004d8:	9012      	str	r0, [sp, #72]	; 0x48

    /* Compute Absolute Pressure */
    int64_t DT = 0;
 80004da:	f04f 0200 	mov.w	r2, #0
 80004de:	f04f 0300 	mov.w	r3, #0
 80004e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    int64_t TEMP = 0;
 80004e6:	f04f 0200 	mov.w	r2, #0
 80004ea:	f04f 0300 	mov.w	r3, #0
 80004ee:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    int64_t OFF = 0;
 80004f2:	f04f 0200 	mov.w	r2, #0
 80004f6:	f04f 0300 	mov.w	r3, #0
 80004fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    int64_t TMP_OFF = 0;
 80004fe:	f04f 0200 	mov.w	r2, #0
 8000502:	f04f 0300 	mov.w	r3, #0
 8000506:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    int64_t SENS = 0;
 800050a:	f04f 0200 	mov.w	r2, #0
 800050e:	f04f 0300 	mov.w	r3, #0
 8000512:	e9cd 2308 	strd	r2, r3, [sp, #32]
    int64_t TMP_PRESSURE = 0;
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	f04f 0300 	mov.w	r3, #0
 800051e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    int32_t PRESSURE = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	9305      	str	r3, [sp, #20]
    
    /* Eqn 1 */
    DT = (D2 - (cfg.c5 * 256));
 8000526:	4b6f      	ldr	r3, [pc, #444]	; (80006e4 <get_pressure+0x224>)
 8000528:	891b      	ldrh	r3, [r3, #8]
 800052a:	461a      	mov	r2, r3
 800052c:	4613      	mov	r3, r2
 800052e:	061b      	lsls	r3, r3, #24
 8000530:	1a9b      	subs	r3, r3, r2
 8000532:	021b      	lsls	r3, r3, #8
 8000534:	461a      	mov	r2, r3
 8000536:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000538:	4413      	add	r3, r2
 800053a:	461a      	mov	r2, r3
 800053c:	f04f 0300 	mov.w	r3, #0
 8000540:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    
    /* Eqn 2 */
    TEMP = (2000 + ((DT * cfg.c6)/8388608)); 
 8000544:	4b67      	ldr	r3, [pc, #412]	; (80006e4 <get_pressure+0x224>)
 8000546:	895b      	ldrh	r3, [r3, #10]
 8000548:	b29a      	uxth	r2, r3
 800054a:	f04f 0300 	mov.w	r3, #0
 800054e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000550:	fb03 f001 	mul.w	r0, r3, r1
 8000554:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000556:	fb02 f101 	mul.w	r1, r2, r1
 800055a:	4408      	add	r0, r1
 800055c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800055e:	fba1 2302 	umull	r2, r3, r1, r2
 8000562:	18c1      	adds	r1, r0, r3
 8000564:	460b      	mov	r3, r1
 8000566:	2a00      	cmp	r2, #0
 8000568:	f173 0100 	sbcs.w	r1, r3, #0
 800056c:	da05      	bge.n	800057a <get_pressure+0xba>
 800056e:	485e      	ldr	r0, [pc, #376]	; (80006e8 <get_pressure+0x228>)
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	1812      	adds	r2, r2, r0
 8000576:	eb43 0301 	adc.w	r3, r3, r1
 800057a:	0dd4      	lsrs	r4, r2, #23
 800057c:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
 8000580:	15dd      	asrs	r5, r3, #23
 8000582:	4622      	mov	r2, r4
 8000584:	462b      	mov	r3, r5
 8000586:	f512 62fa 	adds.w	r2, r2, #2000	; 0x7d0
 800058a:	f143 0300 	adc.w	r3, r3, #0
 800058e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38

    /* Eqn 3 */
    TMP_OFF = ((cfg.c2 * 256) + ((cfg.c4 * DT)/32768));
 8000592:	4b54      	ldr	r3, [pc, #336]	; (80006e4 <get_pressure+0x224>)
 8000594:	885b      	ldrh	r3, [r3, #2]
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	461c      	mov	r4, r3
 800059a:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800059e:	4b51      	ldr	r3, [pc, #324]	; (80006e4 <get_pressure+0x224>)
 80005a0:	88db      	ldrh	r3, [r3, #6]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f04f 0300 	mov.w	r3, #0
 80005a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80005aa:	fb03 f001 	mul.w	r0, r3, r1
 80005ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80005b0:	fb02 f101 	mul.w	r1, r2, r1
 80005b4:	4408      	add	r0, r1
 80005b6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80005b8:	fba1 2302 	umull	r2, r3, r1, r2
 80005bc:	18c1      	adds	r1, r0, r3
 80005be:	460b      	mov	r3, r1
 80005c0:	2a00      	cmp	r2, #0
 80005c2:	f173 0100 	sbcs.w	r1, r3, #0
 80005c6:	da06      	bge.n	80005d6 <get_pressure+0x116>
 80005c8:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	1812      	adds	r2, r2, r0
 80005d2:	eb43 0301 	adc.w	r3, r3, r1
 80005d6:	0bd1      	lsrs	r1, r2, #15
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9900      	ldr	r1, [sp, #0]
 80005dc:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80005e0:	9100      	str	r1, [sp, #0]
 80005e2:	13db      	asrs	r3, r3, #15
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80005ea:	1912      	adds	r2, r2, r4
 80005ec:	eb43 0305 	adc.w	r3, r3, r5
 80005f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    OFF = TMP_OFF * 256;
 80005f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80005f8:	ea4f 2903 	mov.w	r9, r3, lsl #8
 80005fc:	ea49 6912 	orr.w	r9, r9, r2, lsr #24
 8000600:	ea4f 2802 	mov.w	r8, r2, lsl #8
 8000604:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
    
    /* Eqn 4 */
    SENS = ((cfg.c1 * 32768) + ((cfg.c3 * DT)/256));
 8000608:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <get_pressure+0x224>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	03db      	lsls	r3, r3, #15
 800060e:	4618      	mov	r0, r3
 8000610:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <get_pressure+0x224>)
 8000616:	889b      	ldrh	r3, [r3, #4]
 8000618:	b29a      	uxth	r2, r3
 800061a:	f04f 0300 	mov.w	r3, #0
 800061e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8000620:	fb03 f504 	mul.w	r5, r3, r4
 8000624:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8000626:	fb02 f404 	mul.w	r4, r2, r4
 800062a:	442c      	add	r4, r5
 800062c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800062e:	fba5 2302 	umull	r2, r3, r5, r2
 8000632:	441c      	add	r4, r3
 8000634:	4623      	mov	r3, r4
 8000636:	2a00      	cmp	r2, #0
 8000638:	f173 0400 	sbcs.w	r4, r3, #0
 800063c:	da02      	bge.n	8000644 <get_pressure+0x184>
 800063e:	32ff      	adds	r2, #255	; 0xff
 8000640:	f143 0300 	adc.w	r3, r3, #0
 8000644:	0a14      	lsrs	r4, r2, #8
 8000646:	9402      	str	r4, [sp, #8]
 8000648:	9c02      	ldr	r4, [sp, #8]
 800064a:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 800064e:	9402      	str	r4, [sp, #8]
 8000650:	121b      	asrs	r3, r3, #8
 8000652:	9303      	str	r3, [sp, #12]
 8000654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000658:	1812      	adds	r2, r2, r0
 800065a:	eb43 0301 	adc.w	r3, r3, r1
 800065e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    
    /* Eqn 5 */
    TMP_PRESSURE = ((D1 * SENS)/2097152);
 8000662:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000664:	461a      	mov	r2, r3
 8000666:	f04f 0300 	mov.w	r3, #0
 800066a:	9908      	ldr	r1, [sp, #32]
 800066c:	fb03 f001 	mul.w	r0, r3, r1
 8000670:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000672:	fb02 f101 	mul.w	r1, r2, r1
 8000676:	4401      	add	r1, r0
 8000678:	9808      	ldr	r0, [sp, #32]
 800067a:	fba0 2302 	umull	r2, r3, r0, r2
 800067e:	4419      	add	r1, r3
 8000680:	460b      	mov	r3, r1
 8000682:	2a00      	cmp	r2, #0
 8000684:	f173 0100 	sbcs.w	r1, r3, #0
 8000688:	da05      	bge.n	8000696 <get_pressure+0x1d6>
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <get_pressure+0x22c>)
 800068c:	f04f 0100 	mov.w	r1, #0
 8000690:	1812      	adds	r2, r2, r0
 8000692:	eb43 0301 	adc.w	r3, r3, r1
 8000696:	0d56      	lsrs	r6, r2, #21
 8000698:	ea46 26c3 	orr.w	r6, r6, r3, lsl #11
 800069c:	155f      	asrs	r7, r3, #21
 800069e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    PRESSURE = ((TMP_PRESSURE - OFF)/32768);
 80006a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80006a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80006aa:	1a82      	subs	r2, r0, r2
 80006ac:	eb61 0303 	sbc.w	r3, r1, r3
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	f173 0100 	sbcs.w	r1, r3, #0
 80006b6:	da06      	bge.n	80006c6 <get_pressure+0x206>
 80006b8:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80006bc:	f04f 0100 	mov.w	r1, #0
 80006c0:	1812      	adds	r2, r2, r0
 80006c2:	eb43 0301 	adc.w	r3, r3, r1
 80006c6:	ea4f 3ad2 	mov.w	sl, r2, lsr #15
 80006ca:	ea4a 4a43 	orr.w	sl, sl, r3, lsl #17
 80006ce:	ea4f 3be3 	mov.w	fp, r3, asr #15
 80006d2:	4652      	mov	r2, sl
 80006d4:	465b      	mov	r3, fp
 80006d6:	4613      	mov	r3, r2
 80006d8:	9305      	str	r3, [sp, #20]

    (void)TEMP;
    return PRESSURE;
 80006da:	9b05      	ldr	r3, [sp, #20]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	b015      	add	sp, #84	; 0x54
 80006e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006e4:	20000c48 	.word	0x20000c48
 80006e8:	007fffff 	.word	0x007fffff
 80006ec:	001fffff 	.word	0x001fffff

080006f0 <ms5611_reset>:


/* Reset MS5611 */
void ms5611_reset(void) {
 80006f0:	b508      	push	{r3, lr}

    ms5611_write(MS5611_RESET);
 80006f2:	201e      	movs	r0, #30
 80006f4:	f000 f8c4 	bl	8000880 <ms5611_write>
    chThdSleepMilliseconds(200);   
 80006f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fc:	f004 fc58 	bl	8004fb0 <chThdSleep>
}
 8000700:	bd08      	pop	{r3, pc}
 8000702:	bf00      	nop
	...

08000710 <ms5611_read_prom>:


/* Read PROM */
void ms5611_read_prom(void) {
 8000710:	b500      	push	{lr}
 8000712:	b083      	sub	sp, #12

    uint8_t prom_tmp[2] = {0};
 8000714:	2300      	movs	r3, #0
 8000716:	f8ad 3004 	strh.w	r3, [sp, #4]

    /* Get C1 */
    ms5611_write(MS5611_PROM_C1);
 800071a:	20a2      	movs	r0, #162	; 0xa2
 800071c:	f000 f8b0 	bl	8000880 <ms5611_write>
    ms5611_read(prom_tmp, 2);
 8000720:	ab01      	add	r3, sp, #4
 8000722:	4618      	mov	r0, r3
 8000724:	2102      	movs	r1, #2
 8000726:	f000 f8e3 	bl	80008f0 <ms5611_read>

    cfg.c1 = (prom_tmp[0] << 8 | prom_tmp[1]);
 800072a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b29a      	uxth	r2, r3
 8000732:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000736:	b29b      	uxth	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b29b      	uxth	r3, r3
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <ms5611_read_prom+0x100>)
 8000740:	801a      	strh	r2, [r3, #0]

    /* Get C2 */
    ms5611_write(MS5611_PROM_C2);
 8000742:	20a4      	movs	r0, #164	; 0xa4
 8000744:	f000 f89c 	bl	8000880 <ms5611_write>
    ms5611_read(prom_tmp, 2);
 8000748:	ab01      	add	r3, sp, #4
 800074a:	4618      	mov	r0, r3
 800074c:	2102      	movs	r1, #2
 800074e:	f000 f8cf 	bl	80008f0 <ms5611_read>

    cfg.c2 = (prom_tmp[0] << 8 | prom_tmp[1]);
 8000752:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000756:	021b      	lsls	r3, r3, #8
 8000758:	b29a      	uxth	r2, r3
 800075a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800075e:	b29b      	uxth	r3, r3
 8000760:	4313      	orrs	r3, r2
 8000762:	b29b      	uxth	r3, r3
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <ms5611_read_prom+0x100>)
 8000768:	805a      	strh	r2, [r3, #2]

    /* Get C3 */
    ms5611_write(MS5611_PROM_C3);
 800076a:	20a6      	movs	r0, #166	; 0xa6
 800076c:	f000 f888 	bl	8000880 <ms5611_write>
    ms5611_read(prom_tmp, 2);
 8000770:	ab01      	add	r3, sp, #4
 8000772:	4618      	mov	r0, r3
 8000774:	2102      	movs	r1, #2
 8000776:	f000 f8bb 	bl	80008f0 <ms5611_read>

    cfg.c3 = (prom_tmp[0] << 8 | prom_tmp[1]);
 800077a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	b29a      	uxth	r2, r3
 8000782:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000786:	b29b      	uxth	r3, r3
 8000788:	4313      	orrs	r3, r2
 800078a:	b29b      	uxth	r3, r3
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <ms5611_read_prom+0x100>)
 8000790:	809a      	strh	r2, [r3, #4]
    
    /* Get C4 */
    ms5611_write(MS5611_PROM_C4);
 8000792:	20a8      	movs	r0, #168	; 0xa8
 8000794:	f000 f874 	bl	8000880 <ms5611_write>
    ms5611_read(prom_tmp, 2);
 8000798:	ab01      	add	r3, sp, #4
 800079a:	4618      	mov	r0, r3
 800079c:	2102      	movs	r1, #2
 800079e:	f000 f8a7 	bl	80008f0 <ms5611_read>

    cfg.c4 = (prom_tmp[0] << 8 | prom_tmp[1]);
 80007a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <ms5611_read_prom+0x100>)
 80007b8:	80da      	strh	r2, [r3, #6]


    /* Get C5 */
    ms5611_write(MS5611_PROM_C5);
 80007ba:	20aa      	movs	r0, #170	; 0xaa
 80007bc:	f000 f860 	bl	8000880 <ms5611_write>
    ms5611_read(prom_tmp, 2);
 80007c0:	ab01      	add	r3, sp, #4
 80007c2:	4618      	mov	r0, r3
 80007c4:	2102      	movs	r1, #2
 80007c6:	f000 f893 	bl	80008f0 <ms5611_read>

    cfg.c5 = (prom_tmp[0] << 8 | prom_tmp[1]);
 80007ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	b29b      	uxth	r3, r3
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <ms5611_read_prom+0x100>)
 80007e0:	811a      	strh	r2, [r3, #8]


    /* Get C6 */
    ms5611_write(MS5611_PROM_C6);
 80007e2:	20ac      	movs	r0, #172	; 0xac
 80007e4:	f000 f84c 	bl	8000880 <ms5611_write>
    ms5611_read(prom_tmp, 2);
 80007e8:	ab01      	add	r3, sp, #4
 80007ea:	4618      	mov	r0, r3
 80007ec:	2102      	movs	r1, #2
 80007ee:	f000 f87f 	bl	80008f0 <ms5611_read>

    cfg.c6 = (prom_tmp[0] << 8 | prom_tmp[1]);
 80007f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b29b      	uxth	r3, r3
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b02      	ldr	r3, [pc, #8]	; (8000810 <ms5611_read_prom+0x100>)
 8000808:	815a      	strh	r2, [r3, #10]
}
 800080a:	b003      	add	sp, #12
 800080c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000810:	20000c48 	.word	0x20000c48
	...

08000820 <ms5611_read_adc>:


/* Read ADC */
uint32_t ms5611_read_adc(void) {
 8000820:	b500      	push	{lr}
 8000822:	b083      	sub	sp, #12

    uint8_t retval[3] = {0};
 8000824:	2300      	movs	r3, #0
 8000826:	f8ad 3004 	strh.w	r3, [sp, #4]
 800082a:	2300      	movs	r3, #0
 800082c:	f88d 3006 	strb.w	r3, [sp, #6]

    ms5611_write(MS5611_READ_ADC);
 8000830:	2000      	movs	r0, #0
 8000832:	f000 f825 	bl	8000880 <ms5611_write>
    ms5611_read(retval, 3);
 8000836:	ab01      	add	r3, sp, #4
 8000838:	4618      	mov	r0, r3
 800083a:	2103      	movs	r1, #3
 800083c:	f000 f858 	bl	80008f0 <ms5611_read>
    
    return ((retval[0] << 16) | ((retval[1] << 8)) | (retval[2]));
 8000840:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000844:	041a      	lsls	r2, r3, #16
 8000846:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	4313      	orrs	r3, r2
 800084e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000852:	4313      	orrs	r3, r2
}
 8000854:	4618      	mov	r0, r3
 8000856:	b003      	add	sp, #12
 8000858:	f85d fb04 	ldr.w	pc, [sp], #4
 800085c:	0000      	movs	r0, r0
	...

08000860 <ms5611_d1_conv>:


/* Initiate D1 Conversion */
void ms5611_d1_conv(void) {
 8000860:	b508      	push	{r3, lr}

    ms5611_write(MS5611_D1_CONVERSION);
 8000862:	2048      	movs	r0, #72	; 0x48
 8000864:	f000 f80c 	bl	8000880 <ms5611_write>
    chThdSleepMilliseconds(9); 
 8000868:	205a      	movs	r0, #90	; 0x5a
 800086a:	f004 fba1 	bl	8004fb0 <chThdSleep>
}
 800086e:	bd08      	pop	{r3, pc}

08000870 <ms5611_d2_conv>:

/* Initiate D2 Conversion */
void ms5611_d2_conv(void) {
 8000870:	b508      	push	{r3, lr}

    ms5611_write(MS5611_D2_CONVERSION);
 8000872:	2058      	movs	r0, #88	; 0x58
 8000874:	f000 f804 	bl	8000880 <ms5611_write>
    chThdSleepMilliseconds(9);         
 8000878:	205a      	movs	r0, #90	; 0x5a
 800087a:	f004 fb99 	bl	8004fb0 <chThdSleep>
}
 800087e:	bd08      	pop	{r3, pc}

08000880 <ms5611_write>:


/* Transmit one byte over I2C */
static bool ms5611_write(uint8_t cmd)
{
 8000880:	b500      	push	{lr}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	4603      	mov	r3, r0
 8000886:	f88d 3017 	strb.w	r3, [sp, #23]
    static uint8_t buf[1];
    buf[0] = cmd;
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <ms5611_write+0x68>)
 800088c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000890:	7013      	strb	r3, [r2, #0]
    
    msg_t result = i2cMasterTransmitTimeout(
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <ms5611_write+0x6c>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2300      	movs	r3, #0
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	23c8      	movs	r3, #200	; 0xc8
 80008a0:	9302      	str	r3, [sp, #8]
 80008a2:	4610      	mov	r0, r2
 80008a4:	2177      	movs	r1, #119	; 0x77
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <ms5611_write+0x68>)
 80008a8:	2301      	movs	r3, #1
 80008aa:	f002 f9e9 	bl	8002c80 <i2cMasterTransmitTimeout>
 80008ae:	9007      	str	r0, [sp, #28]
        ms5611_i2cd, MS5611_ADDR, buf, 1, NULL, 0, MS2ST(20));

    if(result == MSG_OK) {
 80008b0:	9b07      	ldr	r3, [sp, #28]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d101      	bne.n	80008ba <ms5611_write+0x3a>
        return true;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e012      	b.n	80008e0 <ms5611_write+0x60>
    } else if(result == MSG_RESET) {
 80008ba:	9b07      	ldr	r3, [sp, #28]
 80008bc:	f113 0f02 	cmn.w	r3, #2
 80008c0:	d107      	bne.n	80008d2 <ms5611_write+0x52>
        i2cflags_t i2c_errs = i2cGetErrors(ms5611_i2cd);
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <ms5611_write+0x6c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 f9c2 	bl	8002c50 <i2cGetErrors>
 80008cc:	9006      	str	r0, [sp, #24]
        (void)i2c_errs;
        return false;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e006      	b.n	80008e0 <ms5611_write+0x60>
    } else if(result == MSG_TIMEOUT) {
 80008d2:	9b07      	ldr	r3, [sp, #28]
 80008d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008d8:	d101      	bne.n	80008de <ms5611_write+0x5e>
        return false;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <ms5611_write+0x60>
    } else {
        return false;
 80008de:	2300      	movs	r3, #0
    }
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	b009      	add	sp, #36	; 0x24
 80008e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008e8:	20000c54 	.word	0x20000c54
 80008ec:	20000c44 	.word	0x20000c44

080008f0 <ms5611_read>:

/* Read n bytes over I2C */
static bool ms5611_read(uint8_t* rxbuf, uint8_t n)
{
 80008f0:	b510      	push	{r4, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	9003      	str	r0, [sp, #12]
 80008f6:	460b      	mov	r3, r1
 80008f8:	f88d 300b 	strb.w	r3, [sp, #11]
    msg_t result = i2cMasterReceiveTimeout(
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <ms5611_read+0x5c>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8000904:	23c8      	movs	r3, #200	; 0xc8
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	4610      	mov	r0, r2
 800090a:	2177      	movs	r1, #119	; 0x77
 800090c:	9a03      	ldr	r2, [sp, #12]
 800090e:	4623      	mov	r3, r4
 8000910:	f002 fa0e 	bl	8002d30 <i2cMasterReceiveTimeout>
 8000914:	9005      	str	r0, [sp, #20]
        ms5611_i2cd, MS5611_ADDR, rxbuf, n, MS2ST(20));
        
    if(result == MSG_OK) {
 8000916:	9b05      	ldr	r3, [sp, #20]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <ms5611_read+0x30>
        return true;
 800091c:	2301      	movs	r3, #1
 800091e:	e012      	b.n	8000946 <ms5611_read+0x56>
    } else if(result == MSG_RESET) {
 8000920:	9b05      	ldr	r3, [sp, #20]
 8000922:	f113 0f02 	cmn.w	r3, #2
 8000926:	d107      	bne.n	8000938 <ms5611_read+0x48>
        i2cflags_t i2c_errs = i2cGetErrors(ms5611_i2cd);
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <ms5611_read+0x5c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f002 f98f 	bl	8002c50 <i2cGetErrors>
 8000932:	9004      	str	r0, [sp, #16]
        (void)i2c_errs;
        return false;
 8000934:	2300      	movs	r3, #0
 8000936:	e006      	b.n	8000946 <ms5611_read+0x56>
    } else if(result == MSG_TIMEOUT) {
 8000938:	9b05      	ldr	r3, [sp, #20]
 800093a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800093e:	d101      	bne.n	8000944 <ms5611_read+0x54>
        return false;
 8000940:	2300      	movs	r3, #0
 8000942:	e000      	b.n	8000946 <ms5611_read+0x56>
    } else {
        return false;
 8000944:	2300      	movs	r3, #0
    }
}
 8000946:	4618      	mov	r0, r3
 8000948:	b006      	add	sp, #24
 800094a:	bd10      	pop	{r4, pc}
 800094c:	20000c44 	.word	0x20000c44

08000950 <meas_thd>:
#include "measure.h"


/* Measurement Thread */ 
static THD_WORKING_AREA(meas_thd_wa, 1024);
static THD_FUNCTION(meas_thd, arg) {
 8000950:	b500      	push	{lr}
 8000952:	b085      	sub	sp, #20
 8000954:	9001      	str	r0, [sp, #4]
    
    (void)arg;
    uint32_t pressure;  
  
    /* Configure Pressure Sensor */
    ms5611_configure(&I2CD1);
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <meas_thd+0x20>)
 8000958:	f7ff fd9a 	bl	8000490 <ms5611_configure>
    
    /* Test Code */
    while(true) {
    
        chThdSleepMilliseconds(80); 
 800095c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000960:	f004 fb26 	bl	8004fb0 <chThdSleep>
        pressure = get_pressure();
 8000964:	f7ff fdac 	bl	80004c0 <get_pressure>
 8000968:	4603      	mov	r3, r0
 800096a:	9303      	str	r3, [sp, #12]
 800096c:	e7f6      	b.n	800095c <meas_thd+0xc>
 800096e:	bf00      	nop
 8000970:	200009c0 	.word	0x200009c0
	...

08000980 <begin_measurements>:
    
    (void) pressure;
}
    

void begin_measurements(void) {
 8000980:	b500      	push	{lr}
 8000982:	b083      	sub	sp, #12

    chThdCreateStatic(meas_thd_wa, sizeof(meas_thd_wa), HIGHPRIO, meas_thd, NULL);
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <begin_measurements+0x1c>)
 800098a:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800098e:	227f      	movs	r2, #127	; 0x7f
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <begin_measurements+0x20>)
 8000992:	f004 fadd 	bl	8004f50 <chThdCreateStatic>
}
 8000996:	b003      	add	sp, #12
 8000998:	f85d fb04 	ldr.w	pc, [sp], #4
 800099c:	20000c58 	.word	0x20000c58
 80009a0:	08000951 	.word	0x08000951
	...

080009b0 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 80009b0:	b082      	sub	sp, #8
 80009b2:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <chRegSetThreadName+0x10>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	9a01      	ldr	r2, [sp, #4]
 80009ba:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
 80009bc:	b002      	add	sp, #8
 80009be:	4770      	bx	lr
 80009c0:	20000800 	.word	0x20000800
	...

080009d0 <STAT>:
#include "ch.h"
#include "hal.h"

/* Status Thread */ 
static THD_WORKING_AREA(waSTAT, 128);
static THD_FUNCTION(STAT, arg) {
 80009d0:	b500      	push	{lr}
 80009d2:	b083      	sub	sp, #12
 80009d4:	9001      	str	r0, [sp, #4]
  
    (void)arg;
    chRegSetThreadName("status");    
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <STAT+0x30>)
 80009d8:	f7ff ffea 	bl	80009b0 <chRegSetThreadName>
    while (true) {
        
        palSetPad(GPIOB, GPIOB_STAT);
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <STAT+0x34>)
 80009de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e2:	831a      	strh	r2, [r3, #24]
        //palSetPad(GPIOB, GPIOB_BEEP);
        chThdSleepMilliseconds(100);
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f004 fae2 	bl	8004fb0 <chThdSleep>
        
        palClearPad(GPIOB, GPIOB_STAT);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <STAT+0x34>)
 80009ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f2:	835a      	strh	r2, [r3, #26]
        //palClearPad(GPIOB, GPIOB_BEEP);    
        chThdSleepMilliseconds(500);
 80009f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80009f8:	f004 fada 	bl	8004fb0 <chThdSleep>
 80009fc:	e7ee      	b.n	80009dc <STAT+0xc>
 80009fe:	bf00      	nop
 8000a00:	08005a1c 	.word	0x08005a1c
 8000a04:	40020400 	.word	0x40020400
	...

08000a10 <begin_status>:
    }
}

void begin_status(void){
 8000a10:	b500      	push	{lr}
 8000a12:	b083      	sub	sp, #12

    chThdCreateStatic(waSTAT, sizeof(waSTAT), NORMALPRIO, STAT, NULL);
 8000a14:	2300      	movs	r3, #0
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <begin_status+0x1c>)
 8000a1a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000a1e:	2240      	movs	r2, #64	; 0x40
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <begin_status+0x20>)
 8000a22:	f004 fa95 	bl	8004f50 <chThdCreateStatic>
}
 8000a26:	b003      	add	sp, #12
 8000a28:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a2c:	200011d0 	.word	0x200011d0
 8000a30:	080009d1 	.word	0x080009d1
	...

08000a40 <Vector104>:
 * @details It just wakes transaction thread. All error  handling performs in
 *          that thread.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_SDIO_HANDLER) {
 8000a40:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8000a42:	f004 fc75 	bl	8005330 <_stats_increase_irq>
 8000a46:	f003 fd9b 	bl	8004580 <_dbg_check_enter_isr>

  osalSysLockFromISR();
 8000a4a:	f001 f8c1 	bl	8001bd0 <osalSysLockFromISR.lto_priv.213>

  /* Disables the source but the status flags are not reset because the
     read/write functions needs to check them.*/
  SDIO->MASK = 0;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <Vector104+0x2c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	63da      	str	r2, [r3, #60]	; 0x3c

  osalThreadResumeI(&SDCD1.thread, MSG_OK);
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <Vector104+0x30>)
 8000a56:	2100      	movs	r1, #0
 8000a58:	f001 f8ea 	bl	8001c30 <osalThreadResumeI.lto_priv.212>

  osalSysUnlockFromISR();
 8000a5c:	f001 f8c0 	bl	8001be0 <osalSysUnlockFromISR.lto_priv.211>

  OSAL_IRQ_EPILOGUE();
 8000a60:	f003 fdae 	bl	80045c0 <_dbg_check_leave_isr>
 8000a64:	f003 fa44 	bl	8003ef0 <_port_irq_epilogue>
}
 8000a68:	bd08      	pop	{r3, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40012c00 	.word	0x40012c00
 8000a70:	20000a34 	.word	0x20000a34
	...

08000a80 <sdc_lld_init>:
/**
 * @brief   Low level SDC driver initialization.
 *
 * @notapi
 */
void sdc_lld_init(void) {
 8000a80:	b508      	push	{r3, lr}

  sdcObjectInit(&SDCD1);
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <sdc_lld_init+0x1c>)
 8000a84:	f002 fd14 	bl	80034b0 <sdcObjectInit>
  SDCD1.thread = NULL;
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <sdc_lld_init+0x1c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	63da      	str	r2, [r3, #60]	; 0x3c
  SDCD1.dma    = STM32_DMA_STREAM(STM32_SDC_SDIO_DMA_STREAM);
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <sdc_lld_init+0x1c>)
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <sdc_lld_init+0x20>)
 8000a92:	645a      	str	r2, [r3, #68]	; 0x44
  SDCD1.sdio   = SDIO;
 8000a94:	4b01      	ldr	r3, [pc, #4]	; (8000a9c <sdc_lld_init+0x1c>)
 8000a96:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <sdc_lld_init+0x24>)
 8000a98:	649a      	str	r2, [r3, #72]	; 0x48
}
 8000a9a:	bd08      	pop	{r3, pc}
 8000a9c:	200009f8 	.word	0x200009f8
 8000aa0:	08005e94 	.word	0x08005e94
 8000aa4:	40012c00 	.word	0x40012c00
	...

08000ab0 <sdc_lld_start_clk>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_start_clk(SDCDriver *sdcp) {
 8000ab0:	b500      	push	{lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	9001      	str	r0, [sp, #4]

  /* Initial clock setting: 400kHz, 1bit mode.*/
  sdcp->sdio->CLKCR  = STM32_SDIO_DIV_LS;
 8000ab6:	9b01      	ldr	r3, [sp, #4]
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aba:	2278      	movs	r2, #120	; 0x78
 8000abc:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER |= SDIO_POWER_PWRCTRL_0 | SDIO_POWER_PWRCTRL_1;
 8000abe:	9b01      	ldr	r3, [sp, #4]
 8000ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ac2:	9a01      	ldr	r2, [sp, #4]
 8000ac4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	f042 0203 	orr.w	r2, r2, #3
 8000acc:	601a      	str	r2, [r3, #0]
  sdcp->sdio->CLKCR |= SDIO_CLKCR_CLKEN;
 8000ace:	9b01      	ldr	r3, [sp, #4]
 8000ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ad2:	9a01      	ldr	r2, [sp, #4]
 8000ad4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000ad6:	6852      	ldr	r2, [r2, #4]
 8000ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000adc:	605a      	str	r2, [r3, #4]

  /* Clock activation delay.*/
  osalThreadSleep(OSAL_MS2ST(STM32_SDC_CLOCK_ACTIVATION_DELAY));
 8000ade:	2064      	movs	r0, #100	; 0x64
 8000ae0:	f001 f886 	bl	8001bf0 <osalThreadSleep.lto_priv.210>
}
 8000ae4:	b003      	add	sp, #12
 8000ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000aea:	bf00      	nop
 8000aec:	0000      	movs	r0, r0
	...

08000af0 <sdc_lld_set_data_clk>:
 * @param[in] sdcp      pointer to the @p SDCDriver object
 * @param[in] clk       the clock mode
 *
 * @notapi
 */
void sdc_lld_set_data_clk(SDCDriver *sdcp, sdcbusclk_t clk) {
 8000af0:	b082      	sub	sp, #8
 8000af2:	9001      	str	r0, [sp, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	f88d 3003 	strb.w	r3, [sp, #3]
  else
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
#else
  (void)clk;

  sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
 8000afa:	9b01      	ldr	r3, [sp, #4]
 8000afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000afe:	9a01      	ldr	r2, [sp, #4]
 8000b00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000b02:	6852      	ldr	r2, [r2, #4]
 8000b04:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000b08:	605a      	str	r2, [r3, #4]
#endif
}
 8000b0a:	b002      	add	sp, #8
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <sdc_lld_stop_clk>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_stop_clk(SDCDriver *sdcp) {
 8000b10:	b082      	sub	sp, #8
 8000b12:	9001      	str	r0, [sp, #4]

  sdcp->sdio->CLKCR = 0;
 8000b14:	9b01      	ldr	r3, [sp, #4]
 8000b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER = 0;
 8000b1c:	9b01      	ldr	r3, [sp, #4]
 8000b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	b002      	add	sp, #8
 8000b26:	4770      	bx	lr
	...

08000b30 <sdc_lld_set_bus_mode>:
 * @param[in] sdcp      pointer to the @p SDCDriver object
 * @param[in] mode      bus mode
 *
 * @notapi
 */
void sdc_lld_set_bus_mode(SDCDriver *sdcp, sdcbusmode_t mode) {
 8000b30:	b084      	sub	sp, #16
 8000b32:	9001      	str	r0, [sp, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8000b3a:	9b01      	ldr	r3, [sp, #4]
 8000b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b44:	9303      	str	r3, [sp, #12]

  switch (mode) {
 8000b46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d008      	beq.n	8000b60 <sdc_lld_set_bus_mode+0x30>
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d00d      	beq.n	8000b6e <sdc_lld_set_bus_mode+0x3e>
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d111      	bne.n	8000b7a <sdc_lld_set_bus_mode+0x4a>
  case SDC_MODE_1BIT:
    sdcp->sdio->CLKCR = clk;
 8000b56:	9b01      	ldr	r3, [sp, #4]
 8000b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b5a:	9a03      	ldr	r2, [sp, #12]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	e00c      	b.n	8000b7a <sdc_lld_set_bus_mode+0x4a>
    break;
  case SDC_MODE_4BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b64:	9a03      	ldr	r2, [sp, #12]
 8000b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	e005      	b.n	8000b7a <sdc_lld_set_bus_mode+0x4a>
    break;
  case SDC_MODE_8BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_1;
 8000b6e:	9b01      	ldr	r3, [sp, #4]
 8000b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b72:	9a03      	ldr	r2, [sp, #12]
 8000b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b78:	605a      	str	r2, [r3, #4]
    break;
  }
}
 8000b7a:	b004      	add	sp, #16
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <sdc_lld_send_cmd_none>:
 * @param[in] cmd       card command
 * @param[in] arg       command argument
 *
 * @notapi
 */
void sdc_lld_send_cmd_none(SDCDriver *sdcp, uint8_t cmd, uint32_t arg) {
 8000b80:	b084      	sub	sp, #16
 8000b82:	9003      	str	r0, [sp, #12]
 8000b84:	460b      	mov	r3, r1
 8000b86:	9201      	str	r2, [sp, #4]
 8000b88:	f88d 300b 	strb.w	r3, [sp, #11]

  sdcp->sdio->ARG = arg;
 8000b8c:	9b03      	ldr	r3, [sp, #12]
 8000b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b90:	9a01      	ldr	r2, [sp, #4]
 8000b92:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 8000b94:	9b03      	ldr	r3, [sp, #12]
 8000b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b98:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000b9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ba0:	60da      	str	r2, [r3, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0)
 8000ba2:	9b03      	ldr	r3, [sp, #12]
 8000ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f8      	beq.n	8000ba2 <sdc_lld_send_cmd_none+0x22>
    ;
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 8000bb0:	9b03      	ldr	r3, [sp, #12]
 8000bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr
 8000bbc:	0000      	movs	r0, r0
	...

08000bc0 <sdc_lld_send_cmd_short>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                            uint32_t *resp) {
 8000bc0:	b500      	push	{lr}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	9003      	str	r0, [sp, #12]
 8000bc6:	9201      	str	r2, [sp, #4]
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	f88d 300b 	strb.w	r3, [sp, #11]
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 8000bd0:	9b03      	ldr	r3, [sp, #12]
 8000bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd4:	9a01      	ldr	r2, [sp, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8000bd8:	9b03      	ldr	r3, [sp, #12]
 8000bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bdc:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bea:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8000bec:	9b03      	ldr	r3, [sp, #12]
 8000bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf2:	9305      	str	r3, [sp, #20]
 8000bf4:	9b05      	ldr	r3, [sp, #20]
 8000bf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f6      	beq.n	8000bec <sdc_lld_send_cmd_short+0x2c>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8000bfe:	9b03      	ldr	r3, [sp, #12]
 8000c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c02:	9a05      	ldr	r2, [sp, #20]
 8000c04:	f002 0245 	and.w	r2, r2, #69	; 0x45
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 8000c0a:	9b05      	ldr	r3, [sp, #20]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <sdc_lld_send_cmd_short+0x60>
    sdc_lld_collect_errors(sdcp, sta);
 8000c14:	9803      	ldr	r0, [sp, #12]
 8000c16:	9905      	ldr	r1, [sp, #20]
 8000c18:	f001 f93a 	bl	8001e90 <sdc_lld_collect_errors.lto_priv.209>
    return HAL_FAILED;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e005      	b.n	8000c2c <sdc_lld_send_cmd_short+0x6c>
  }
  *resp = sdcp->sdio->RESP1;
 8000c20:	9b03      	ldr	r3, [sp, #12]
 8000c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	9b00      	ldr	r3, [sp, #0]
 8000c28:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	b007      	add	sp, #28
 8000c30:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000c40 <sdc_lld_send_cmd_short_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                                uint32_t *resp) {
 8000c40:	b500      	push	{lr}
 8000c42:	b087      	sub	sp, #28
 8000c44:	9003      	str	r0, [sp, #12]
 8000c46:	9201      	str	r2, [sp, #4]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	f88d 300b 	strb.w	r3, [sp, #11]
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 8000c50:	9b03      	ldr	r3, [sp, #12]
 8000c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c54:	9a01      	ldr	r2, [sp, #4]
 8000c56:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8000c58:	9b03      	ldr	r3, [sp, #12]
 8000c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c6a:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8000c6c:	9b03      	ldr	r3, [sp, #12]
 8000c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c72:	9305      	str	r3, [sp, #20]
 8000c74:	9b05      	ldr	r3, [sp, #20]
 8000c76:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f6      	beq.n	8000c6c <sdc_lld_send_cmd_short_crc+0x2c>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8000c7e:	9b03      	ldr	r3, [sp, #12]
 8000c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c82:	9a05      	ldr	r2, [sp, #20]
 8000c84:	f002 0245 	and.w	r2, r2, #69	; 0x45
 8000c88:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8000c8a:	9b05      	ldr	r3, [sp, #20]
 8000c8c:	f003 0305 	and.w	r3, r3, #5
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <sdc_lld_send_cmd_short_crc+0x60>
    sdc_lld_collect_errors(sdcp, sta);
 8000c94:	9803      	ldr	r0, [sp, #12]
 8000c96:	9905      	ldr	r1, [sp, #20]
 8000c98:	f001 f8fa 	bl	8001e90 <sdc_lld_collect_errors.lto_priv.209>
    return HAL_FAILED;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e005      	b.n	8000cac <sdc_lld_send_cmd_short_crc+0x6c>
  }
  *resp = sdcp->sdio->RESP1;
 8000ca0:	9b03      	ldr	r3, [sp, #12]
 8000ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca4:	695a      	ldr	r2, [r3, #20]
 8000ca6:	9b00      	ldr	r3, [sp, #0]
 8000ca8:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	b007      	add	sp, #28
 8000cb0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000cc0 <sdc_lld_send_cmd_long_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_long_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                               uint32_t *resp) {
 8000cc0:	b500      	push	{lr}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	9003      	str	r0, [sp, #12]
 8000cc6:	9201      	str	r2, [sp, #4]
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	f88d 300b 	strb.w	r3, [sp, #11]
  uint32_t sta;

  (void)sdcp;

  sdcp->sdio->ARG = arg;
 8000cd0:	9b03      	ldr	r3, [sp, #12]
 8000cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cd4:	9a01      	ldr	r2, [sp, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8000cd8:	9b03      	ldr	r3, [sp, #12]
 8000cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cdc:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000ce0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cea:	60da      	str	r2, [r3, #12]
                                    SDIO_CMD_CPSMEN;
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8000cec:	9b03      	ldr	r3, [sp, #12]
 8000cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	9305      	str	r3, [sp, #20]
 8000cf4:	9b05      	ldr	r3, [sp, #20]
 8000cf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f6      	beq.n	8000cec <sdc_lld_send_cmd_long_crc+0x2c>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8000cfe:	9b03      	ldr	r3, [sp, #12]
 8000d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d02:	9a05      	ldr	r2, [sp, #20]
 8000d04:	f002 0245 	and.w	r2, r2, #69	; 0x45
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (STM32_SDIO_STA_ERROR_MASK)) != 0) {
 8000d0a:	9b05      	ldr	r3, [sp, #20]
 8000d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <sdc_lld_send_cmd_long_crc+0x60>
    sdc_lld_collect_errors(sdcp, sta);
 8000d14:	9803      	ldr	r0, [sp, #12]
 8000d16:	9905      	ldr	r1, [sp, #20]
 8000d18:	f001 f8ba 	bl	8001e90 <sdc_lld_collect_errors.lto_priv.209>
    return HAL_FAILED;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e01a      	b.n	8000d56 <sdc_lld_send_cmd_long_crc+0x96>
  }
  /* Save bytes in reverse order because MSB in response comes first.*/
  *resp++ = sdcp->sdio->RESP4;
 8000d20:	9b00      	ldr	r3, [sp, #0]
 8000d22:	1d1a      	adds	r2, r3, #4
 8000d24:	9200      	str	r2, [sp, #0]
 8000d26:	9a03      	ldr	r2, [sp, #12]
 8000d28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d2a:	6a12      	ldr	r2, [r2, #32]
 8000d2c:	601a      	str	r2, [r3, #0]
  *resp++ = sdcp->sdio->RESP3;
 8000d2e:	9b00      	ldr	r3, [sp, #0]
 8000d30:	1d1a      	adds	r2, r3, #4
 8000d32:	9200      	str	r2, [sp, #0]
 8000d34:	9a03      	ldr	r2, [sp, #12]
 8000d36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d38:	69d2      	ldr	r2, [r2, #28]
 8000d3a:	601a      	str	r2, [r3, #0]
  *resp++ = sdcp->sdio->RESP2;
 8000d3c:	9b00      	ldr	r3, [sp, #0]
 8000d3e:	1d1a      	adds	r2, r3, #4
 8000d40:	9200      	str	r2, [sp, #0]
 8000d42:	9a03      	ldr	r2, [sp, #12]
 8000d44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d46:	6992      	ldr	r2, [r2, #24]
 8000d48:	601a      	str	r2, [r3, #0]
  *resp   = sdcp->sdio->RESP1;
 8000d4a:	9b03      	ldr	r3, [sp, #12]
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	9b00      	ldr	r3, [sp, #0]
 8000d52:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	b007      	add	sp, #28
 8000d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d5e:	bf00      	nop

08000d60 <sdc_lld_read_special>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_special(SDCDriver *sdcp, uint8_t *buf, size_t bytes,
                          uint8_t cmd, uint32_t arg) {
 8000d60:	b500      	push	{lr}
 8000d62:	b087      	sub	sp, #28
 8000d64:	9003      	str	r0, [sp, #12]
 8000d66:	9102      	str	r1, [sp, #8]
 8000d68:	9201      	str	r2, [sp, #4]
 8000d6a:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t resp[1];

  if(sdc_lld_prepare_read_bytes(sdcp, buf, bytes))
 8000d6e:	9803      	ldr	r0, [sp, #12]
 8000d70:	9902      	ldr	r1, [sp, #8]
 8000d72:	9a01      	ldr	r2, [sp, #4]
 8000d74:	f000 ff6c 	bl	8001c50 <sdc_lld_prepare_read_bytes.lto_priv.208>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d11a      	bne.n	8000db4 <sdc_lld_read_special+0x54>
    goto error;

  if (sdc_lld_send_cmd_short_crc(sdcp, cmd, arg, resp)
 8000d7e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000d82:	ab05      	add	r3, sp, #20
 8000d84:	9803      	ldr	r0, [sp, #12]
 8000d86:	4611      	mov	r1, r2
 8000d88:	9a08      	ldr	r2, [sp, #32]
 8000d8a:	f7ff ff59 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10f      	bne.n	8000db4 <sdc_lld_read_special+0x54>
                                 || MMCSD_R1_ERROR(resp[0]))
 8000d94:	9a05      	ldr	r2, [sp, #20]
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <sdc_lld_read_special+0x6c>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10a      	bne.n	8000db4 <sdc_lld_read_special+0x54>
    goto error;

  if (sdc_lld_wait_transaction_end(sdcp, 1, resp))
 8000d9e:	ab05      	add	r3, sp, #20
 8000da0:	9803      	ldr	r0, [sp, #12]
 8000da2:	2101      	movs	r1, #1
 8000da4:	461a      	mov	r2, r3
 8000da6:	f001 f823 	bl	8001df0 <sdc_lld_wait_transaction_end.lto_priv.205>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <sdc_lld_read_special+0x54>
    goto error;

  return HAL_SUCCESS;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e006      	b.n	8000dc2 <sdc_lld_read_special+0x62>

error:
  sdc_lld_error_cleanup(sdcp, 1, resp);
 8000db4:	ab05      	add	r3, sp, #20
 8000db6:	9803      	ldr	r0, [sp, #12]
 8000db8:	2101      	movs	r1, #1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f001 f8b8 	bl	8001f30 <sdc_lld_error_cleanup.lto_priv.204>
  return HAL_FAILED;
 8000dc0:	2301      	movs	r3, #1
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	b007      	add	sp, #28
 8000dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dca:	bf00      	nop
 8000dcc:	fdffe008 	.word	0xfdffe008

08000dd0 <sdc_lld_read_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
                          uint8_t *buf, uint32_t blocks) {
 8000dd0:	b500      	push	{lr}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	9003      	str	r0, [sp, #12]
 8000dd6:	9102      	str	r1, [sp, #8]
 8000dd8:	9201      	str	r2, [sp, #4]
 8000dda:	9300      	str	r3, [sp, #0]
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8000ddc:	9b00      	ldr	r3, [sp, #0]
 8000dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000de2:	d302      	bcc.n	8000dea <sdc_lld_read_aligned+0x1a>
 8000de4:	482d      	ldr	r0, [pc, #180]	; (8000e9c <sdc_lld_read_aligned+0xcc>)
 8000de6:	f003 fb03 	bl	80043f0 <chSysHalt>

  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8000dea:	9b03      	ldr	r3, [sp, #12]
 8000dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dee:	4a2c      	ldr	r2, [pc, #176]	; (8000ea0 <sdc_lld_read_aligned+0xd0>)
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for reading.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 8000df2:	9803      	ldr	r0, [sp, #12]
 8000df4:	f002 fb24 	bl	8003440 <_sdc_wait_for_transfer_state>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <sdc_lld_read_aligned+0x32>
    return HAL_FAILED;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e048      	b.n	8000e94 <sdc_lld_read_aligned+0xc4>

  /* Prepares the DMA channel for writing.*/
  dmaStreamSetMemory0(sdcp->dma, buf);
 8000e02:	9b03      	ldr	r3, [sp, #12]
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	9a01      	ldr	r2, [sp, #4]
 8000e0a:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 8000e0c:	9b03      	ldr	r3, [sp, #12]
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	9a00      	ldr	r2, [sp, #0]
 8000e14:	0252      	lsls	r2, r2, #9
 8000e16:	0892      	lsrs	r2, r2, #2
 8000e18:	605a      	str	r2, [r3, #4]
                              (blocks * MMCSD_BLOCK_SIZE) / sizeof (uint32_t));
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8000e1a:	9b03      	ldr	r3, [sp, #12]
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	9a03      	ldr	r2, [sp, #12]
 8000e22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e24:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8000e26:	9b03      	ldr	r3, [sp, #12]
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	9a03      	ldr	r2, [sp, #12]
 8000e2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	f042 0201 	orr.w	r2, r2, #1
 8000e38:	601a      	str	r2, [r3, #0]

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8000e3a:	9b03      	ldr	r3, [sp, #12]
 8000e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <sdc_lld_read_aligned+0xd4>)
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8000e42:	9b03      	ldr	r3, [sp, #12]
 8000e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e46:	f240 322a 	movw	r2, #810	; 0x32a
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_RXOVERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8000e4c:	9b03      	ldr	r3, [sp, #12]
 8000e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e50:	9a00      	ldr	r2, [sp, #0]
 8000e52:	0252      	lsls	r2, r2, #9
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8000e56:	9b03      	ldr	r3, [sp, #12]
 8000e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5a:	229b      	movs	r2, #155	; 0x9b
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
                      SDIO_DCTRL_DBLOCKSIZE_3 |
                      SDIO_DCTRL_DBLOCKSIZE_0 |
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  if (sdc_lld_prepare_read(sdcp, startblk, blocks, resp) == TRUE)
 8000e5e:	ab05      	add	r3, sp, #20
 8000e60:	9803      	ldr	r0, [sp, #12]
 8000e62:	9902      	ldr	r1, [sp, #8]
 8000e64:	9a00      	ldr	r2, [sp, #0]
 8000e66:	f000 ff43 	bl	8001cf0 <sdc_lld_prepare_read.lto_priv.207>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10a      	bne.n	8000e86 <sdc_lld_read_aligned+0xb6>
    goto error;

  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == TRUE)
 8000e70:	ab05      	add	r3, sp, #20
 8000e72:	9803      	ldr	r0, [sp, #12]
 8000e74:	9900      	ldr	r1, [sp, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	f000 ffba 	bl	8001df0 <sdc_lld_wait_transaction_end.lto_priv.205>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <sdc_lld_read_aligned+0xb6>
    goto error;

  return HAL_SUCCESS;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e006      	b.n	8000e94 <sdc_lld_read_aligned+0xc4>

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8000e86:	ab05      	add	r3, sp, #20
 8000e88:	9803      	ldr	r0, [sp, #12]
 8000e8a:	9900      	ldr	r1, [sp, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f001 f84f 	bl	8001f30 <sdc_lld_error_cleanup.lto_priv.204>
  return HAL_FAILED;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	b007      	add	sp, #28
 8000e98:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e9c:	08005f60 	.word	0x08005f60
 8000ea0:	000927c0 	.word	0x000927c0
 8000ea4:	00c007ff 	.word	0x00c007ff
	...

08000eb0 <sdc_lld_write_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
                           const uint8_t *buf, uint32_t blocks) {
 8000eb0:	b500      	push	{lr}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	9003      	str	r0, [sp, #12]
 8000eb6:	9102      	str	r1, [sp, #8]
 8000eb8:	9201      	str	r2, [sp, #4]
 8000eba:	9300      	str	r3, [sp, #0]
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8000ebc:	9b00      	ldr	r3, [sp, #0]
 8000ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ec2:	d302      	bcc.n	8000eca <sdc_lld_write_aligned+0x1a>
 8000ec4:	482e      	ldr	r0, [pc, #184]	; (8000f80 <sdc_lld_write_aligned+0xd0>)
 8000ec6:	f003 fa93 	bl	80043f0 <chSysHalt>

  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 8000eca:	9b03      	ldr	r3, [sp, #12]
 8000ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ece:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <sdc_lld_write_aligned+0xd4>)
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for writing.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 8000ed2:	9803      	ldr	r0, [sp, #12]
 8000ed4:	f002 fab4 	bl	8003440 <_sdc_wait_for_transfer_state>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <sdc_lld_write_aligned+0x32>
    return HAL_FAILED;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e04a      	b.n	8000f78 <sdc_lld_write_aligned+0xc8>

  /* Prepares the DMA channel for writing.*/
  dmaStreamSetMemory0(sdcp->dma, buf);
 8000ee2:	9b03      	ldr	r3, [sp, #12]
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	9a01      	ldr	r2, [sp, #4]
 8000eea:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 8000eec:	9b03      	ldr	r3, [sp, #12]
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	9a00      	ldr	r2, [sp, #0]
 8000ef4:	0252      	lsls	r2, r2, #9
 8000ef6:	0892      	lsrs	r2, r2, #2
 8000ef8:	605a      	str	r2, [r3, #4]
                             (blocks * MMCSD_BLOCK_SIZE) / sizeof (uint32_t));
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 8000efa:	9b03      	ldr	r3, [sp, #12]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	9a03      	ldr	r2, [sp, #12]
 8000f02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f08:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8000f0a:	9b03      	ldr	r3, [sp, #12]
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	9a03      	ldr	r2, [sp, #12]
 8000f12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	f042 0201 	orr.w	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8000f1e:	9b03      	ldr	r3, [sp, #12]
 8000f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f22:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <sdc_lld_write_aligned+0xd8>)
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8000f26:	9b03      	ldr	r3, [sp, #12]
 8000f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2a:	f240 321a 	movw	r2, #794	; 0x31a
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_TXUNDERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8000f30:	9b03      	ldr	r3, [sp, #12]
 8000f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f34:	9a00      	ldr	r2, [sp, #0]
 8000f36:	0252      	lsls	r2, r2, #9
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Talk to card what we want from it.*/
  if (sdc_lld_prepare_write(sdcp, startblk, blocks, resp) == TRUE)
 8000f3a:	ab05      	add	r3, sp, #20
 8000f3c:	9803      	ldr	r0, [sp, #12]
 8000f3e:	9902      	ldr	r1, [sp, #8]
 8000f40:	9a00      	ldr	r2, [sp, #0]
 8000f42:	f000 ff15 	bl	8001d70 <sdc_lld_prepare_write.lto_priv.206>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d10e      	bne.n	8000f6a <sdc_lld_write_aligned+0xba>
    goto error;

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 8000f4c:	9b03      	ldr	r3, [sp, #12]
 8000f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f50:	2299      	movs	r2, #153	; 0x99
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
                      SDIO_DCTRL_DBLOCKSIZE_0 |
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == TRUE)
 8000f54:	ab05      	add	r3, sp, #20
 8000f56:	9803      	ldr	r0, [sp, #12]
 8000f58:	9900      	ldr	r1, [sp, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f000 ff48 	bl	8001df0 <sdc_lld_wait_transaction_end.lto_priv.205>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <sdc_lld_write_aligned+0xba>
    goto error;

  return HAL_SUCCESS;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e006      	b.n	8000f78 <sdc_lld_write_aligned+0xc8>

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8000f6a:	ab05      	add	r3, sp, #20
 8000f6c:	9803      	ldr	r0, [sp, #12]
 8000f6e:	9900      	ldr	r1, [sp, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	f000 ffdd 	bl	8001f30 <sdc_lld_error_cleanup.lto_priv.204>
  return HAL_FAILED;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	b007      	add	sp, #28
 8000f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f80:	08005f80 	.word	0x08005f80
 8000f84:	005b8d80 	.word	0x005b8d80
 8000f88:	00c007ff 	.word	0x00c007ff
 8000f8c:	00000000 	.word	0x00000000

08000f90 <sdc_lld_read>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read(SDCDriver *sdcp, uint32_t startblk,
                  uint8_t *buf, uint32_t blocks) {
 8000f90:	b500      	push	{lr}
 8000f92:	b087      	sub	sp, #28
 8000f94:	9003      	str	r0, [sp, #12]
 8000f96:	9102      	str	r1, [sp, #8]
 8000f98:	9201      	str	r2, [sp, #4]
 8000f9a:	9300      	str	r3, [sp, #0]

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 8000f9c:	9b01      	ldr	r3, [sp, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d027      	beq.n	8000ff6 <sdc_lld_read+0x66>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9305      	str	r3, [sp, #20]
 8000faa:	e01e      	b.n	8000fea <sdc_lld_read+0x5a>
      if (sdc_lld_read_aligned(sdcp, startblk, u.buf, 1))
 8000fac:	9803      	ldr	r0, [sp, #12]
 8000fae:	9902      	ldr	r1, [sp, #8]
 8000fb0:	4a16      	ldr	r2, [pc, #88]	; (800100c <sdc_lld_read+0x7c>)
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f7ff ff0c 	bl	8000dd0 <sdc_lld_read_aligned>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <sdc_lld_read+0x32>
        return HAL_FAILED;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e020      	b.n	8001004 <sdc_lld_read+0x74>
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <sdc_lld_read+0x7c>)
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fcc:	4608      	mov	r0, r1
 8000fce:	4611      	mov	r1, r2
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f7ff f9a5 	bl	8000320 <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 8000fd6:	9b01      	ldr	r3, [sp, #4]
 8000fd8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fdc:	9301      	str	r3, [sp, #4]
      startblk++;
 8000fde:	9b02      	ldr	r3, [sp, #8]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	9302      	str	r3, [sp, #8]
                  uint8_t *buf, uint32_t blocks) {

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8000fe4:	9b05      	ldr	r3, [sp, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	9305      	str	r3, [sp, #20]
 8000fea:	9a05      	ldr	r2, [sp, #20]
 8000fec:	9b00      	ldr	r3, [sp, #0]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3dc      	bcc.n	8000fac <sdc_lld_read+0x1c>
        return HAL_FAILED;
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
      buf += MMCSD_BLOCK_SIZE;
      startblk++;
    }
    return HAL_SUCCESS;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e006      	b.n	8001004 <sdc_lld_read+0x74>
  }
#endif /* STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_read_aligned(sdcp, startblk, buf, blocks);
 8000ff6:	9803      	ldr	r0, [sp, #12]
 8000ff8:	9902      	ldr	r1, [sp, #8]
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	9b00      	ldr	r3, [sp, #0]
 8000ffe:	f7ff fee7 	bl	8000dd0 <sdc_lld_read_aligned>
 8001002:	4603      	mov	r3, r0
}
 8001004:	4618      	mov	r0, r3
 8001006:	b007      	add	sp, #28
 8001008:	f85d fb04 	ldr.w	pc, [sp], #4
 800100c:	20000a44 	.word	0x20000a44

08001010 <sdc_lld_write>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write(SDCDriver *sdcp, uint32_t startblk,
                   const uint8_t *buf, uint32_t blocks) {
 8001010:	b500      	push	{lr}
 8001012:	b087      	sub	sp, #28
 8001014:	9003      	str	r0, [sp, #12]
 8001016:	9102      	str	r1, [sp, #8]
 8001018:	9201      	str	r2, [sp, #4]
 800101a:	9300      	str	r3, [sp, #0]

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 800101c:	9b01      	ldr	r3, [sp, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d028      	beq.n	8001078 <sdc_lld_write+0x68>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	9305      	str	r3, [sp, #20]
 800102a:	e01f      	b.n	800106c <sdc_lld_write+0x5c>
      memcpy(u.buf, buf, MMCSD_BLOCK_SIZE);
 800102c:	4a18      	ldr	r2, [pc, #96]	; (8001090 <sdc_lld_write+0x80>)
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	4611      	mov	r1, r2
 8001032:	461a      	mov	r2, r3
 8001034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	f7ff f96f 	bl	8000320 <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 8001042:	9b01      	ldr	r3, [sp, #4]
 8001044:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001048:	9301      	str	r3, [sp, #4]
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
 800104a:	9803      	ldr	r0, [sp, #12]
 800104c:	9902      	ldr	r1, [sp, #8]
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <sdc_lld_write+0x80>)
 8001050:	2301      	movs	r3, #1
 8001052:	f7ff ff2d 	bl	8000eb0 <sdc_lld_write_aligned>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <sdc_lld_write+0x50>
        return HAL_FAILED;
 800105c:	2301      	movs	r3, #1
 800105e:	e012      	b.n	8001086 <sdc_lld_write+0x76>
      startblk++;
 8001060:	9b02      	ldr	r3, [sp, #8]
 8001062:	3301      	adds	r3, #1
 8001064:	9302      	str	r3, [sp, #8]
                   const uint8_t *buf, uint32_t blocks) {

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8001066:	9b05      	ldr	r3, [sp, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	9305      	str	r3, [sp, #20]
 800106c:	9a05      	ldr	r2, [sp, #20]
 800106e:	9b00      	ldr	r3, [sp, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3db      	bcc.n	800102c <sdc_lld_write+0x1c>
      buf += MMCSD_BLOCK_SIZE;
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
        return HAL_FAILED;
      startblk++;
    }
    return HAL_SUCCESS;
 8001074:	2300      	movs	r3, #0
 8001076:	e006      	b.n	8001086 <sdc_lld_write+0x76>
  }
#endif /* STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_write_aligned(sdcp, startblk, buf, blocks);
 8001078:	9803      	ldr	r0, [sp, #12]
 800107a:	9902      	ldr	r1, [sp, #8]
 800107c:	9a01      	ldr	r2, [sp, #4]
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	f7ff ff16 	bl	8000eb0 <sdc_lld_write_aligned>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	b007      	add	sp, #28
 800108a:	f85d fb04 	ldr.w	pc, [sp], #4
 800108e:	bf00      	nop
 8001090:	20000a44 	.word	0x20000a44
	...

080010a0 <sdc_lld_sync>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdc_lld_sync(SDCDriver *sdcp) {
 80010a0:	b082      	sub	sp, #8
 80010a2:	9001      	str	r0, [sp, #4]

  /* TODO: Implement.*/
  (void)sdcp;
  return HAL_SUCCESS;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	b002      	add	sp, #8
 80010aa:	4770      	bx	lr
 80010ac:	0000      	movs	r0, r0
	...

080010b0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
 80010b0:	b508      	push	{r3, lr}

  stm32_clock_init();
 80010b2:	f002 fcbd 	bl	8003a30 <stm32_clock_init>
}
 80010b6:	bd08      	pop	{r3, pc}
	...

080010c0 <sdc_lld_is_card_inserted>:

#if HAL_USE_SDC || defined(__DOXYGEN__)
/**
 * @brief   SDC card detection.
 */
bool sdc_lld_is_card_inserted(SDCDriver *sdcp) {
 80010c0:	b082      	sub	sp, #8
 80010c2:	9001      	str	r0, [sp, #4]

  (void)sdcp;
  return true;
 80010c4:	2301      	movs	r3, #1
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	b002      	add	sp, #8
 80010ca:	4770      	bx	lr
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <sdc_lld_is_write_protected>:

/**
 * @brief   SDC card write protection detection.
 */
bool sdc_lld_is_write_protected(SDCDriver *sdcp) {
 80010d0:	b082      	sub	sp, #8
 80010d2:	9001      	str	r0, [sp, #4]

  (void)sdcp;
  return false;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	b002      	add	sp, #8
 80010da:	4770      	bx	lr
 80010dc:	0000      	movs	r0, r0
	...

080010e0 <boardInit>:
/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
	...

080010f0 <i2c_lld_set_clock>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
 80010f0:	b500      	push	{lr}
 80010f2:	b087      	sub	sp, #28
 80010f4:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 80010f6:	9b01      	ldr	r3, [sp, #4]
 80010f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fa:	9304      	str	r3, [sp, #16]
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 80010fc:	9b01      	ldr	r3, [sp, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	9303      	str	r3, [sp, #12]
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8001104:	9b01      	ldr	r3, [sp, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	7a1b      	ldrb	r3, [r3, #8]
 800110a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalDbgCheck((i2cp != NULL) &&
 800110e:	9b01      	ldr	r3, [sp, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <i2c_lld_set_clock+0x32>
 8001114:	9b03      	ldr	r3, [sp, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	dd03      	ble.n	8001122 <i2c_lld_set_clock+0x32>
 800111a:	9b03      	ldr	r3, [sp, #12]
 800111c:	4a66      	ldr	r2, [pc, #408]	; (80012b8 <i2c_lld_set_clock+0x1c8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	dd02      	ble.n	8001128 <i2c_lld_set_clock+0x38>
 8001122:	4866      	ldr	r0, [pc, #408]	; (80012bc <i2c_lld_set_clock+0x1cc>)
 8001124:	f003 f964 	bl	80043f0 <chSysHalt>
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8001128:	9b04      	ldr	r3, [sp, #16]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001130:	4013      	ands	r3, r2
 8001132:	9a04      	ldr	r2, [sp, #16]
 8001134:	6053      	str	r3, [r2, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8001136:	9b04      	ldr	r3, [sp, #16]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f043 0215 	orr.w	r2, r3, #21
 800113e:	9b04      	ldr	r3, [sp, #16]
 8001140:	605a      	str	r2, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	f8ad 3016 	strh.w	r3, [sp, #22]
  clock_div = I2C_CCR_CCR;
 8001148:	f640 73ff 	movw	r3, #4095	; 0xfff
 800114c:	f8ad 3014 	strh.w	r3, [sp, #20]

  if (clock_speed <= 100000) {
 8001150:	9b03      	ldr	r3, [sp, #12]
 8001152:	4a5b      	ldr	r2, [pc, #364]	; (80012c0 <i2c_lld_set_clock+0x1d0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	dc31      	bgt.n	80011bc <i2c_lld_set_clock+0xcc>
    /* Configure clock_div in standard mode.*/
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8001158:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d002      	beq.n	8001166 <i2c_lld_set_clock+0x76>
 8001160:	4856      	ldr	r0, [pc, #344]	; (80012bc <i2c_lld_set_clock+0x1cc>)
 8001162:	f003 f945 	bl	80043f0 <chSysHalt>

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 8001166:	9b03      	ldr	r3, [sp, #12]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	461a      	mov	r2, r3
 800116c:	4b55      	ldr	r3, [pc, #340]	; (80012c4 <i2c_lld_set_clock+0x1d4>)
 800116e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001172:	fb02 f201 	mul.w	r2, r2, r1
 8001176:	1a9b      	subs	r3, r3, r2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <i2c_lld_set_clock+0x92>
 800117c:	484f      	ldr	r0, [pc, #316]	; (80012bc <i2c_lld_set_clock+0x1cc>)
 800117e:	f003 f937 	bl	80043f0 <chSysHalt>
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	461a      	mov	r2, r3
 8001188:	4b4e      	ldr	r3, [pc, #312]	; (80012c4 <i2c_lld_set_clock+0x1d4>)
 800118a:	fbb3 f3f2 	udiv	r3, r3, r2
 800118e:	f8ad 3014 	strh.w	r3, [sp, #20]

    osalDbgAssert(clock_div >= 0x04,
 8001192:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d802      	bhi.n	80011a0 <i2c_lld_set_clock+0xb0>
 800119a:	4848      	ldr	r0, [pc, #288]	; (80012bc <i2c_lld_set_clock+0x1cc>)
 800119c:	f003 f928 	bl	80043f0 <chSysHalt>
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);
 80011a0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 80011b4:	9b04      	ldr	r3, [sp, #16]
 80011b6:	2216      	movs	r2, #22
 80011b8:	621a      	str	r2, [r3, #32]
 80011ba:	e06e      	b.n	800129a <i2c_lld_set_clock+0x1aa>
  }
  else if (clock_speed <= 400000) {
 80011bc:	9b03      	ldr	r3, [sp, #12]
 80011be:	4a42      	ldr	r2, [pc, #264]	; (80012c8 <i2c_lld_set_clock+0x1d8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	dc6a      	bgt.n	800129a <i2c_lld_set_clock+0x1aa>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 80011c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d006      	beq.n	80011da <i2c_lld_set_clock+0xea>
 80011cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d002      	beq.n	80011da <i2c_lld_set_clock+0xea>
 80011d4:	4839      	ldr	r0, [pc, #228]	; (80012bc <i2c_lld_set_clock+0x1cc>)
 80011d6:	f003 f90b 	bl	80043f0 <chSysHalt>
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 80011da:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d11a      	bne.n	8001218 <i2c_lld_set_clock+0x128>
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 80011e2:	9a03      	ldr	r2, [sp, #12]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <i2c_lld_set_clock+0x1d4>)
 80011ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80011f2:	fb02 f201 	mul.w	r2, r2, r1
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <i2c_lld_set_clock+0x112>
 80011fc:	482f      	ldr	r0, [pc, #188]	; (80012bc <i2c_lld_set_clock+0x1cc>)
 80011fe:	f003 f8f7 	bl	80043f0 <chSysHalt>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8001202:	9a03      	ldr	r2, [sp, #12]
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	461a      	mov	r2, r3
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <i2c_lld_set_clock+0x1d4>)
 800120e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001212:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001216:	e027      	b.n	8001268 <i2c_lld_set_clock+0x178>
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8001218:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d123      	bne.n	8001268 <i2c_lld_set_clock+0x178>
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 8001220:	9a03      	ldr	r2, [sp, #12]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009a      	lsls	r2, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	461a      	mov	r2, r3
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <i2c_lld_set_clock+0x1d4>)
 8001230:	fbb3 f1f2 	udiv	r1, r3, r2
 8001234:	fb02 f201 	mul.w	r2, r2, r1
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <i2c_lld_set_clock+0x154>
 800123e:	481f      	ldr	r0, [pc, #124]	; (80012bc <i2c_lld_set_clock+0x1cc>)
 8001240:	f003 f8d6 	bl	80043f0 <chSysHalt>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8001244:	9a03      	ldr	r2, [sp, #12]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009a      	lsls	r2, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	461a      	mov	r2, r3
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <i2c_lld_set_clock+0x1d4>)
 8001254:	fbb3 f3f2 	udiv	r3, r3, r2
 8001258:	f8ad 3014 	strh.w	r3, [sp, #20]
      regCCR |= I2C_CCR_DUTY;
 800125c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	f8ad 3016 	strh.w	r3, [sp, #22]
    }

    osalDbgAssert(clock_div >= 0x01,
 8001268:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <i2c_lld_set_clock+0x186>
 8001270:	4812      	ldr	r0, [pc, #72]	; (80012bc <i2c_lld_set_clock+0x1cc>)
 8001272:	f003 f8bd 	bl	80043f0 <chSysHalt>
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8001276:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800127a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127e:	b29a      	uxth	r2, r3
 8001280:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001284:	4313      	orrs	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800128c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001290:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8001294:	9b04      	ldr	r3, [sp, #16]
 8001296:	2207      	movs	r2, #7
 8001298:	621a      	str	r2, [r3, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 800129a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800129e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a2:	d302      	bcc.n	80012aa <i2c_lld_set_clock+0x1ba>
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <i2c_lld_set_clock+0x1cc>)
 80012a6:	f003 f8a3 	bl	80043f0 <chSysHalt>

  dp->CCR = regCCR;
 80012aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80012ae:	9b04      	ldr	r3, [sp, #16]
 80012b0:	61da      	str	r2, [r3, #28]
}
 80012b2:	b007      	add	sp, #28
 80012b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b8:	003d0900 	.word	0x003d0900
 80012bc:	08005ef0 	.word	0x08005ef0
 80012c0:	000186a0 	.word	0x000186a0
 80012c4:	01406f40 	.word	0x01406f40
 80012c8:	00061a80 	.word	0x00061a80
 80012cc:	00000000 	.word	0x00000000

080012d0 <i2c_lld_set_opmode>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
 80012d0:	b086      	sub	sp, #24
 80012d2:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 80012d4:	9b01      	ldr	r3, [sp, #4]
 80012d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d8:	9304      	str	r3, [sp, #16]
  i2copmode_t opmode = i2cp->config->op_mode;
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f88d 300f 	strb.w	r3, [sp, #15]
  uint16_t regCR1;

  regCR1 = dp->CR1;
 80012e4:	9b04      	ldr	r3, [sp, #16]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8ad 3016 	strh.w	r3, [sp, #22]
  switch (opmode) {
 80012ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d00a      	beq.n	800130a <i2c_lld_set_opmode+0x3a>
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d015      	beq.n	8001324 <i2c_lld_set_opmode+0x54>
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d119      	bne.n	8001330 <i2c_lld_set_opmode+0x60>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80012fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001300:	f023 030a 	bic.w	r3, r3, #10
 8001304:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001308:	e012      	b.n	8001330 <i2c_lld_set_opmode+0x60>
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
 800130a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	f8ad 3016 	strh.w	r3, [sp, #22]
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8001316:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800131a:	f023 0308 	bic.w	r3, r3, #8
 800131e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001322:	e005      	b.n	8001330 <i2c_lld_set_opmode+0x60>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8001324:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001328:	f043 030a 	orr.w	r3, r3, #10
 800132c:	f8ad 3016 	strh.w	r3, [sp, #22]
    break;
  }
  dp->CR1 = regCR1;
 8001330:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001334:	9b04      	ldr	r3, [sp, #16]
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	b006      	add	sp, #24
 800133a:	4770      	bx	lr
 800133c:	0000      	movs	r0, r0
	...

08001340 <i2c_lld_serve_event_interrupt>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
 8001340:	b500      	push	{lr}
 8001342:	b087      	sub	sp, #28
 8001344:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8001346:	9b01      	ldr	r3, [sp, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	9305      	str	r3, [sp, #20]
  uint32_t regSR2 = dp->SR2;
 800134c:	9b05      	ldr	r3, [sp, #20]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	9304      	str	r3, [sp, #16]
  uint32_t event = dp->SR1;
 8001352:	9b05      	ldr	r3, [sp, #20]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	9303      	str	r3, [sp, #12]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001358:	9b04      	ldr	r3, [sp, #16]
 800135a:	041a      	lsls	r2, r3, #16
 800135c:	9b03      	ldr	r3, [sp, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001364:	4a52      	ldr	r2, [pc, #328]	; (80014b0 <i2c_lld_serve_event_interrupt+0x170>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d031      	beq.n	80013ce <i2c_lld_serve_event_interrupt+0x8e>
 800136a:	4a51      	ldr	r2, [pc, #324]	; (80014b0 <i2c_lld_serve_event_interrupt+0x170>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d806      	bhi.n	800137e <i2c_lld_serve_event_interrupt+0x3e>
 8001370:	4a50      	ldr	r2, [pc, #320]	; (80014b4 <i2c_lld_serve_event_interrupt+0x174>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d00a      	beq.n	800138c <i2c_lld_serve_event_interrupt+0x4c>
 8001376:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <i2c_lld_serve_event_interrupt+0x178>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d030      	beq.n	80013de <i2c_lld_serve_event_interrupt+0x9e>
 800137c:	e08d      	b.n	800149a <i2c_lld_serve_event_interrupt+0x15a>
 800137e:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <i2c_lld_serve_event_interrupt+0x17c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d04f      	beq.n	8001424 <i2c_lld_serve_event_interrupt+0xe4>
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <i2c_lld_serve_event_interrupt+0x180>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d05d      	beq.n	8001446 <i2c_lld_serve_event_interrupt+0x106>
 800138a:	e086      	b.n	800149a <i2c_lld_serve_event_interrupt+0x15a>
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800138c:	9b01      	ldr	r3, [sp, #4]
 800138e:	8c1b      	ldrh	r3, [r3, #32]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d014      	beq.n	80013c2 <i2c_lld_serve_event_interrupt+0x82>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	8c1b      	ldrh	r3, [r3, #32]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b29b      	uxth	r3, r3
 80013a0:	f003 0306 	and.w	r3, r3, #6
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	9b01      	ldr	r3, [sp, #4]
 80013a8:	8c1b      	ldrh	r3, [r3, #32]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	9b05      	ldr	r3, [sp, #20]
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	e06b      	b.n	800149a <i2c_lld_serve_event_interrupt+0x15a>
    } else {
      dp->DR = i2cp->addr;
 80013c2:	9b01      	ldr	r3, [sp, #4]
 80013c4:	8c1b      	ldrh	r3, [r3, #32]
 80013c6:	461a      	mov	r2, r3
 80013c8:	9b05      	ldr	r3, [sp, #20]
 80013ca:	611a      	str	r2, [r3, #16]
 80013cc:	e065      	b.n	800149a <i2c_lld_serve_event_interrupt+0x15a>
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	8c1b      	ldrh	r3, [r3, #32]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	9b05      	ldr	r3, [sp, #20]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	e05d      	b.n	800149a <i2c_lld_serve_event_interrupt+0x15a>
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80013de:	9b05      	ldr	r3, [sp, #20]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80013e6:	9b05      	ldr	r3, [sp, #20]
 80013e8:	605a      	str	r2, [r3, #4]
    dmaStreamEnable(i2cp->dmarx);
 80013ea:	9b01      	ldr	r3, [sp, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	9a01      	ldr	r2, [sp, #4]
 80013f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	f042 0201 	orr.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80013fe:	9b05      	ldr	r3, [sp, #20]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001406:	9b05      	ldr	r3, [sp, #20]
 8001408:	605a      	str	r2, [r3, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800140a:	9b01      	ldr	r3, [sp, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d841      	bhi.n	800149a <i2c_lld_serve_event_interrupt+0x15a>
      dp->CR1 &= ~I2C_CR1_ACK;
 8001416:	9b05      	ldr	r3, [sp, #20]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800141e:	9b05      	ldr	r3, [sp, #20]
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e03a      	b.n	800149a <i2c_lld_serve_event_interrupt+0x15a>
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001424:	9b05      	ldr	r3, [sp, #20]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800142c:	9b05      	ldr	r3, [sp, #20]
 800142e:	605a      	str	r2, [r3, #4]
    dmaStreamEnable(i2cp->dmatx);
 8001430:	9b01      	ldr	r3, [sp, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	9a01      	ldr	r2, [sp, #4]
 8001438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e029      	b.n	800149a <i2c_lld_serve_event_interrupt+0x15a>
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8001446:	9b01      	ldr	r3, [sp, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00d      	beq.n	800146e <i2c_lld_serve_event_interrupt+0x12e>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8001452:	9b01      	ldr	r3, [sp, #4]
 8001454:	8c1b      	ldrh	r3, [r3, #32]
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	9b01      	ldr	r3, [sp, #4]
 800145e:	841a      	strh	r2, [r3, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001460:	9b05      	ldr	r3, [sp, #20]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8001468:	9b05      	ldr	r3, [sp, #20]
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e01c      	b.n	80014a8 <i2c_lld_serve_event_interrupt+0x168>
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800146e:	9b05      	ldr	r3, [sp, #20]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001476:	9b05      	ldr	r3, [sp, #20]
 8001478:	605a      	str	r2, [r3, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800147a:	9b05      	ldr	r3, [sp, #20]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001482:	9b05      	ldr	r3, [sp, #20]
 8001484:	601a      	str	r2, [r3, #0]
    _i2c_wakeup_isr(i2cp);
 8001486:	f001 fb4b 	bl	8002b20 <osalSysLockFromISR.lto_priv.226>
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	331c      	adds	r3, #28
 800148e:	4618      	mov	r0, r3
 8001490:	2100      	movs	r1, #0
 8001492:	f001 fb7d 	bl	8002b90 <osalThreadResumeI.lto_priv.225>
 8001496:	f001 fb4b 	bl	8002b30 <osalSysUnlockFromISR.lto_priv.224>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800149a:	9b03      	ldr	r3, [sp, #12]
 800149c:	f003 030a 	and.w	r3, r3, #10
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <i2c_lld_serve_event_interrupt+0x168>
    (void)dp->SR2;
 80014a4:	9b05      	ldr	r3, [sp, #20]
 80014a6:	699b      	ldr	r3, [r3, #24]
}
 80014a8:	b007      	add	sp, #28
 80014aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ae:	bf00      	nop
 80014b0:	00030008 	.word	0x00030008
 80014b4:	00030001 	.word	0x00030001
 80014b8:	00030002 	.word	0x00030002
 80014bc:	00070082 	.word	0x00070082
 80014c0:	00070084 	.word	0x00070084
	...

080014d0 <i2c_lld_serve_rx_end_irq>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 80014d0:	b500      	push	{lr}
 80014d2:	b085      	sub	sp, #20
 80014d4:	9001      	str	r0, [sp, #4]
 80014d6:	9100      	str	r1, [sp, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 80014d8:	9b01      	ldr	r3, [sp, #4]
 80014da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014dc:	9303      	str	r3, [sp, #12]

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80014de:	9b00      	ldr	r3, [sp, #0]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <i2c_lld_serve_rx_end_irq+0x1e>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 80014e8:	481e      	ldr	r0, [pc, #120]	; (8001564 <i2c_lld_serve_rx_end_irq+0x94>)
 80014ea:	f001 faf9 	bl	8002ae0 <osalSysHalt.lto_priv.227>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	9a01      	ldr	r2, [sp, #4]
 80014f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	f022 021f 	bic.w	r2, r2, #31
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	9b01      	ldr	r3, [sp, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f7      	bne.n	8001502 <i2c_lld_serve_rx_end_irq+0x32>
 8001512:	9b01      	ldr	r3, [sp, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	9a01      	ldr	r2, [sp, #4]
 800151a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800151c:	7a12      	ldrb	r2, [r2, #8]
 800151e:	4611      	mov	r1, r2
 8001520:	223d      	movs	r2, #61	; 0x3d
 8001522:	408a      	lsls	r2, r1
 8001524:	601a      	str	r2, [r3, #0]

  dp->CR2 &= ~I2C_CR2_LAST;
 8001526:	9b03      	ldr	r3, [sp, #12]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800152e:	9b03      	ldr	r3, [sp, #12]
 8001530:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8001532:	9b03      	ldr	r3, [sp, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800153a:	9b03      	ldr	r3, [sp, #12]
 800153c:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800153e:	9b03      	ldr	r3, [sp, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001546:	9b03      	ldr	r3, [sp, #12]
 8001548:	601a      	str	r2, [r3, #0]
  _i2c_wakeup_isr(i2cp);
 800154a:	f001 fae9 	bl	8002b20 <osalSysLockFromISR.lto_priv.226>
 800154e:	9b01      	ldr	r3, [sp, #4]
 8001550:	331c      	adds	r3, #28
 8001552:	4618      	mov	r0, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f001 fb1b 	bl	8002b90 <osalThreadResumeI.lto_priv.225>
 800155a:	f001 fae9 	bl	8002b30 <osalSysUnlockFromISR.lto_priv.224>
}
 800155e:	b005      	add	sp, #20
 8001560:	f85d fb04 	ldr.w	pc, [sp], #4
 8001564:	08005a30 	.word	0x08005a30
	...

08001570 <i2c_lld_serve_tx_end_irq>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001570:	b500      	push	{lr}
 8001572:	b085      	sub	sp, #20
 8001574:	9001      	str	r0, [sp, #4]
 8001576:	9100      	str	r1, [sp, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	9303      	str	r3, [sp, #12]

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800157e:	9b00      	ldr	r3, [sp, #0]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <i2c_lld_serve_tx_end_irq+0x1e>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <i2c_lld_serve_tx_end_irq+0x68>)
 800158a:	f001 faa9 	bl	8002ae0 <osalSysHalt.lto_priv.227>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 800158e:	9b01      	ldr	r3, [sp, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	9a01      	ldr	r2, [sp, #4]
 8001596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	f022 021f 	bic.w	r2, r2, #31
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	9b01      	ldr	r3, [sp, #4]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f7      	bne.n	80015a2 <i2c_lld_serve_tx_end_irq+0x32>
 80015b2:	9b01      	ldr	r3, [sp, #4]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	9a01      	ldr	r2, [sp, #4]
 80015ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015bc:	7a12      	ldrb	r2, [r2, #8]
 80015be:	4611      	mov	r1, r2
 80015c0:	223d      	movs	r2, #61	; 0x3d
 80015c2:	408a      	lsls	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80015c6:	9b03      	ldr	r3, [sp, #12]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015ce:	9b03      	ldr	r3, [sp, #12]
 80015d0:	605a      	str	r2, [r3, #4]
}
 80015d2:	b005      	add	sp, #20
 80015d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80015d8:	08005a30 	.word	0x08005a30
 80015dc:	00000000 	.word	0x00000000

080015e0 <i2c_lld_serve_error_interrupt>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in]  sr       content of the SR1 register to be decoded
 *
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {
 80015e0:	b500      	push	{lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	9001      	str	r0, [sp, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	f8ad 3002 	strh.w	r3, [sp, #2]

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80015ec:	9b01      	ldr	r3, [sp, #4]
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	9a01      	ldr	r2, [sp, #4]
 80015f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	f022 021f 	bic.w	r2, r2, #31
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	9b01      	ldr	r3, [sp, #4]
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f7      	bne.n	8001600 <i2c_lld_serve_error_interrupt+0x20>
 8001610:	9b01      	ldr	r3, [sp, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	9a01      	ldr	r2, [sp, #4]
 8001618:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800161a:	7a12      	ldrb	r2, [r2, #8]
 800161c:	4611      	mov	r1, r2
 800161e:	223d      	movs	r2, #61	; 0x3d
 8001620:	408a      	lsls	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(i2cp->dmarx);
 8001624:	9b01      	ldr	r3, [sp, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	9a01      	ldr	r2, [sp, #4]
 800162c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	f022 021f 	bic.w	r2, r2, #31
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	9b01      	ldr	r3, [sp, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f7      	bne.n	8001638 <i2c_lld_serve_error_interrupt+0x58>
 8001648:	9b01      	ldr	r3, [sp, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	9a01      	ldr	r2, [sp, #4]
 8001650:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001652:	7a12      	ldrb	r2, [r2, #8]
 8001654:	4611      	mov	r1, r2
 8001656:	223d      	movs	r2, #61	; 0x3d
 8001658:	408a      	lsls	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

  i2cp->errors = I2C_NO_ERROR;
 800165c:	9b01      	ldr	r3, [sp, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8001662:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <i2c_lld_serve_error_interrupt+0x9a>
    i2cp->errors |= I2C_BUS_ERROR;
 800166e:	9b01      	ldr	r3, [sp, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	9b01      	ldr	r3, [sp, #4]
 8001678:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800167a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800167e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <i2c_lld_serve_error_interrupt+0xb2>
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8001686:	9b01      	ldr	r3, [sp, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f043 0202 	orr.w	r2, r3, #2
 800168e:	9b01      	ldr	r3, [sp, #4]
 8001690:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8001692:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	2b00      	cmp	r3, #0
 800169c:	d015      	beq.n	80016ca <i2c_lld_serve_error_interrupt+0xea>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800169e:	9b01      	ldr	r3, [sp, #4]
 80016a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a2:	9a01      	ldr	r2, [sp, #4]
 80016a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016a6:	6852      	ldr	r2, [r2, #4]
 80016a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016ac:	605a      	str	r2, [r3, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b2:	9a01      	ldr	r2, [sp, #4]
 80016b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016bc:	601a      	str	r2, [r3, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80016be:	9b01      	ldr	r3, [sp, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f043 0204 	orr.w	r2, r3, #4
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	609a      	str	r2, [r3, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80016ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80016ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <i2c_lld_serve_error_interrupt+0x102>
    i2cp->errors |= I2C_OVERRUN;
 80016d6:	9b01      	ldr	r3, [sp, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f043 0208 	orr.w	r2, r3, #8
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80016e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <i2c_lld_serve_error_interrupt+0x11a>
    i2cp->errors |= I2C_TIMEOUT;
 80016ee:	9b01      	ldr	r3, [sp, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f043 0220 	orr.w	r2, r3, #32
 80016f6:	9b01      	ldr	r3, [sp, #4]
 80016f8:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80016fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80016fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <i2c_lld_serve_error_interrupt+0x132>
    i2cp->errors |= I2C_PEC_ERROR;
 8001706:	9b01      	ldr	r3, [sp, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	9b01      	ldr	r3, [sp, #4]
 8001710:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001712:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001716:	b21b      	sxth	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	da05      	bge.n	8001728 <i2c_lld_serve_error_interrupt+0x148>
    i2cp->errors |= I2C_SMB_ALERT;
 800171c:	9b01      	ldr	r3, [sp, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	609a      	str	r2, [r3, #8]

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 8001728:	9b01      	ldr	r3, [sp, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00a      	beq.n	8001746 <i2c_lld_serve_error_interrupt+0x166>
    _i2c_wakeup_error_isr(i2cp);
 8001730:	f001 f9f6 	bl	8002b20 <osalSysLockFromISR.lto_priv.226>
 8001734:	9b01      	ldr	r3, [sp, #4]
 8001736:	331c      	adds	r3, #28
 8001738:	4618      	mov	r0, r3
 800173a:	f06f 0101 	mvn.w	r1, #1
 800173e:	f001 fa27 	bl	8002b90 <osalThreadResumeI.lto_priv.225>
 8001742:	f001 f9f5 	bl	8002b30 <osalSysUnlockFromISR.lto_priv.224>
}
 8001746:	b003      	add	sp, #12
 8001748:	f85d fb04 	ldr.w	pc, [sp], #4
 800174c:	0000      	movs	r0, r0
	...

08001750 <VectorBC>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8001750:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001752:	f003 fded 	bl	8005330 <_stats_increase_irq>
 8001756:	f002 ff13 	bl	8004580 <_dbg_check_enter_isr>

  i2c_lld_serve_event_interrupt(&I2CD1);
 800175a:	4804      	ldr	r0, [pc, #16]	; (800176c <VectorBC+0x1c>)
 800175c:	f7ff fdf0 	bl	8001340 <i2c_lld_serve_event_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001760:	f002 ff2e 	bl	80045c0 <_dbg_check_leave_isr>
 8001764:	f002 fbc4 	bl	8003ef0 <_port_irq_epilogue>
}
 8001768:	bd08      	pop	{r3, pc}
 800176a:	bf00      	nop
 800176c:	200009c0 	.word	0x200009c0

08001770 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8001770:	b500      	push	{lr}
 8001772:	b083      	sub	sp, #12
  uint16_t sr = I2CD1.i2c->SR1;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <VectorC0+0x40>)
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f8ad 3006 	strh.w	r3, [sp, #6]

  OSAL_IRQ_PROLOGUE();
 800177e:	f003 fdd7 	bl	8005330 <_stats_increase_irq>
 8001782:	f002 fefd 	bl	8004580 <_dbg_check_enter_isr>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <VectorC0+0x40>)
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800178e:	f402 425f 	and.w	r2, r2, #57088	; 0xdf00
 8001792:	43d2      	mvns	r2, r2
 8001794:	615a      	str	r2, [r3, #20]
  i2c_lld_serve_error_interrupt(&I2CD1, sr);
 8001796:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <VectorC0+0x40>)
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff ff1f 	bl	80015e0 <i2c_lld_serve_error_interrupt>

  OSAL_IRQ_EPILOGUE();
 80017a2:	f002 ff0d 	bl	80045c0 <_dbg_check_leave_isr>
 80017a6:	f002 fba3 	bl	8003ef0 <_port_irq_epilogue>
}
 80017aa:	b003      	add	sp, #12
 80017ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80017b0:	200009c0 	.word	0x200009c0
	...

080017c0 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 80017c0:	b508      	push	{r3, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 80017c2:	4808      	ldr	r0, [pc, #32]	; (80017e4 <i2c_lld_init+0x24>)
 80017c4:	f001 f9fc 	bl	8002bc0 <i2cObjectInit>
  I2CD1.thread = NULL;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <i2c_lld_init+0x24>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  I2CD1.i2c    = I2C1;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <i2c_lld_init+0x24>)
 80017d0:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <i2c_lld_init+0x28>)
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <i2c_lld_init+0x24>)
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <i2c_lld_init+0x2c>)
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80017da:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <i2c_lld_init+0x24>)
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <i2c_lld_init+0x30>)
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
  I2CD3.thread = NULL;
  I2CD3.i2c    = I2C3;
  I2CD3.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C3_RX_DMA_STREAM);
  I2CD3.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C3_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C3 */
}
 80017e0:	bd08      	pop	{r3, pc}
 80017e2:	bf00      	nop
 80017e4:	200009c0 	.word	0x200009c0
 80017e8:	40005400 	.word	0x40005400
 80017ec:	08005e10 	.word	0x08005e10
 80017f0:	08005e58 	.word	0x08005e58
	...

08001800 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8001800:	b500      	push	{lr}
 8001802:	b085      	sub	sp, #20
 8001804:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8001806:	9b01      	ldr	r3, [sp, #4]
 8001808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180a:	9303      	str	r3, [sp, #12]

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800180c:	9b01      	ldr	r3, [sp, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d156      	bne.n	80018c2 <i2c_lld_start+0xc2>

    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8001814:	9b01      	ldr	r3, [sp, #4]
 8001816:	f240 4256 	movw	r2, #1110	; 0x456
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_M2P;
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	f240 4216 	movw	r2, #1046	; 0x416
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_P2M;

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 8001824:	9b01      	ldr	r3, [sp, #4]
 8001826:	4a3a      	ldr	r2, [pc, #232]	; (8001910 <i2c_lld_start+0x110>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d14a      	bne.n	80018c2 <i2c_lld_start+0xc2>
      bool b;

      rccResetI2C1();
 800182c:	4a39      	ldr	r2, [pc, #228]	; (8001914 <i2c_lld_start+0x114>)
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <i2c_lld_start+0x114>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <i2c_lld_start+0x114>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 800183e:	9b01      	ldr	r3, [sp, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	4618      	mov	r0, r3
 8001844:	2105      	movs	r1, #5
 8001846:	4a34      	ldr	r2, [pc, #208]	; (8001918 <i2c_lld_start+0x118>)
 8001848:	9b01      	ldr	r3, [sp, #4]
 800184a:	f000 fe79 	bl	8002540 <dmaStreamAllocate>
 800184e:	4603      	mov	r3, r0
 8001850:	f88d 300b 	strb.w	r3, [sp, #11]
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 8001854:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <i2c_lld_start+0x62>
 800185c:	482f      	ldr	r0, [pc, #188]	; (800191c <i2c_lld_start+0x11c>)
 800185e:	f002 fdc7 	bl	80043f0 <chSysHalt>
      b = dmaStreamAllocate(i2cp->dmatx,
 8001862:	9b01      	ldr	r3, [sp, #4]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4618      	mov	r0, r3
 8001868:	2105      	movs	r1, #5
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <i2c_lld_start+0x120>)
 800186c:	9b01      	ldr	r3, [sp, #4]
 800186e:	f000 fe67 	bl	8002540 <dmaStreamAllocate>
 8001872:	4603      	mov	r3, r0
 8001874:	f88d 300b 	strb.w	r3, [sp, #11]
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 8001878:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <i2c_lld_start+0x86>
 8001880:	4826      	ldr	r0, [pc, #152]	; (800191c <i2c_lld_start+0x11c>)
 8001882:	f002 fdb5 	bl	80043f0 <chSysHalt>
      rccEnableI2C1(FALSE);
 8001886:	4a23      	ldr	r2, [pc, #140]	; (8001914 <i2c_lld_start+0x114>)
 8001888:	4b22      	ldr	r3, [pc, #136]	; (8001914 <i2c_lld_start+0x114>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8001892:	201f      	movs	r0, #31
 8001894:	2105      	movs	r1, #5
 8001896:	f002 f823 	bl	80038e0 <nvicEnableVector>
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 800189a:	2020      	movs	r0, #32
 800189c:	2105      	movs	r1, #5
 800189e:	f002 f81f 	bl	80038e0 <nvicEnableVector>

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80018a2:	9b01      	ldr	r3, [sp, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018aa:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80018ae:	9a01      	ldr	r2, [sp, #4]
 80018b0:	6253      	str	r3, [r2, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ba:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80018be:	9a01      	ldr	r2, [sp, #4]
 80018c0:	6293      	str	r3, [r2, #40]	; 0x28
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80018c2:	9b01      	ldr	r3, [sp, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	9a03      	ldr	r2, [sp, #12]
 80018ca:	3210      	adds	r2, #16
 80018cc:	609a      	str	r2, [r3, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80018ce:	9b01      	ldr	r3, [sp, #4]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	9a03      	ldr	r2, [sp, #12]
 80018d6:	3210      	adds	r2, #16
 80018d8:	609a      	str	r2, [r3, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 80018da:	9b03      	ldr	r3, [sp, #12]
 80018dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018e0:	601a      	str	r2, [r3, #0]
  dp->CR1 = 0;
 80018e2:	9b03      	ldr	r3, [sp, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80018e8:	9b03      	ldr	r3, [sp, #12]
 80018ea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80018ee:	605a      	str	r2, [r3, #4]

  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
 80018f0:	9801      	ldr	r0, [sp, #4]
 80018f2:	f7ff fbfd 	bl	80010f0 <i2c_lld_set_clock>
  i2c_lld_set_opmode(i2cp);
 80018f6:	9801      	ldr	r0, [sp, #4]
 80018f8:	f7ff fcea 	bl	80012d0 <i2c_lld_set_opmode>

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 80018fc:	9b03      	ldr	r3, [sp, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	9b03      	ldr	r3, [sp, #12]
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	b005      	add	sp, #20
 800190a:	f85d fb04 	ldr.w	pc, [sp], #4
 800190e:	bf00      	nop
 8001910:	200009c0 	.word	0x200009c0
 8001914:	40023800 	.word	0x40023800
 8001918:	080014d1 	.word	0x080014d1
 800191c:	08005f10 	.word	0x08005f10
 8001920:	08001571 	.word	0x08001571
	...

08001930 <i2c_lld_master_receive_timeout>:
 *
 * @notapi
 */
msg_t i2c_lld_master_receive_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                     uint8_t *rxbuf, size_t rxbytes,
                                     systime_t timeout) {
 8001930:	b500      	push	{lr}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	9003      	str	r0, [sp, #12]
 8001936:	9201      	str	r2, [sp, #4]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	460b      	mov	r3, r1
 800193c:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_TypeDef *dp = i2cp->i2c;
 8001940:	9b03      	ldr	r3, [sp, #12]
 8001942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001944:	9307      	str	r3, [sp, #28]
#if defined(STM32F1XX_I2C)
  osalDbgCheck(rxbytes > 1);
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8001946:	9b03      	ldr	r3, [sp, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]

  /* Initializes driver fields, LSB = 1 -> receive.*/
  i2cp->addr = (addr << 1) | 0x01;
 800194c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b29b      	uxth	r3, r3
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	b29b      	uxth	r3, r3
 800195a:	b29a      	uxth	r2, r3
 800195c:	9b03      	ldr	r3, [sp, #12]
 800195e:	841a      	strh	r2, [r3, #32]

  /* Releases the lock from high level driver.*/
  osalSysUnlock();
 8001960:	f001 f8d6 	bl	8002b10 <osalSysUnlock.lto_priv.215>

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8001964:	9b03      	ldr	r3, [sp, #12]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	9a03      	ldr	r2, [sp, #12]
 800196c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800196e:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8001970:	9b03      	ldr	r3, [sp, #12]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	9a01      	ldr	r2, [sp, #4]
 8001978:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 800197a:	9b03      	ldr	r3, [sp, #12]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	9a00      	ldr	r2, [sp, #0]
 8001982:	605a      	str	r2, [r3, #4]

  /* Calculating the time window for the timeout on the busy bus condition.*/
  start = osalOsGetSystemTimeX();
 8001984:	f001 f8dc 	bl	8002b40 <osalOsGetSystemTimeX.lto_priv.222>
 8001988:	9006      	str	r0, [sp, #24]
  end = start + OSAL_MS2ST(STM32_I2C_BUSY_TIMEOUT);
 800198a:	9b06      	ldr	r3, [sp, #24]
 800198c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001990:	9305      	str	r3, [sp, #20]

  /* Waits until BUSY flag is reset or, alternatively, for a timeout
     condition.*/
  while (true) {
    osalSysLock();
 8001992:	f001 f8b5 	bl	8002b00 <osalSysLock.lto_priv.217>

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8001996:	9b07      	ldr	r3, [sp, #28]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <i2c_lld_master_receive_timeout+0x7e>
 80019a2:	9b07      	ldr	r3, [sp, #28]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d013      	beq.n	80019d6 <i2c_lld_master_receive_timeout+0xa6>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 80019ae:	f001 f8c7 	bl	8002b40 <osalOsGetSystemTimeX.lto_priv.222>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4618      	mov	r0, r3
 80019b6:	9906      	ldr	r1, [sp, #24]
 80019b8:	9a05      	ldr	r2, [sp, #20]
 80019ba:	f001 f8c9 	bl	8002b50 <osalOsIsTimeWithinX.lto_priv.221>
 80019be:	4603      	mov	r3, r0
 80019c0:	f083 0301 	eor.w	r3, r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <i2c_lld_master_receive_timeout+0xa0>
      return MSG_TIMEOUT;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ce:	e015      	b.n	80019fc <i2c_lld_master_receive_timeout+0xcc>

    osalSysUnlock();
 80019d0:	f001 f89e 	bl	8002b10 <osalSysUnlock.lto_priv.215>
 80019d4:	e7dd      	b.n	8001992 <i2c_lld_master_receive_timeout+0x62>
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80019d6:	9b07      	ldr	r3, [sp, #28]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019de:	9b07      	ldr	r3, [sp, #28]
 80019e0:	605a      	str	r2, [r3, #4]
  dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80019e2:	9b07      	ldr	r3, [sp, #28]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 80019ea:	9b07      	ldr	r3, [sp, #28]
 80019ec:	601a      	str	r2, [r3, #0]

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
 80019ee:	9b03      	ldr	r3, [sp, #12]
 80019f0:	331c      	adds	r3, #28
 80019f2:	4618      	mov	r0, r3
 80019f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80019f6:	f001 f8bb 	bl	8002b70 <osalThreadSuspendTimeoutS.lto_priv.220>
 80019fa:	4603      	mov	r3, r0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	b009      	add	sp, #36	; 0x24
 8001a00:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001a10 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 8001a10:	b500      	push	{lr}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	9003      	str	r0, [sp, #12]
 8001a16:	9201      	str	r2, [sp, #4]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_TypeDef *dp = i2cp->i2c;
 8001a20:	9b03      	ldr	r3, [sp, #12]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	9307      	str	r3, [sp, #28]
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8001a26:	9b03      	ldr	r3, [sp, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8001a2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	9b03      	ldr	r3, [sp, #12]
 8001a36:	841a      	strh	r2, [r3, #32]

  /* Releases the lock from high level driver.*/
  osalSysUnlock();
 8001a38:	f001 f86a 	bl	8002b10 <osalSysUnlock.lto_priv.215>

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8001a3c:	9b03      	ldr	r3, [sp, #12]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	9a03      	ldr	r2, [sp, #12]
 8001a44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a46:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8001a48:	9b03      	ldr	r3, [sp, #12]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	9a01      	ldr	r2, [sp, #4]
 8001a50:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8001a52:	9b03      	ldr	r3, [sp, #12]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	9a00      	ldr	r2, [sp, #0]
 8001a5a:	605a      	str	r2, [r3, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8001a5c:	9b03      	ldr	r3, [sp, #12]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	9a03      	ldr	r2, [sp, #12]
 8001a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a66:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8001a68:	9b03      	ldr	r3, [sp, #12]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a70:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8001a72:	9b03      	ldr	r3, [sp, #12]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001a7a:	605a      	str	r2, [r3, #4]

  /* Calculating the time window for the timeout on the busy bus condition.*/
  start = osalOsGetSystemTimeX();
 8001a7c:	f001 f860 	bl	8002b40 <osalOsGetSystemTimeX.lto_priv.222>
 8001a80:	9006      	str	r0, [sp, #24]
  end = start + OSAL_MS2ST(STM32_I2C_BUSY_TIMEOUT);
 8001a82:	9b06      	ldr	r3, [sp, #24]
 8001a84:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a88:	9305      	str	r3, [sp, #20]

  /* Waits until BUSY flag is reset or, alternatively, for a timeout
     condition.*/
  while (true) {
    osalSysLock();
 8001a8a:	f001 f839 	bl	8002b00 <osalSysLock.lto_priv.217>

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8001a8e:	9b07      	ldr	r3, [sp, #28]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <i2c_lld_master_transmit_timeout+0x96>
 8001a9a:	9b07      	ldr	r3, [sp, #28]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d013      	beq.n	8001ace <i2c_lld_master_transmit_timeout+0xbe>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 8001aa6:	f001 f84b 	bl	8002b40 <osalOsGetSystemTimeX.lto_priv.222>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4618      	mov	r0, r3
 8001aae:	9906      	ldr	r1, [sp, #24]
 8001ab0:	9a05      	ldr	r2, [sp, #20]
 8001ab2:	f001 f84d 	bl	8002b50 <osalOsIsTimeWithinX.lto_priv.221>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f083 0301 	eor.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <i2c_lld_master_transmit_timeout+0xb8>
      return MSG_TIMEOUT;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac6:	e015      	b.n	8001af4 <i2c_lld_master_transmit_timeout+0xe4>

    osalSysUnlock();
 8001ac8:	f001 f822 	bl	8002b10 <osalSysUnlock.lto_priv.215>
 8001acc:	e7dd      	b.n	8001a8a <i2c_lld_master_transmit_timeout+0x7a>
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001ace:	9b07      	ldr	r3, [sp, #28]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad6:	9b07      	ldr	r3, [sp, #28]
 8001ad8:	605a      	str	r2, [r3, #4]
  dp->CR1 |= I2C_CR1_START;
 8001ada:	9b07      	ldr	r3, [sp, #28]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ae2:	9b07      	ldr	r3, [sp, #28]
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
 8001ae6:	9b03      	ldr	r3, [sp, #12]
 8001ae8:	331c      	adds	r3, #28
 8001aea:	4618      	mov	r0, r3
 8001aec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001aee:	f001 f83f 	bl	8002b70 <osalThreadSuspendTimeoutS.lto_priv.220>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	b009      	add	sp, #36	; 0x24
 8001af8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001afc:	0000      	movs	r0, r0
	...

08001b00 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8001b00:	b082      	sub	sp, #8
 8001b02:	2320      	movs	r3, #32
 8001b04:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001b06:	9b01      	ldr	r3, [sp, #4]
 8001b08:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8001b0c:	b002      	add	sp, #8
 8001b0e:	4770      	bx	lr

08001b10 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8001b10:	b082      	sub	sp, #8
 8001b12:	2300      	movs	r3, #0
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	9b01      	ldr	r3, [sp, #4]
 8001b18:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8001b1c:	b002      	add	sp, #8
 8001b1e:	4770      	bx	lr

08001b20 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8001b20:	b508      	push	{r3, lr}

  port_lock();
 8001b22:	f7ff ffed 	bl	8001b00 <port_lock>
}
 8001b26:	bd08      	pop	{r3, pc}
	...

08001b30 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8001b30:	b508      	push	{r3, lr}

  port_unlock();
 8001b32:	f7ff ffed 	bl	8001b10 <port_unlock>
}
 8001b36:	bd08      	pop	{r3, pc}
	...

08001b40 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8001b40:	b508      	push	{r3, lr}

  port_lock();
 8001b42:	f7ff ffdd 	bl	8001b00 <port_lock>
  _stats_start_measure_crit_thd();
 8001b46:	f003 fc23 	bl	8005390 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001b4a:	f002 fcb9 	bl	80044c0 <_dbg_check_lock>
}
 8001b4e:	bd08      	pop	{r3, pc}

08001b50 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8001b50:	b508      	push	{r3, lr}

  _dbg_check_unlock();
 8001b52:	f002 fccd 	bl	80044f0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001b56:	f003 fc23 	bl	80053a0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <chSysUnlock+0x30>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <chSysUnlock+0x30>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d00a      	beq.n	8001b7a <chSysUnlock+0x2a>
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <chSysUnlock+0x30>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <chSysUnlock+0x30>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d202      	bcs.n	8001b7a <chSysUnlock+0x2a>
 8001b74:	4803      	ldr	r0, [pc, #12]	; (8001b84 <chSysUnlock+0x34>)
 8001b76:	f002 fc3b 	bl	80043f0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  port_unlock();
 8001b7a:	f7ff ffc9 	bl	8001b10 <port_unlock>
}
 8001b7e:	bd08      	pop	{r3, pc}
 8001b80:	20000800 	.word	0x20000800
 8001b84:	08005f50 	.word	0x08005f50
	...

08001b90 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8001b90:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8001b92:	f7ff ffc5 	bl	8001b20 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 8001b96:	f003 fc0b 	bl	80053b0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001b9a:	f002 fcc1 	bl	8004520 <_dbg_check_lock_from_isr>
}
 8001b9e:	bd08      	pop	{r3, pc}

08001ba0 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8001ba0:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
 8001ba2:	f002 fcd5 	bl	8004550 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001ba6:	f003 fc0b 	bl	80053c0 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 8001baa:	f7ff ffc1 	bl	8001b30 <port_unlock_from_isr>
}
 8001bae:	bd08      	pop	{r3, pc}

08001bb0 <osalSysLock.lto_priv.218>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8001bb0:	b508      	push	{r3, lr}

  chSysLock();
 8001bb2:	f7ff ffc5 	bl	8001b40 <chSysLock>
}
 8001bb6:	bd08      	pop	{r3, pc}
	...

08001bc0 <osalSysUnlock.lto_priv.216>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8001bc0:	b508      	push	{r3, lr}

  chSysUnlock();
 8001bc2:	f7ff ffc5 	bl	8001b50 <chSysUnlock>
}
 8001bc6:	bd08      	pop	{r3, pc}
	...

08001bd0 <osalSysLockFromISR.lto_priv.213>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8001bd0:	b508      	push	{r3, lr}

  chSysLockFromISR();
 8001bd2:	f7ff ffdd 	bl	8001b90 <chSysLockFromISR>
}
 8001bd6:	bd08      	pop	{r3, pc}
	...

08001be0 <osalSysUnlockFromISR.lto_priv.211>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8001be0:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 8001be2:	f7ff ffdd 	bl	8001ba0 <chSysUnlockFromISR>
}
 8001be6:	bd08      	pop	{r3, pc}
	...

08001bf0 <osalThreadSleep.lto_priv.210>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
static inline void osalThreadSleep(systime_t time) {
 8001bf0:	b500      	push	{lr}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	9001      	str	r0, [sp, #4]

  chThdSleep(time);
 8001bf6:	9801      	ldr	r0, [sp, #4]
 8001bf8:	f003 f9da 	bl	8004fb0 <chThdSleep>
}
 8001bfc:	b003      	add	sp, #12
 8001bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c02:	bf00      	nop
	...

08001c10 <osalThreadSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 8001c10:	b500      	push	{lr}
 8001c12:	b083      	sub	sp, #12
 8001c14:	9001      	str	r0, [sp, #4]

  return chThdSuspendS(trp);
 8001c16:	9801      	ldr	r0, [sp, #4]
 8001c18:	f003 fa2a 	bl	8005070 <chThdSuspendS>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	b003      	add	sp, #12
 8001c22:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c26:	bf00      	nop
	...

08001c30 <osalThreadResumeI.lto_priv.212>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8001c30:	b500      	push	{lr}
 8001c32:	b083      	sub	sp, #12
 8001c34:	9001      	str	r0, [sp, #4]
 8001c36:	9100      	str	r1, [sp, #0]

  chThdResumeI(trp, msg);
 8001c38:	9801      	ldr	r0, [sp, #4]
 8001c3a:	9900      	ldr	r1, [sp, #0]
 8001c3c:	f003 fa60 	bl	8005100 <chThdResumeI>
}
 8001c40:	b003      	add	sp, #12
 8001c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c46:	bf00      	nop
	...

08001c50 <sdc_lld_prepare_read_bytes.lto_priv.208>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_lld_prepare_read_bytes(SDCDriver *sdcp,
                                       uint8_t *buf, uint32_t bytes) {
 8001c50:	b500      	push	{lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	9003      	str	r0, [sp, #12]
 8001c56:	9102      	str	r1, [sp, #8]
 8001c58:	9201      	str	r2, [sp, #4]
  osalDbgCheck(bytes < 0x1000000);
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d302      	bcc.n	8001c68 <sdc_lld_prepare_read_bytes.lto_priv.208+0x18>
 8001c62:	4820      	ldr	r0, [pc, #128]	; (8001ce4 <sdc_lld_prepare_read_bytes.lto_priv.208+0x94>)
 8001c64:	f002 fbc4 	bl	80043f0 <chSysHalt>

  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8001c68:	9b03      	ldr	r3, [sp, #12]
 8001c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <sdc_lld_prepare_read_bytes.lto_priv.208+0x98>)
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for reading.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 8001c70:	9803      	ldr	r0, [sp, #12]
 8001c72:	f001 fbe5 	bl	8003440 <_sdc_wait_for_transfer_state>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <sdc_lld_prepare_read_bytes.lto_priv.208+0x30>
    return HAL_FAILED;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e02c      	b.n	8001cda <sdc_lld_prepare_read_bytes.lto_priv.208+0x8a>

  /* Prepares the DMA channel for writing.*/
  dmaStreamSetMemory0(sdcp->dma, buf);
 8001c80:	9b03      	ldr	r3, [sp, #12]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	9a02      	ldr	r2, [sp, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma, bytes / sizeof (uint32_t));
 8001c8a:	9b03      	ldr	r3, [sp, #12]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	9a01      	ldr	r2, [sp, #4]
 8001c92:	0892      	lsrs	r2, r2, #2
 8001c94:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8001c96:	9b03      	ldr	r3, [sp, #12]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	9a03      	ldr	r2, [sp, #12]
 8001c9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ca0:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8001ca2:	9b03      	ldr	r3, [sp, #12]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	9a03      	ldr	r2, [sp, #12]
 8001caa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8001cb6:	9b03      	ldr	r3, [sp, #12]
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <sdc_lld_prepare_read_bytes.lto_priv.208+0x9c>)
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8001cbe:	9b03      	ldr	r3, [sp, #12]
 8001cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc2:	f240 322a 	movw	r2, #810	; 0x32a
 8001cc6:	63da      	str	r2, [r3, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_RXOVERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = bytes;
 8001cc8:	9b03      	ldr	r3, [sp, #12]
 8001cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ccc:	9a01      	ldr	r2, [sp, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8001cd0:	9b03      	ldr	r3, [sp, #12]
 8001cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
                      SDIO_DCTRL_DTMODE |   /* multibyte data transfer */
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  return HAL_SUCCESS;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	b005      	add	sp, #20
 8001cde:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ce2:	bf00      	nop
 8001ce4:	08005f30 	.word	0x08005f30
 8001ce8:	000927c0 	.word	0x000927c0
 8001cec:	00c007ff 	.word	0x00c007ff

08001cf0 <sdc_lld_prepare_read.lto_priv.207>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_lld_prepare_read(SDCDriver *sdcp, uint32_t startblk,
                                 uint32_t n, uint32_t *resp) {
 8001cf0:	b500      	push	{lr}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	9003      	str	r0, [sp, #12]
 8001cf6:	9102      	str	r1, [sp, #8]
 8001cf8:	9201      	str	r2, [sp, #4]
 8001cfa:	9300      	str	r3, [sp, #0]

  /* Driver handles data in 512 bytes blocks (just like HC cards). But if we
     have not HC card than we must convert address from blocks to bytes.*/
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8001cfc:	9b03      	ldr	r3, [sp, #12]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <sdc_lld_prepare_read.lto_priv.207+0x1e>
    startblk *= MMCSD_BLOCK_SIZE;
 8001d08:	9b02      	ldr	r3, [sp, #8]
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	9302      	str	r3, [sp, #8]

  if (n > 1) {
 8001d0e:	9b01      	ldr	r3, [sp, #4]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d910      	bls.n	8001d36 <sdc_lld_prepare_read.lto_priv.207+0x46>
    /* Send read multiple blocks command to card.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_MULTIPLE_BLOCK,
 8001d14:	9803      	ldr	r0, [sp, #12]
 8001d16:	2112      	movs	r1, #18
 8001d18:	9a02      	ldr	r2, [sp, #8]
 8001d1a:	9b00      	ldr	r3, [sp, #0]
 8001d1c:	f7fe ff90 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <sdc_lld_prepare_read.lto_priv.207+0x42>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001d26:	9b00      	ldr	r3, [sp, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <sdc_lld_prepare_read.lto_priv.207+0x74>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <sdc_lld_prepare_read.lto_priv.207+0x68>
      return HAL_FAILED;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e011      	b.n	8001d5a <sdc_lld_prepare_read.lto_priv.207+0x6a>
  }
  else {
    /* Send read single block command.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_SINGLE_BLOCK,
 8001d36:	9803      	ldr	r0, [sp, #12]
 8001d38:	2111      	movs	r1, #17
 8001d3a:	9a02      	ldr	r2, [sp, #8]
 8001d3c:	9b00      	ldr	r3, [sp, #0]
 8001d3e:	f7fe ff7f 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <sdc_lld_prepare_read.lto_priv.207+0x64>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001d48:	9b00      	ldr	r3, [sp, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <sdc_lld_prepare_read.lto_priv.207+0x74>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <sdc_lld_prepare_read.lto_priv.207+0x68>
      return HAL_FAILED;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <sdc_lld_prepare_read.lto_priv.207+0x6a>
  }

  return HAL_SUCCESS;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	b005      	add	sp, #20
 8001d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d62:	bf00      	nop
 8001d64:	fdffe008 	.word	0xfdffe008
	...

08001d70 <sdc_lld_prepare_write.lto_priv.206>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_lld_prepare_write(SDCDriver *sdcp, uint32_t startblk,
                                  uint32_t n, uint32_t *resp) {
 8001d70:	b500      	push	{lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	9003      	str	r0, [sp, #12]
 8001d76:	9102      	str	r1, [sp, #8]
 8001d78:	9201      	str	r2, [sp, #4]
 8001d7a:	9300      	str	r3, [sp, #0]

  /* Driver handles data in 512 bytes blocks (just like HC cards). But if we
     have not HC card than we must convert address from blocks to bytes.*/
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8001d7c:	9b03      	ldr	r3, [sp, #12]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <sdc_lld_prepare_write.lto_priv.206+0x1e>
    startblk *= MMCSD_BLOCK_SIZE;
 8001d88:	9b02      	ldr	r3, [sp, #8]
 8001d8a:	025b      	lsls	r3, r3, #9
 8001d8c:	9302      	str	r3, [sp, #8]

  if (n > 1) {
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d910      	bls.n	8001db6 <sdc_lld_prepare_write.lto_priv.206+0x46>
    /* Write multiple blocks command.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 8001d94:	9803      	ldr	r0, [sp, #12]
 8001d96:	2119      	movs	r1, #25
 8001d98:	9a02      	ldr	r2, [sp, #8]
 8001d9a:	9b00      	ldr	r3, [sp, #0]
 8001d9c:	f7fe ff50 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <sdc_lld_prepare_write.lto_priv.206+0x42>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001da6:	9b00      	ldr	r3, [sp, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <sdc_lld_prepare_write.lto_priv.206+0x74>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <sdc_lld_prepare_write.lto_priv.206+0x68>
      return HAL_FAILED;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e011      	b.n	8001dda <sdc_lld_prepare_write.lto_priv.206+0x6a>
  }
  else {
    /* Write single block command.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_BLOCK,
 8001db6:	9803      	ldr	r0, [sp, #12]
 8001db8:	2118      	movs	r1, #24
 8001dba:	9a02      	ldr	r2, [sp, #8]
 8001dbc:	9b00      	ldr	r3, [sp, #0]
 8001dbe:	f7fe ff3f 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <sdc_lld_prepare_write.lto_priv.206+0x64>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001dc8:	9b00      	ldr	r3, [sp, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <sdc_lld_prepare_write.lto_priv.206+0x74>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <sdc_lld_prepare_write.lto_priv.206+0x68>
      return HAL_FAILED;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <sdc_lld_prepare_write.lto_priv.206+0x6a>
  }

  return HAL_SUCCESS;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	b005      	add	sp, #20
 8001dde:	f85d fb04 	ldr.w	pc, [sp], #4
 8001de2:	bf00      	nop
 8001de4:	fdffe008 	.word	0xfdffe008
	...

08001df0 <sdc_lld_wait_transaction_end.lto_priv.205>:
 * @return              The operation status.
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 */
static bool sdc_lld_wait_transaction_end(SDCDriver *sdcp, uint32_t n,
                                         uint32_t *resp) {
 8001df0:	b500      	push	{lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	9003      	str	r0, [sp, #12]
 8001df6:	9102      	str	r1, [sp, #8]
 8001df8:	9201      	str	r2, [sp, #4]

  /* Note the mask is checked before going to sleep because the interrupt
     may have occurred before reaching the critical zone.*/
  osalSysLock();
 8001dfa:	f7ff fed9 	bl	8001bb0 <osalSysLock.lto_priv.218>
  if (sdcp->sdio->MASK != 0)
 8001dfe:	9b03      	ldr	r3, [sp, #12]
 8001e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <sdc_lld_wait_transaction_end.lto_priv.205+0x22>
    osalThreadSuspendS(&sdcp->thread);
 8001e08:	9b03      	ldr	r3, [sp, #12]
 8001e0a:	333c      	adds	r3, #60	; 0x3c
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff feff 	bl	8001c10 <osalThreadSuspendS>
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0) {
 8001e12:	9b03      	ldr	r3, [sp, #12]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d103      	bne.n	8001e28 <sdc_lld_wait_transaction_end.lto_priv.205+0x38>
    osalSysUnlock();
 8001e20:	f7ff fece 	bl	8001bc0 <osalSysUnlock.lto_priv.216>
    return HAL_FAILED;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e027      	b.n	8001e78 <sdc_lld_wait_transaction_end.lto_priv.205+0x88>
  }

#if (defined(STM32F4XX) || defined(STM32F2XX))
  /* Wait until DMA channel enabled to be sure that all data transferred.*/
  while (sdcp->dma->stream->CR & STM32_DMA_CR_EN)
 8001e28:	9b03      	ldr	r3, [sp, #12]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f7      	bne.n	8001e28 <sdc_lld_wait_transaction_end.lto_priv.205+0x38>
    ;

  /* DMA event flags must be manually cleared.*/
  dmaStreamClearInterrupt(sdcp->dma);
 8001e38:	9b03      	ldr	r3, [sp, #12]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	9a03      	ldr	r2, [sp, #12]
 8001e40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e42:	7a12      	ldrb	r2, [r2, #8]
 8001e44:	4611      	mov	r1, r2
 8001e46:	223d      	movs	r2, #61	; 0x3d
 8001e48:	408a      	lsls	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

  sdcp->sdio->ICR = STM32_SDIO_ICR_ALL_FLAGS;
 8001e4c:	9b03      	ldr	r3, [sp, #12]
 8001e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <sdc_lld_wait_transaction_end.lto_priv.205+0x90>)
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->DCTRL = 0;
 8001e54:	9b03      	ldr	r3, [sp, #12]
 8001e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e58:	2200      	movs	r2, #0
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  osalSysUnlock();
 8001e5c:	f7ff feb0 	bl	8001bc0 <osalSysUnlock.lto_priv.216>
  sdcp->sdio->DCTRL = 0;
  osalSysUnlock();
#endif

  /* Finalize transaction.*/
  if (n > 1)
 8001e60:	9b02      	ldr	r3, [sp, #8]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d907      	bls.n	8001e76 <sdc_lld_wait_transaction_end.lto_priv.205+0x86>
    return sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8001e66:	9803      	ldr	r0, [sp, #12]
 8001e68:	210c      	movs	r1, #12
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	9b01      	ldr	r3, [sp, #4]
 8001e6e:	f7fe fee7 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8001e72:	4603      	mov	r3, r0
 8001e74:	e000      	b.n	8001e78 <sdc_lld_wait_transaction_end.lto_priv.205+0x88>

  return HAL_SUCCESS;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	b005      	add	sp, #20
 8001e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e80:	00c007ff 	.word	0x00c007ff
	...

08001e90 <sdc_lld_collect_errors.lto_priv.209>:
 * @param[in] sdcp      pointer to the @p SDCDriver object
 * @param[in] sta       value of the STA register
 *
 * @notapi
 */
static void sdc_lld_collect_errors(SDCDriver *sdcp, uint32_t sta) {
 8001e90:	b084      	sub	sp, #16
 8001e92:	9001      	str	r0, [sp, #4]
 8001e94:	9100      	str	r1, [sp, #0]
  uint32_t errors = SDC_NO_ERROR;
 8001e96:	2300      	movs	r3, #0
 8001e98:	9303      	str	r3, [sp, #12]

  if (sta & SDIO_STA_CCRCFAIL)
 8001e9a:	9b00      	ldr	r3, [sp, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <sdc_lld_collect_errors.lto_priv.209+0x1c>
    errors |= SDC_CMD_CRC_ERROR;
 8001ea4:	9b03      	ldr	r3, [sp, #12]
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_DCRCFAIL)
 8001eac:	9b00      	ldr	r3, [sp, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <sdc_lld_collect_errors.lto_priv.209+0x2e>
    errors |= SDC_DATA_CRC_ERROR;
 8001eb6:	9b03      	ldr	r3, [sp, #12]
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_CTIMEOUT)
 8001ebe:	9b00      	ldr	r3, [sp, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <sdc_lld_collect_errors.lto_priv.209+0x40>
    errors |= SDC_COMMAND_TIMEOUT;
 8001ec8:	9b03      	ldr	r3, [sp, #12]
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_DTIMEOUT)
 8001ed0:	9b00      	ldr	r3, [sp, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <sdc_lld_collect_errors.lto_priv.209+0x52>
    errors |= SDC_DATA_TIMEOUT;
 8001eda:	9b03      	ldr	r3, [sp, #12]
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_TXUNDERR)
 8001ee2:	9b00      	ldr	r3, [sp, #0]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <sdc_lld_collect_errors.lto_priv.209+0x64>
    errors |= SDC_TX_UNDERRUN;
 8001eec:	9b03      	ldr	r3, [sp, #12]
 8001eee:	f043 0310 	orr.w	r3, r3, #16
 8001ef2:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_RXOVERR)
 8001ef4:	9b00      	ldr	r3, [sp, #0]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <sdc_lld_collect_errors.lto_priv.209+0x76>
    errors |= SDC_RX_OVERRUN;
 8001efe:	9b03      	ldr	r3, [sp, #12]
 8001f00:	f043 0320 	orr.w	r3, r3, #32
 8001f04:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_STBITERR)
 8001f06:	9b00      	ldr	r3, [sp, #0]
 8001f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <sdc_lld_collect_errors.lto_priv.209+0x88>
    errors |= SDC_STARTBIT_ERROR;
 8001f10:	9b03      	ldr	r3, [sp, #12]
 8001f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f16:	9303      	str	r3, [sp, #12]

  sdcp->errors |= errors;
 8001f18:	9b01      	ldr	r3, [sp, #4]
 8001f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1c:	9b03      	ldr	r3, [sp, #12]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	9b01      	ldr	r3, [sp, #4]
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f24:	b004      	add	sp, #16
 8001f26:	4770      	bx	lr
	...

08001f30 <sdc_lld_error_cleanup.lto_priv.204>:
 *
 * @notapi
 */
static void sdc_lld_error_cleanup(SDCDriver *sdcp,
                                  uint32_t n,
                                  uint32_t *resp) {
 8001f30:	b500      	push	{lr}
 8001f32:	b087      	sub	sp, #28
 8001f34:	9003      	str	r0, [sp, #12]
 8001f36:	9102      	str	r1, [sp, #8]
 8001f38:	9201      	str	r2, [sp, #4]
  uint32_t sta = sdcp->sdio->STA;
 8001f3a:	9b03      	ldr	r3, [sp, #12]
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	9305      	str	r3, [sp, #20]

  dmaStreamClearInterrupt(sdcp->dma);
 8001f42:	9b03      	ldr	r3, [sp, #12]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	9a03      	ldr	r2, [sp, #12]
 8001f4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f4c:	7a12      	ldrb	r2, [r2, #8]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	223d      	movs	r2, #61	; 0x3d
 8001f52:	408a      	lsls	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(sdcp->dma);
 8001f56:	9b03      	ldr	r3, [sp, #12]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	9a03      	ldr	r2, [sp, #12]
 8001f5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	f022 021f 	bic.w	r2, r2, #31
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	9b03      	ldr	r3, [sp, #12]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f7      	bne.n	8001f6a <sdc_lld_error_cleanup.lto_priv.204+0x3a>
 8001f7a:	9b03      	ldr	r3, [sp, #12]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	9a03      	ldr	r2, [sp, #12]
 8001f82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f84:	7a12      	ldrb	r2, [r2, #8]
 8001f86:	4611      	mov	r1, r2
 8001f88:	223d      	movs	r2, #61	; 0x3d
 8001f8a:	408a      	lsls	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8001f8e:	9b03      	ldr	r3, [sp, #12]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f92:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <sdc_lld_error_cleanup.lto_priv.204+0x98>)
 8001f94:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = 0;
 8001f96:	9b03      	ldr	r3, [sp, #12]
 8001f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  sdcp->sdio->DCTRL = 0;
 8001f9e:	9b03      	ldr	r3, [sp, #12]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 8001fa6:	9803      	ldr	r0, [sp, #12]
 8001fa8:	9905      	ldr	r1, [sp, #20]
 8001faa:	f7ff ff71 	bl	8001e90 <sdc_lld_collect_errors.lto_priv.209>
  if (n > 1)
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d905      	bls.n	8001fc0 <sdc_lld_error_cleanup.lto_priv.204+0x90>
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8001fb4:	9803      	ldr	r0, [sp, #12]
 8001fb6:	210c      	movs	r1, #12
 8001fb8:	2200      	movs	r2, #0
 8001fba:	9b01      	ldr	r3, [sp, #4]
 8001fbc:	f7fe fe40 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
}
 8001fc0:	b007      	add	sp, #28
 8001fc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fc6:	bf00      	nop
 8001fc8:	00c007ff 	.word	0x00c007ff
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8001fd0:	b500      	push	{lr}
 8001fd2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001fd4:	f003 f9ac 	bl	8005330 <_stats_increase_irq>
 8001fd8:	f002 fad2 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <Vector6C+0x40>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001fe4:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 0U;
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <Vector6C+0x40>)
 8001fe8:	9b01      	ldr	r3, [sp, #4]
 8001fea:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[0].dma_func)
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <Vector6C+0x44>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <Vector6C+0x32>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <Vector6C+0x44>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <Vector6C+0x44>)
 8001ffa:	6852      	ldr	r2, [r2, #4]
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	9901      	ldr	r1, [sp, #4]
 8002000:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002002:	f002 fadd 	bl	80045c0 <_dbg_check_leave_isr>
 8002006:	f001 ff73 	bl	8003ef0 <_port_irq_epilogue>
}
 800200a:	b003      	add	sp, #12
 800200c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002010:	40026000 	.word	0x40026000
 8002014:	2000090c 	.word	0x2000090c
	...

08002020 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002020:	b500      	push	{lr}
 8002022:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002024:	f003 f984 	bl	8005330 <_stats_increase_irq>
 8002028:	f002 faaa 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <Vector70+0x44>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002036:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 6U;
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <Vector70+0x44>)
 800203a:	9b01      	ldr	r3, [sp, #4]
 800203c:	019b      	lsls	r3, r3, #6
 800203e:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[1].dma_func)
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <Vector70+0x48>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <Vector70+0x36>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <Vector70+0x48>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a06      	ldr	r2, [pc, #24]	; (8002068 <Vector70+0x48>)
 800204e:	68d2      	ldr	r2, [r2, #12]
 8002050:	4610      	mov	r0, r2
 8002052:	9901      	ldr	r1, [sp, #4]
 8002054:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002056:	f002 fab3 	bl	80045c0 <_dbg_check_leave_isr>
 800205a:	f001 ff49 	bl	8003ef0 <_port_irq_epilogue>
}
 800205e:	b003      	add	sp, #12
 8002060:	f85d fb04 	ldr.w	pc, [sp], #4
 8002064:	40026000 	.word	0x40026000
 8002068:	2000090c 	.word	0x2000090c
 800206c:	00000000 	.word	0x00000000

08002070 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002070:	b500      	push	{lr}
 8002072:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002074:	f003 f95c 	bl	8005330 <_stats_increase_irq>
 8002078:	f002 fa82 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <Vector74+0x44>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002086:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 16U;
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <Vector74+0x44>)
 800208a:	9b01      	ldr	r3, [sp, #4]
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[2].dma_func)
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <Vector74+0x48>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <Vector74+0x36>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <Vector74+0x48>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <Vector74+0x48>)
 800209e:	6952      	ldr	r2, [r2, #20]
 80020a0:	4610      	mov	r0, r2
 80020a2:	9901      	ldr	r1, [sp, #4]
 80020a4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80020a6:	f002 fa8b 	bl	80045c0 <_dbg_check_leave_isr>
 80020aa:	f001 ff21 	bl	8003ef0 <_port_irq_epilogue>
}
 80020ae:	b003      	add	sp, #12
 80020b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b4:	40026000 	.word	0x40026000
 80020b8:	2000090c 	.word	0x2000090c
 80020bc:	00000000 	.word	0x00000000

080020c0 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80020c0:	b500      	push	{lr}
 80020c2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80020c4:	f003 f934 	bl	8005330 <_stats_increase_irq>
 80020c8:	f002 fa5a 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <Vector78+0x44>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0d9b      	lsrs	r3, r3, #22
 80020d2:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80020d6:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 22U;
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <Vector78+0x44>)
 80020da:	9b01      	ldr	r3, [sp, #4]
 80020dc:	059b      	lsls	r3, r3, #22
 80020de:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[3].dma_func)
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <Vector78+0x48>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <Vector78+0x36>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <Vector78+0x48>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <Vector78+0x48>)
 80020ee:	69d2      	ldr	r2, [r2, #28]
 80020f0:	4610      	mov	r0, r2
 80020f2:	9901      	ldr	r1, [sp, #4]
 80020f4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80020f6:	f002 fa63 	bl	80045c0 <_dbg_check_leave_isr>
 80020fa:	f001 fef9 	bl	8003ef0 <_port_irq_epilogue>
}
 80020fe:	b003      	add	sp, #12
 8002100:	f85d fb04 	ldr.w	pc, [sp], #4
 8002104:	40026000 	.word	0x40026000
 8002108:	2000090c 	.word	0x2000090c
 800210c:	00000000 	.word	0x00000000

08002110 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002110:	b500      	push	{lr}
 8002112:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002114:	f003 f90c 	bl	8005330 <_stats_increase_irq>
 8002118:	f002 fa32 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <Vector7C+0x40>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002124:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 0U;
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <Vector7C+0x40>)
 8002128:	9b01      	ldr	r3, [sp, #4]
 800212a:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[4].dma_func)
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <Vector7C+0x44>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <Vector7C+0x32>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <Vector7C+0x44>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <Vector7C+0x44>)
 800213a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800213c:	4610      	mov	r0, r2
 800213e:	9901      	ldr	r1, [sp, #4]
 8002140:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002142:	f002 fa3d 	bl	80045c0 <_dbg_check_leave_isr>
 8002146:	f001 fed3 	bl	8003ef0 <_port_irq_epilogue>
}
 800214a:	b003      	add	sp, #12
 800214c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002150:	40026000 	.word	0x40026000
 8002154:	2000090c 	.word	0x2000090c
	...

08002160 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002160:	b500      	push	{lr}
 8002162:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002164:	f003 f8e4 	bl	8005330 <_stats_increase_irq>
 8002168:	f002 fa0a 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <Vector80+0x44>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002176:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 6U;
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <Vector80+0x44>)
 800217a:	9b01      	ldr	r3, [sp, #4]
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[5].dma_func)
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <Vector80+0x48>)
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <Vector80+0x36>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <Vector80+0x48>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <Vector80+0x48>)
 800218e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002190:	4610      	mov	r0, r2
 8002192:	9901      	ldr	r1, [sp, #4]
 8002194:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002196:	f002 fa13 	bl	80045c0 <_dbg_check_leave_isr>
 800219a:	f001 fea9 	bl	8003ef0 <_port_irq_epilogue>
}
 800219e:	b003      	add	sp, #12
 80021a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80021a4:	40026000 	.word	0x40026000
 80021a8:	2000090c 	.word	0x2000090c
 80021ac:	00000000 	.word	0x00000000

080021b0 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80021b0:	b500      	push	{lr}
 80021b2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80021b4:	f003 f8bc 	bl	8005330 <_stats_increase_irq>
 80021b8:	f002 f9e2 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80021bc:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <Vector84+0x44>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80021c6:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 16U;
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <Vector84+0x44>)
 80021ca:	9b01      	ldr	r3, [sp, #4]
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[6].dma_func)
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <Vector84+0x48>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <Vector84+0x36>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <Vector84+0x48>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <Vector84+0x48>)
 80021de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021e0:	4610      	mov	r0, r2
 80021e2:	9901      	ldr	r1, [sp, #4]
 80021e4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80021e6:	f002 f9eb 	bl	80045c0 <_dbg_check_leave_isr>
 80021ea:	f001 fe81 	bl	8003ef0 <_port_irq_epilogue>
}
 80021ee:	b003      	add	sp, #12
 80021f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80021f4:	40026000 	.word	0x40026000
 80021f8:	2000090c 	.word	0x2000090c
 80021fc:	00000000 	.word	0x00000000

08002200 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002200:	b500      	push	{lr}
 8002202:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002204:	f003 f894 	bl	8005330 <_stats_increase_irq>
 8002208:	f002 f9ba 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <VectorFC+0x44>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0d9b      	lsrs	r3, r3, #22
 8002212:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002216:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 22U;
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <VectorFC+0x44>)
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	059b      	lsls	r3, r3, #22
 800221e:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[7].dma_func)
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <VectorFC+0x48>)
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <VectorFC+0x36>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <VectorFC+0x48>)
 800222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222c:	4a06      	ldr	r2, [pc, #24]	; (8002248 <VectorFC+0x48>)
 800222e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002230:	4610      	mov	r0, r2
 8002232:	9901      	ldr	r1, [sp, #4]
 8002234:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002236:	f002 f9c3 	bl	80045c0 <_dbg_check_leave_isr>
 800223a:	f001 fe59 	bl	8003ef0 <_port_irq_epilogue>
}
 800223e:	b003      	add	sp, #12
 8002240:	f85d fb04 	ldr.w	pc, [sp], #4
 8002244:	40026000 	.word	0x40026000
 8002248:	2000090c 	.word	0x2000090c
 800224c:	00000000 	.word	0x00000000

08002250 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002250:	b500      	push	{lr}
 8002252:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002254:	f003 f86c 	bl	8005330 <_stats_increase_irq>
 8002258:	f002 f992 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <Vector120+0x40>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002264:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 0U;
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <Vector120+0x40>)
 8002268:	9b01      	ldr	r3, [sp, #4]
 800226a:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[8].dma_func)
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <Vector120+0x44>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <Vector120+0x32>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <Vector120+0x44>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <Vector120+0x44>)
 800227a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800227c:	4610      	mov	r0, r2
 800227e:	9901      	ldr	r1, [sp, #4]
 8002280:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002282:	f002 f99d 	bl	80045c0 <_dbg_check_leave_isr>
 8002286:	f001 fe33 	bl	8003ef0 <_port_irq_epilogue>
}
 800228a:	b003      	add	sp, #12
 800228c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002290:	40026400 	.word	0x40026400
 8002294:	2000090c 	.word	0x2000090c
	...

080022a0 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80022a0:	b500      	push	{lr}
 80022a2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80022a4:	f003 f844 	bl	8005330 <_stats_increase_irq>
 80022a8:	f002 f96a 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <Vector124+0x44>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80022b6:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 6U;
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <Vector124+0x44>)
 80022ba:	9b01      	ldr	r3, [sp, #4]
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[9].dma_func)
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <Vector124+0x48>)
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <Vector124+0x36>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <Vector124+0x48>)
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <Vector124+0x48>)
 80022ce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022d0:	4610      	mov	r0, r2
 80022d2:	9901      	ldr	r1, [sp, #4]
 80022d4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80022d6:	f002 f973 	bl	80045c0 <_dbg_check_leave_isr>
 80022da:	f001 fe09 	bl	8003ef0 <_port_irq_epilogue>
}
 80022de:	b003      	add	sp, #12
 80022e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80022e4:	40026400 	.word	0x40026400
 80022e8:	2000090c 	.word	0x2000090c
 80022ec:	00000000 	.word	0x00000000

080022f0 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80022f0:	b500      	push	{lr}
 80022f2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80022f4:	f003 f81c 	bl	8005330 <_stats_increase_irq>
 80022f8:	f002 f942 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <Vector128+0x44>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002306:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 16U;
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <Vector128+0x44>)
 800230a:	9b01      	ldr	r3, [sp, #4]
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[10].dma_func)
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <Vector128+0x48>)
 8002312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <Vector128+0x36>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <Vector128+0x48>)
 800231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <Vector128+0x48>)
 800231e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002320:	4610      	mov	r0, r2
 8002322:	9901      	ldr	r1, [sp, #4]
 8002324:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002326:	f002 f94b 	bl	80045c0 <_dbg_check_leave_isr>
 800232a:	f001 fde1 	bl	8003ef0 <_port_irq_epilogue>
}
 800232e:	b003      	add	sp, #12
 8002330:	f85d fb04 	ldr.w	pc, [sp], #4
 8002334:	40026400 	.word	0x40026400
 8002338:	2000090c 	.word	0x2000090c
 800233c:	00000000 	.word	0x00000000

08002340 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002340:	b500      	push	{lr}
 8002342:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002344:	f002 fff4 	bl	8005330 <_stats_increase_irq>
 8002348:	f002 f91a 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <Vector12C+0x44>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0d9b      	lsrs	r3, r3, #22
 8002352:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002356:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 22U;
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <Vector12C+0x44>)
 800235a:	9b01      	ldr	r3, [sp, #4]
 800235c:	059b      	lsls	r3, r3, #22
 800235e:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[11].dma_func)
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <Vector12C+0x48>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <Vector12C+0x36>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <Vector12C+0x48>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <Vector12C+0x48>)
 800236e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002370:	4610      	mov	r0, r2
 8002372:	9901      	ldr	r1, [sp, #4]
 8002374:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002376:	f002 f923 	bl	80045c0 <_dbg_check_leave_isr>
 800237a:	f001 fdb9 	bl	8003ef0 <_port_irq_epilogue>
}
 800237e:	b003      	add	sp, #12
 8002380:	f85d fb04 	ldr.w	pc, [sp], #4
 8002384:	40026400 	.word	0x40026400
 8002388:	2000090c 	.word	0x2000090c
 800238c:	00000000 	.word	0x00000000

08002390 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002390:	b500      	push	{lr}
 8002392:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002394:	f002 ffcc 	bl	8005330 <_stats_increase_irq>
 8002398:	f002 f8f2 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <Vector130+0x40>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80023a4:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 0U;
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <Vector130+0x40>)
 80023a8:	9b01      	ldr	r3, [sp, #4]
 80023aa:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[12].dma_func)
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <Vector130+0x44>)
 80023ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <Vector130+0x32>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <Vector130+0x44>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <Vector130+0x44>)
 80023ba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80023bc:	4610      	mov	r0, r2
 80023be:	9901      	ldr	r1, [sp, #4]
 80023c0:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80023c2:	f002 f8fd 	bl	80045c0 <_dbg_check_leave_isr>
 80023c6:	f001 fd93 	bl	8003ef0 <_port_irq_epilogue>
}
 80023ca:	b003      	add	sp, #12
 80023cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80023d0:	40026400 	.word	0x40026400
 80023d4:	2000090c 	.word	0x2000090c
	...

080023e0 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80023e0:	b500      	push	{lr}
 80023e2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80023e4:	f002 ffa4 	bl	8005330 <_stats_increase_irq>
 80023e8:	f002 f8ca 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <Vector150+0x44>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80023f6:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 6U;
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <Vector150+0x44>)
 80023fa:	9b01      	ldr	r3, [sp, #4]
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[13].dma_func)
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <Vector150+0x48>)
 8002402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <Vector150+0x36>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <Vector150+0x48>)
 800240a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240c:	4a06      	ldr	r2, [pc, #24]	; (8002428 <Vector150+0x48>)
 800240e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002410:	4610      	mov	r0, r2
 8002412:	9901      	ldr	r1, [sp, #4]
 8002414:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002416:	f002 f8d3 	bl	80045c0 <_dbg_check_leave_isr>
 800241a:	f001 fd69 	bl	8003ef0 <_port_irq_epilogue>
}
 800241e:	b003      	add	sp, #12
 8002420:	f85d fb04 	ldr.w	pc, [sp], #4
 8002424:	40026400 	.word	0x40026400
 8002428:	2000090c 	.word	0x2000090c
 800242c:	00000000 	.word	0x00000000

08002430 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002430:	b500      	push	{lr}
 8002432:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002434:	f002 ff7c 	bl	8005330 <_stats_increase_irq>
 8002438:	f002 f8a2 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <Vector154+0x44>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002446:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 16U;
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <Vector154+0x44>)
 800244a:	9b01      	ldr	r3, [sp, #4]
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[14].dma_func)
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <Vector154+0x48>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <Vector154+0x36>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8002458:	4b07      	ldr	r3, [pc, #28]	; (8002478 <Vector154+0x48>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <Vector154+0x48>)
 800245e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002460:	4610      	mov	r0, r2
 8002462:	9901      	ldr	r1, [sp, #4]
 8002464:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002466:	f002 f8ab 	bl	80045c0 <_dbg_check_leave_isr>
 800246a:	f001 fd41 	bl	8003ef0 <_port_irq_epilogue>
}
 800246e:	b003      	add	sp, #12
 8002470:	f85d fb04 	ldr.w	pc, [sp], #4
 8002474:	40026400 	.word	0x40026400
 8002478:	2000090c 	.word	0x2000090c
 800247c:	00000000 	.word	0x00000000

08002480 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002480:	b500      	push	{lr}
 8002482:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002484:	f002 ff54 	bl	8005330 <_stats_increase_irq>
 8002488:	f002 f87a 	bl	8004580 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <Vector158+0x44>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	0d9b      	lsrs	r3, r3, #22
 8002492:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002496:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 22U;
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <Vector158+0x44>)
 800249a:	9b01      	ldr	r3, [sp, #4]
 800249c:	059b      	lsls	r3, r3, #22
 800249e:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[15].dma_func)
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <Vector158+0x48>)
 80024a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <Vector158+0x36>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <Vector158+0x48>)
 80024aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <Vector158+0x48>)
 80024ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80024b0:	4610      	mov	r0, r2
 80024b2:	9901      	ldr	r1, [sp, #4]
 80024b4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80024b6:	f002 f883 	bl	80045c0 <_dbg_check_leave_isr>
 80024ba:	f001 fd19 	bl	8003ef0 <_port_irq_epilogue>
}
 80024be:	b003      	add	sp, #12
 80024c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c4:	40026400 	.word	0x40026400
 80024c8:	2000090c 	.word	0x2000090c
 80024cc:	00000000 	.word	0x00000000

080024d0 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 80024d0:	b082      	sub	sp, #8
  unsigned i;

  dma_streams_mask = 0U;
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <dmaInit+0x5c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80024d8:	2300      	movs	r3, #0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	e011      	b.n	8002502 <dmaInit+0x32>
    _stm32_dma_streams[i].stream->CR = 0U;
 80024de:	4914      	ldr	r1, [pc, #80]	; (8002530 <dmaInit+0x60>)
 80024e0:	9a01      	ldr	r2, [sp, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <dmaInit+0x64>)
 80024f4:	9b01      	ldr	r3, [sp, #4]
 80024f6:	2100      	movs	r1, #0
 80024f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80024fc:	9b01      	ldr	r3, [sp, #4]
 80024fe:	3301      	adds	r3, #1
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	9b01      	ldr	r3, [sp, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d9ea      	bls.n	80024de <dmaInit+0xe>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <dmaInit+0x68>)
 800250a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800250e:	609a      	str	r2, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <dmaInit+0x68>)
 8002512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002516:	60da      	str	r2, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <dmaInit+0x6c>)
 800251a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800251e:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <dmaInit+0x6c>)
 8002522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002526:	60da      	str	r2, [r3, #12]
}
 8002528:	b002      	add	sp, #8
 800252a:	4770      	bx	lr
 800252c:	20000908 	.word	0x20000908
 8002530:	08005e10 	.word	0x08005e10
 8002534:	2000090c 	.word	0x2000090c
 8002538:	40026000 	.word	0x40026000
 800253c:	40026400 	.word	0x40026400

08002540 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8002540:	b500      	push	{lr}
 8002542:	b085      	sub	sp, #20
 8002544:	9003      	str	r0, [sp, #12]
 8002546:	9102      	str	r1, [sp, #8]
 8002548:	9201      	str	r2, [sp, #4]
 800254a:	9300      	str	r3, [sp, #0]

  osalDbgCheck(dmastp != NULL);
 800254c:	9b03      	ldr	r3, [sp, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <dmaStreamAllocate+0x18>
 8002552:	4836      	ldr	r0, [pc, #216]	; (800262c <dmaStreamAllocate+0xec>)
 8002554:	f001 ff4c 	bl	80043f0 <chSysHalt>

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8002558:	9b03      	ldr	r3, [sp, #12]
 800255a:	7a5b      	ldrb	r3, [r3, #9]
 800255c:	461a      	mov	r2, r3
 800255e:	2301      	movs	r3, #1
 8002560:	fa03 f202 	lsl.w	r2, r3, r2
 8002564:	4b32      	ldr	r3, [pc, #200]	; (8002630 <dmaStreamAllocate+0xf0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <dmaStreamAllocate+0x32>
    return true;
 800256e:	2301      	movs	r3, #1
 8002570:	e058      	b.n	8002624 <dmaStreamAllocate+0xe4>

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8002572:	9b03      	ldr	r3, [sp, #12]
 8002574:	7a5b      	ldrb	r3, [r3, #9]
 8002576:	4619      	mov	r1, r3
 8002578:	4a2e      	ldr	r2, [pc, #184]	; (8002634 <dmaStreamAllocate+0xf4>)
 800257a:	9b01      	ldr	r3, [sp, #4]
 800257c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002580:	9b03      	ldr	r3, [sp, #12]
 8002582:	7a5b      	ldrb	r3, [r3, #9]
 8002584:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <dmaStreamAllocate+0xf4>)
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	9a00      	ldr	r2, [sp, #0]
 800258c:	605a      	str	r2, [r3, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);
 800258e:	9b03      	ldr	r3, [sp, #12]
 8002590:	7a5b      	ldrb	r3, [r3, #9]
 8002592:	461a      	mov	r2, r3
 8002594:	2301      	movs	r3, #1
 8002596:	fa03 f202 	lsl.w	r2, r3, r2
 800259a:	4b25      	ldr	r3, [pc, #148]	; (8002630 <dmaStreamAllocate+0xf0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <dmaStreamAllocate+0xf0>)
 80025a2:	6013      	str	r3, [r2, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <dmaStreamAllocate+0xf0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <dmaStreamAllocate+0x7a>
    rccEnableDMA1(false);
 80025ae:	4a22      	ldr	r2, [pc, #136]	; (8002638 <dmaStreamAllocate+0xf8>)
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <dmaStreamAllocate+0xf8>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <dmaStreamAllocate+0xf0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <dmaStreamAllocate+0x92>
    rccEnableDMA2(false);
 80025c6:	4a1c      	ldr	r2, [pc, #112]	; (8002638 <dmaStreamAllocate+0xf8>)
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <dmaStreamAllocate+0xf8>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80025d2:	9b03      	ldr	r3, [sp, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	9a03      	ldr	r2, [sp, #12]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	f022 021f 	bic.w	r2, r2, #31
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	9b03      	ldr	r3, [sp, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f8      	bne.n	80025e2 <dmaStreamAllocate+0xa2>
 80025f0:	9b03      	ldr	r3, [sp, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	9a03      	ldr	r2, [sp, #12]
 80025f6:	7a12      	ldrb	r2, [r2, #8]
 80025f8:	4611      	mov	r1, r2
 80025fa:	223d      	movs	r2, #61	; 0x3d
 80025fc:	408a      	lsls	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002600:	9b03      	ldr	r3, [sp, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002608:	9b03      	ldr	r3, [sp, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2221      	movs	r2, #33	; 0x21
 800260e:	615a      	str	r2, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8002610:	9b01      	ldr	r3, [sp, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <dmaStreamAllocate+0xe2>
    nvicEnableVector(dmastp->vector, priority);
 8002616:	9b03      	ldr	r3, [sp, #12]
 8002618:	7a9b      	ldrb	r3, [r3, #10]
 800261a:	4618      	mov	r0, r3
 800261c:	9902      	ldr	r1, [sp, #8]
 800261e:	f001 f95f 	bl	80038e0 <nvicEnableVector>
  }

  return false;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	b005      	add	sp, #20
 8002628:	f85d fb04 	ldr.w	pc, [sp], #4
 800262c:	08005ed0 	.word	0x08005ed0
 8002630:	20000908 	.word	0x20000908
 8002634:	2000090c 	.word	0x2000090c
 8002638:	40023800 	.word	0x40023800
 800263c:	00000000 	.word	0x00000000

08002640 <port_lock.lto_priv.243>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8002640:	b082      	sub	sp, #8
 8002642:	2320      	movs	r3, #32
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	9b01      	ldr	r3, [sp, #4]
 8002648:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800264c:	b002      	add	sp, #8
 800264e:	4770      	bx	lr

08002650 <port_unlock.lto_priv.240>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8002650:	b082      	sub	sp, #8
 8002652:	2300      	movs	r3, #0
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	9b01      	ldr	r3, [sp, #4]
 8002658:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800265c:	b002      	add	sp, #8
 800265e:	4770      	bx	lr

08002660 <port_lock_from_isr.lto_priv.237>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8002660:	b508      	push	{r3, lr}

  port_lock();
 8002662:	f7ff ffed 	bl	8002640 <port_lock.lto_priv.243>
}
 8002666:	bd08      	pop	{r3, pc}
	...

08002670 <port_unlock_from_isr.lto_priv.234>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8002670:	b508      	push	{r3, lr}

  port_unlock();
 8002672:	f7ff ffed 	bl	8002650 <port_unlock.lto_priv.240>
}
 8002676:	bd08      	pop	{r3, pc}
	...

08002680 <chSysLockFromISR.lto_priv.231>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8002680:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8002682:	f7ff ffed 	bl	8002660 <port_lock_from_isr.lto_priv.237>
  _stats_start_measure_crit_isr();
 8002686:	f002 fe93 	bl	80053b0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800268a:	f001 ff49 	bl	8004520 <_dbg_check_lock_from_isr>
}
 800268e:	bd08      	pop	{r3, pc}

08002690 <chSysUnlockFromISR.lto_priv.228>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8002690:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
 8002692:	f001 ff5d 	bl	8004550 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002696:	f002 fe93 	bl	80053c0 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 800269a:	f7ff ffe9 	bl	8002670 <port_unlock_from_isr.lto_priv.234>
}
 800269e:	bd08      	pop	{r3, pc}

080026a0 <osalSysLockFromISR.lto_priv.248>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 80026a0:	b508      	push	{r3, lr}

  chSysLockFromISR();
 80026a2:	f7ff ffed 	bl	8002680 <chSysLockFromISR.lto_priv.231>
}
 80026a6:	bd08      	pop	{r3, pc}
	...

080026b0 <osalSysUnlockFromISR.lto_priv.246>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 80026b0:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 80026b2:	f7ff ffed 	bl	8002690 <chSysUnlockFromISR.lto_priv.228>
}
 80026b6:	bd08      	pop	{r3, pc}
	...

080026c0 <osalOsTimerHandlerI>:
 * @brief   Systick callback for the underlying OS.
 * @note    This callback is only defined if the OSAL requires such a
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {
 80026c0:	b508      	push	{r3, lr}

  chSysTimerHandlerI();
 80026c2:	f001 fea5 	bl	8004410 <chSysTimerHandlerI>
}
 80026c6:	bd08      	pop	{r3, pc}
	...

080026d0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 80026d0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80026d2:	f002 fe2d 	bl	8005330 <_stats_increase_irq>
 80026d6:	f001 ff53 	bl	8004580 <_dbg_check_enter_isr>

  osalSysLockFromISR();
 80026da:	f7ff ffe1 	bl	80026a0 <osalSysLockFromISR.lto_priv.248>
  osalOsTimerHandlerI();
 80026de:	f7ff ffef 	bl	80026c0 <osalOsTimerHandlerI>
  osalSysUnlockFromISR();
 80026e2:	f7ff ffe5 	bl	80026b0 <osalSysUnlockFromISR.lto_priv.246>

  OSAL_IRQ_EPILOGUE();
 80026e6:	f001 ff6b 	bl	80045c0 <_dbg_check_leave_isr>
 80026ea:	f001 fc01 	bl	8003ef0 <_port_irq_epilogue>
}
 80026ee:	bd08      	pop	{r3, pc}

080026f0 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 80026f0:	b508      	push	{r3, lr}
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <st_lld_init+0x20>)
 80026f4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80026f8:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <st_lld_init+0x20>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <st_lld_init+0x20>)
 8002702:	2207      	movs	r2, #7
 8002704:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8002706:	200b      	movs	r0, #11
 8002708:	2108      	movs	r1, #8
 800270a:	f001 f919 	bl	8003940 <nvicSetSystemHandlerPriority>
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800270e:	bd08      	pop	{r3, pc}
 8002710:	e000e010 	.word	0xe000e010
	...

08002720 <port_lock.lto_priv.244>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8002720:	b082      	sub	sp, #8
 8002722:	2320      	movs	r3, #32
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	9b01      	ldr	r3, [sp, #4]
 8002728:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800272c:	b002      	add	sp, #8
 800272e:	4770      	bx	lr

08002730 <port_unlock.lto_priv.241>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8002730:	b082      	sub	sp, #8
 8002732:	2300      	movs	r3, #0
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800273c:	b002      	add	sp, #8
 800273e:	4770      	bx	lr

08002740 <port_lock_from_isr.lto_priv.238>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8002740:	b508      	push	{r3, lr}

  port_lock();
 8002742:	f7ff ffed 	bl	8002720 <port_lock.lto_priv.244>
}
 8002746:	bd08      	pop	{r3, pc}
	...

08002750 <port_unlock_from_isr.lto_priv.235>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8002750:	b508      	push	{r3, lr}

  port_unlock();
 8002752:	f7ff ffed 	bl	8002730 <port_unlock.lto_priv.241>
}
 8002756:	bd08      	pop	{r3, pc}
	...

08002760 <chSysLockFromISR.lto_priv.232>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8002760:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8002762:	f7ff ffed 	bl	8002740 <port_lock_from_isr.lto_priv.238>
  _stats_start_measure_crit_isr();
 8002766:	f002 fe23 	bl	80053b0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800276a:	f001 fed9 	bl	8004520 <_dbg_check_lock_from_isr>
}
 800276e:	bd08      	pop	{r3, pc}

08002770 <chSysUnlockFromISR.lto_priv.229>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8002770:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
 8002772:	f001 feed 	bl	8004550 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002776:	f002 fe23 	bl	80053c0 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 800277a:	f7ff ffe9 	bl	8002750 <port_unlock_from_isr.lto_priv.235>
}
 800277e:	bd08      	pop	{r3, pc}

08002780 <osalSysLockFromISR.lto_priv.249>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8002780:	b508      	push	{r3, lr}

  chSysLockFromISR();
 8002782:	f7ff ffed 	bl	8002760 <chSysLockFromISR.lto_priv.232>
}
 8002786:	bd08      	pop	{r3, pc}
	...

08002790 <osalSysUnlockFromISR.lto_priv.247>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8002790:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 8002792:	f7ff ffed 	bl	8002770 <chSysUnlockFromISR.lto_priv.229>
}
 8002796:	bd08      	pop	{r3, pc}
	...

080027a0 <osalThreadResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 80027a0:	b500      	push	{lr}
 80027a2:	b083      	sub	sp, #12
 80027a4:	9001      	str	r0, [sp, #4]
 80027a6:	9100      	str	r1, [sp, #0]

  chThdResumeI(trp, msg);
 80027a8:	9801      	ldr	r0, [sp, #4]
 80027aa:	9900      	ldr	r1, [sp, #0]
 80027ac:	f002 fca8 	bl	8005100 <chThdResumeI>
}
 80027b0:	b003      	add	sp, #12
 80027b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80027b6:	bf00      	nop
	...

080027c0 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 80027c0:	b500      	push	{lr}
 80027c2:	b083      	sub	sp, #12
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();
 80027c4:	f002 fdb4 	bl	8005330 <_stats_increase_irq>
 80027c8:	f001 feda 	bl	8004580 <_dbg_check_enter_isr>

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <Vector88+0x9c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	9301      	str	r3, [sp, #4]
  ADC1->SR = 0;
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <Vector88+0x9c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 80027d8:	9b01      	ldr	r3, [sp, #4]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d034      	beq.n	800284c <Vector88+0x8c>
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <Vector88+0xa0>)
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d02e      	beq.n	800284c <Vector88+0x8c>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <Vector88+0xa0>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d02a      	beq.n	800284c <Vector88+0x8c>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 80027f6:	481a      	ldr	r0, [pc, #104]	; (8002860 <Vector88+0xa0>)
 80027f8:	f000 f85a 	bl	80028b0 <adc_lld_stop_conversion>
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <Vector88+0xa0>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d013      	beq.n	800282e <Vector88+0x6e>
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <Vector88+0xa0>)
 8002808:	2205      	movs	r2, #5
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <Vector88+0xa0>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	4813      	ldr	r0, [pc, #76]	; (8002860 <Vector88+0xa0>)
 8002814:	2101      	movs	r1, #1
 8002816:	4798      	blx	r3
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <Vector88+0xa0>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d102      	bne.n	8002826 <Vector88+0x66>
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <Vector88+0xa0>)
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <Vector88+0xa0>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
 800282c:	e005      	b.n	800283a <Vector88+0x7a>
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <Vector88+0xa0>)
 8002830:	2202      	movs	r2, #2
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <Vector88+0xa0>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
 800283a:	f7ff ffa1 	bl	8002780 <osalSysLockFromISR.lto_priv.249>
 800283e:	4809      	ldr	r0, [pc, #36]	; (8002864 <Vector88+0xa4>)
 8002840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002844:	f7ff ffac 	bl	80027a0 <osalThreadResumeI>
 8002848:	f7ff ffa2 	bl	8002790 <osalSysUnlockFromISR.lto_priv.247>
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 800284c:	f001 feb8 	bl	80045c0 <_dbg_check_leave_isr>
 8002850:	f001 fb4e 	bl	8003ef0 <_port_irq_epilogue>
}
 8002854:	b003      	add	sp, #12
 8002856:	f85d fb04 	ldr.w	pc, [sp], #4
 800285a:	bf00      	nop
 800285c:	40012000 	.word	0x40012000
 8002860:	2000098c 	.word	0x2000098c
 8002864:	200009a0 	.word	0x200009a0
	...

08002870 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 8002870:	b508      	push	{r3, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8002872:	4808      	ldr	r0, [pc, #32]	; (8002894 <adc_lld_init+0x24>)
 8002874:	f001 f9e4 	bl	8003c40 <adcObjectInit>
  ADCD1.adc = ADC1;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <adc_lld_init+0x24>)
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <adc_lld_init+0x28>)
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <adc_lld_init+0x24>)
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <adc_lld_init+0x2c>)
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <adc_lld_init+0x24>)
 8002886:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <adc_lld_init+0x30>)
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 800288a:	2012      	movs	r0, #18
 800288c:	2106      	movs	r1, #6
 800288e:	f001 f827 	bl	80038e0 <nvicEnableVector>
}
 8002892:	bd08      	pop	{r3, pc}
 8002894:	2000098c 	.word	0x2000098c
 8002898:	40012000 	.word	0x40012000
 800289c:	08005ea0 	.word	0x08005ea0
 80028a0:	00022c16 	.word	0x00022c16
	...

080028b0 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 80028b0:	b082      	sub	sp, #8
 80028b2:	9001      	str	r0, [sp, #4]

  dmaStreamDisable(adcp->dmastp);
 80028b4:	9b01      	ldr	r3, [sp, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	9a01      	ldr	r2, [sp, #4]
 80028bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	f022 021f 	bic.w	r2, r2, #31
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	9b01      	ldr	r3, [sp, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f7      	bne.n	80028c8 <adc_lld_stop_conversion+0x18>
 80028d8:	9b01      	ldr	r3, [sp, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	9a01      	ldr	r2, [sp, #4]
 80028e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028e2:	7a12      	ldrb	r2, [r2, #8]
 80028e4:	4611      	mov	r1, r2
 80028e6:	223d      	movs	r2, #61	; 0x3d
 80028e8:	408a      	lsls	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
  adcp->adc->CR1 = 0;
 80028ec:	9b01      	ldr	r3, [sp, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
  adcp->adc->CR2 = 0;
 80028f4:	9b01      	ldr	r3, [sp, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80028fc:	9b01      	ldr	r3, [sp, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2201      	movs	r2, #1
 8002902:	609a      	str	r2, [r3, #8]
}
 8002904:	b002      	add	sp, #8
 8002906:	4770      	bx	lr
	...

08002910 <initgpio>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {
 8002910:	b082      	sub	sp, #8
 8002912:	9001      	str	r0, [sp, #4]
 8002914:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 8002916:	9b00      	ldr	r3, [sp, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	9b01      	ldr	r3, [sp, #4]
 800291c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800291e:	9b00      	ldr	r3, [sp, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	9b01      	ldr	r3, [sp, #4]
 8002924:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8002926:	9b00      	ldr	r3, [sp, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	9b01      	ldr	r3, [sp, #4]
 800292c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800292e:	9b00      	ldr	r3, [sp, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8002936:	9b00      	ldr	r3, [sp, #0]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	9b01      	ldr	r3, [sp, #4]
 800293c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800293e:	9b00      	ldr	r3, [sp, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	9b01      	ldr	r3, [sp, #4]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002946:	9b00      	ldr	r3, [sp, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	9b01      	ldr	r3, [sp, #4]
 800294c:	601a      	str	r2, [r3, #0]
}
 800294e:	b002      	add	sp, #8
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
	...

08002960 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8002960:	b500      	push	{lr}
 8002962:	b083      	sub	sp, #12
 8002964:	9001      	str	r0, [sp, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002966:	4a19      	ldr	r2, [pc, #100]	; (80029cc <_pal_lld_init+0x6c>)
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <_pal_lld_init+0x6c>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f043 039f 	orr.w	r3, r3, #159	; 0x9f
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8002972:	4a16      	ldr	r2, [pc, #88]	; (80029cc <_pal_lld_init+0x6c>)
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <_pal_lld_init+0x6c>)
 8002976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002978:	f043 039f 	orr.w	r3, r3, #159	; 0x9f
 800297c:	6513      	str	r3, [r2, #80]	; 0x50

  /*
   * Initial GPIO setup.
   */
#if STM32_HAS_GPIOA
  initgpio(GPIOA, &config->PAData);
 800297e:	9b01      	ldr	r3, [sp, #4]
 8002980:	4813      	ldr	r0, [pc, #76]	; (80029d0 <_pal_lld_init+0x70>)
 8002982:	4619      	mov	r1, r3
 8002984:	f7ff ffc4 	bl	8002910 <initgpio>
#endif
#if STM32_HAS_GPIOB
  initgpio(GPIOB, &config->PBData);
 8002988:	9b01      	ldr	r3, [sp, #4]
 800298a:	331c      	adds	r3, #28
 800298c:	4811      	ldr	r0, [pc, #68]	; (80029d4 <_pal_lld_init+0x74>)
 800298e:	4619      	mov	r1, r3
 8002990:	f7ff ffbe 	bl	8002910 <initgpio>
#endif
#if STM32_HAS_GPIOC
  initgpio(GPIOC, &config->PCData);
 8002994:	9b01      	ldr	r3, [sp, #4]
 8002996:	3338      	adds	r3, #56	; 0x38
 8002998:	480f      	ldr	r0, [pc, #60]	; (80029d8 <_pal_lld_init+0x78>)
 800299a:	4619      	mov	r1, r3
 800299c:	f7ff ffb8 	bl	8002910 <initgpio>
#endif
#if STM32_HAS_GPIOD
  initgpio(GPIOD, &config->PDData);
 80029a0:	9b01      	ldr	r3, [sp, #4]
 80029a2:	3354      	adds	r3, #84	; 0x54
 80029a4:	480d      	ldr	r0, [pc, #52]	; (80029dc <_pal_lld_init+0x7c>)
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7ff ffb2 	bl	8002910 <initgpio>
#endif
#if STM32_HAS_GPIOE
  initgpio(GPIOE, &config->PEData);
 80029ac:	9b01      	ldr	r3, [sp, #4]
 80029ae:	3370      	adds	r3, #112	; 0x70
 80029b0:	480b      	ldr	r0, [pc, #44]	; (80029e0 <_pal_lld_init+0x80>)
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7ff ffac 	bl	8002910 <initgpio>
#endif
#if STM32_HAS_GPIOG
  initgpio(GPIOG, &config->PGData);
#endif
#if STM32_HAS_GPIOH
  initgpio(GPIOH, &config->PHData);
 80029b8:	9b01      	ldr	r3, [sp, #4]
 80029ba:	338c      	adds	r3, #140	; 0x8c
 80029bc:	4809      	ldr	r0, [pc, #36]	; (80029e4 <_pal_lld_init+0x84>)
 80029be:	4619      	mov	r1, r3
 80029c0:	f7ff ffa6 	bl	8002910 <initgpio>
  initgpio(GPIOJ, &config->PJData);
#endif
#if STM32_HAS_GPIOK
  initgpio(GPIOK, &config->PKData);
#endif
}
 80029c4:	b003      	add	sp, #12
 80029c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021c00 	.word	0x40021c00
	...

080029f0 <port_lock.lto_priv.245>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80029f0:	b082      	sub	sp, #8
 80029f2:	2320      	movs	r3, #32
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	9b01      	ldr	r3, [sp, #4]
 80029f8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80029fc:	b002      	add	sp, #8
 80029fe:	4770      	bx	lr

08002a00 <port_unlock.lto_priv.242>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8002a00:	b082      	sub	sp, #8
 8002a02:	2300      	movs	r3, #0
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	9b01      	ldr	r3, [sp, #4]
 8002a08:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8002a0c:	b002      	add	sp, #8
 8002a0e:	4770      	bx	lr

08002a10 <port_lock_from_isr.lto_priv.239>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8002a10:	b508      	push	{r3, lr}

  port_lock();
 8002a12:	f7ff ffed 	bl	80029f0 <port_lock.lto_priv.245>
}
 8002a16:	bd08      	pop	{r3, pc}
	...

08002a20 <port_unlock_from_isr.lto_priv.236>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8002a20:	b508      	push	{r3, lr}

  port_unlock();
 8002a22:	f7ff ffed 	bl	8002a00 <port_unlock.lto_priv.242>
}
 8002a26:	bd08      	pop	{r3, pc}
	...

08002a30 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8002a30:	b508      	push	{r3, lr}

  port_lock();
 8002a32:	f7ff ffdd 	bl	80029f0 <port_lock.lto_priv.245>
  _stats_start_measure_crit_thd();
 8002a36:	f002 fcab 	bl	8005390 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002a3a:	f001 fd41 	bl	80044c0 <_dbg_check_lock>
}
 8002a3e:	bd08      	pop	{r3, pc}

08002a40 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8002a40:	b508      	push	{r3, lr}

  _dbg_check_unlock();
 8002a42:	f001 fd55 	bl	80044f0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002a46:	f002 fcab 	bl	80053a0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <chSysUnlock+0x30>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <chSysUnlock+0x30>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00a      	beq.n	8002a6a <chSysUnlock+0x2a>
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <chSysUnlock+0x30>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <chSysUnlock+0x30>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d202      	bcs.n	8002a6a <chSysUnlock+0x2a>
 8002a64:	4803      	ldr	r0, [pc, #12]	; (8002a74 <chSysUnlock+0x34>)
 8002a66:	f001 fcc3 	bl	80043f0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  port_unlock();
 8002a6a:	f7ff ffc9 	bl	8002a00 <port_unlock.lto_priv.242>
}
 8002a6e:	bd08      	pop	{r3, pc}
 8002a70:	20000800 	.word	0x20000800
 8002a74:	08005f20 	.word	0x08005f20
	...

08002a80 <chSysLockFromISR.lto_priv.233>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8002a80:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8002a82:	f7ff ffc5 	bl	8002a10 <port_lock_from_isr.lto_priv.239>
  _stats_start_measure_crit_isr();
 8002a86:	f002 fc93 	bl	80053b0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002a8a:	f001 fd49 	bl	8004520 <_dbg_check_lock_from_isr>
}
 8002a8e:	bd08      	pop	{r3, pc}

08002a90 <chSysUnlockFromISR.lto_priv.230>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8002a90:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
 8002a92:	f001 fd5d 	bl	8004550 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002a96:	f002 fc93 	bl	80053c0 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 8002a9a:	f7ff ffc1 	bl	8002a20 <port_unlock_from_isr.lto_priv.236>
}
 8002a9e:	bd08      	pop	{r3, pc}

08002aa0 <chVTGetSystemTimeX>:
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
 8002aa0:	4b01      	ldr	r3, [pc, #4]	; (8002aa8 <chVTGetSystemTimeX+0x8>)
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4770      	bx	lr
 8002aa8:	20000800 	.word	0x20000800
 8002aac:	00000000 	.word	0x00000000

08002ab0 <chVTIsTimeWithinX>:
 *
 * @xclass
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	9003      	str	r0, [sp, #12]
 8002ab4:	9102      	str	r1, [sp, #8]
 8002ab6:	9201      	str	r2, [sp, #4]

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8002ab8:	9a03      	ldr	r2, [sp, #12]
 8002aba:	9b02      	ldr	r3, [sp, #8]
 8002abc:	1ad2      	subs	r2, r2, r3
 8002abe:	9901      	ldr	r1, [sp, #4]
 8002ac0:	9b02      	ldr	r3, [sp, #8]
 8002ac2:	1acb      	subs	r3, r1, r3
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	bf34      	ite	cc
 8002ac8:	2301      	movcc	r3, #1
 8002aca:	2300      	movcs	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	b004      	add	sp, #16
 8002ad2:	4770      	bx	lr
	...

08002ae0 <osalSysHalt.lto_priv.227>:
 *
 * @param[in] reason    the halt message pointer
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {
 8002ae0:	b500      	push	{lr}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	9001      	str	r0, [sp, #4]

  chSysHalt(reason);
 8002ae6:	9801      	ldr	r0, [sp, #4]
 8002ae8:	f001 fc82 	bl	80043f0 <chSysHalt>
}
 8002aec:	b003      	add	sp, #12
 8002aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8002af2:	bf00      	nop
	...

08002b00 <osalSysLock.lto_priv.217>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8002b00:	b508      	push	{r3, lr}

  chSysLock();
 8002b02:	f7ff ff95 	bl	8002a30 <chSysLock>
}
 8002b06:	bd08      	pop	{r3, pc}
	...

08002b10 <osalSysUnlock.lto_priv.215>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8002b10:	b508      	push	{r3, lr}

  chSysUnlock();
 8002b12:	f7ff ff95 	bl	8002a40 <chSysUnlock>
}
 8002b16:	bd08      	pop	{r3, pc}
	...

08002b20 <osalSysLockFromISR.lto_priv.226>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8002b20:	b508      	push	{r3, lr}

  chSysLockFromISR();
 8002b22:	f7ff ffad 	bl	8002a80 <chSysLockFromISR.lto_priv.233>
}
 8002b26:	bd08      	pop	{r3, pc}
	...

08002b30 <osalSysUnlockFromISR.lto_priv.224>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8002b30:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 8002b32:	f7ff ffad 	bl	8002a90 <chSysUnlockFromISR.lto_priv.230>
}
 8002b36:	bd08      	pop	{r3, pc}
	...

08002b40 <osalOsGetSystemTimeX.lto_priv.222>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t osalOsGetSystemTimeX(void) {
 8002b40:	b508      	push	{r3, lr}

  return chVTGetSystemTimeX();
 8002b42:	f7ff ffad 	bl	8002aa0 <chVTGetSystemTimeX>
 8002b46:	4603      	mov	r3, r0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd08      	pop	{r3, pc}
 8002b4c:	0000      	movs	r0, r0
	...

08002b50 <osalOsIsTimeWithinX.lto_priv.221>:
 *
 * @xclass
 */
static inline bool osalOsIsTimeWithinX(systime_t time,
                                       systime_t start,
                                       systime_t end) {
 8002b50:	b500      	push	{lr}
 8002b52:	b085      	sub	sp, #20
 8002b54:	9003      	str	r0, [sp, #12]
 8002b56:	9102      	str	r1, [sp, #8]
 8002b58:	9201      	str	r2, [sp, #4]

  return chVTIsTimeWithinX(time, start, end);
 8002b5a:	9803      	ldr	r0, [sp, #12]
 8002b5c:	9902      	ldr	r1, [sp, #8]
 8002b5e:	9a01      	ldr	r2, [sp, #4]
 8002b60:	f7ff ffa6 	bl	8002ab0 <chVTIsTimeWithinX>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	b005      	add	sp, #20
 8002b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b6e:	bf00      	nop

08002b70 <osalThreadSuspendTimeoutS.lto_priv.220>:
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
                                              systime_t timeout) {
 8002b70:	b500      	push	{lr}
 8002b72:	b083      	sub	sp, #12
 8002b74:	9001      	str	r0, [sp, #4]
 8002b76:	9100      	str	r1, [sp, #0]

  return chThdSuspendTimeoutS(trp, timeout);
 8002b78:	9801      	ldr	r0, [sp, #4]
 8002b7a:	9900      	ldr	r1, [sp, #0]
 8002b7c:	f002 fa98 	bl	80050b0 <chThdSuspendTimeoutS>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	b003      	add	sp, #12
 8002b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b8a:	bf00      	nop
 8002b8c:	0000      	movs	r0, r0
	...

08002b90 <osalThreadResumeI.lto_priv.225>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8002b90:	b500      	push	{lr}
 8002b92:	b083      	sub	sp, #12
 8002b94:	9001      	str	r0, [sp, #4]
 8002b96:	9100      	str	r1, [sp, #0]

  chThdResumeI(trp, msg);
 8002b98:	9801      	ldr	r0, [sp, #4]
 8002b9a:	9900      	ldr	r1, [sp, #0]
 8002b9c:	f002 fab0 	bl	8005100 <chThdResumeI>
}
 8002ba0:	b003      	add	sp, #12
 8002ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ba6:	bf00      	nop
	...

08002bb0 <i2cInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void i2cInit(void) {
 8002bb0:	b508      	push	{r3, lr}

  i2c_lld_init();
 8002bb2:	f7fe fe05 	bl	80017c0 <i2c_lld_init>
}
 8002bb6:	bd08      	pop	{r3, pc}
	...

08002bc0 <i2cObjectInit>:
 *
 * @param[out] i2cp     pointer to the @p I2CDriver object
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {
 8002bc0:	b500      	push	{lr}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	9001      	str	r0, [sp, #4]

  i2cp->state  = I2C_STOP;
 8002bc6:	9b01      	ldr	r3, [sp, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
  i2cp->config = NULL;
 8002bcc:	9b01      	ldr	r3, [sp, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]

#if I2C_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&i2cp->mutex);
 8002bd2:	9b01      	ldr	r3, [sp, #4]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 f89a 	bl	8003d10 <osalMutexObjectInit.lto_priv.279>
#endif

#if defined(I2C_DRIVER_EXT_INIT_HOOK)
  I2C_DRIVER_EXT_INIT_HOOK(i2cp);
#endif
}
 8002bdc:	b003      	add	sp, #12
 8002bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8002be2:	bf00      	nop
	...

08002bf0 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 8002bf0:	b500      	push	{lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	9001      	str	r0, [sp, #4]
 8002bf6:	9100      	str	r1, [sp, #0]

  osalDbgCheck((i2cp != NULL) && (config != NULL));
 8002bf8:	9b01      	ldr	r3, [sp, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <i2cStart+0x14>
 8002bfe:	9b00      	ldr	r3, [sp, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <i2cStart+0x1a>
 8002c04:	4810      	ldr	r0, [pc, #64]	; (8002c48 <i2cStart+0x58>)
 8002c06:	f001 fbf3 	bl	80043f0 <chSysHalt>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8002c0a:	9b01      	ldr	r3, [sp, #4]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d00a      	beq.n	8002c28 <i2cStart+0x38>
 8002c12:	9b01      	ldr	r3, [sp, #4]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d006      	beq.n	8002c28 <i2cStart+0x38>
 8002c1a:	9b01      	ldr	r3, [sp, #4]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d002      	beq.n	8002c28 <i2cStart+0x38>
 8002c22:	4809      	ldr	r0, [pc, #36]	; (8002c48 <i2cStart+0x58>)
 8002c24:	f001 fbe4 	bl	80043f0 <chSysHalt>
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
 8002c28:	f001 f862 	bl	8003cf0 <osalSysLock.lto_priv.270>
  i2cp->config = config;
 8002c2c:	9b01      	ldr	r3, [sp, #4]
 8002c2e:	9a00      	ldr	r2, [sp, #0]
 8002c30:	605a      	str	r2, [r3, #4]
  i2c_lld_start(i2cp);
 8002c32:	9801      	ldr	r0, [sp, #4]
 8002c34:	f7fe fde4 	bl	8001800 <i2c_lld_start>
  i2cp->state = I2C_READY;
 8002c38:	9b01      	ldr	r3, [sp, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
 8002c3e:	f001 f85f 	bl	8003d00 <osalSysUnlock.lto_priv.268>
}
 8002c42:	b003      	add	sp, #12
 8002c44:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c48:	08005c90 	.word	0x08005c90
 8002c4c:	00000000 	.word	0x00000000

08002c50 <i2cGetErrors>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @return              The errors mask.
 *
 * @api
 */
i2cflags_t i2cGetErrors(I2CDriver *i2cp) {
 8002c50:	b500      	push	{lr}
 8002c52:	b083      	sub	sp, #12
 8002c54:	9001      	str	r0, [sp, #4]

  osalDbgCheck(i2cp != NULL);
 8002c56:	9b01      	ldr	r3, [sp, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <i2cGetErrors+0x12>
 8002c5c:	4804      	ldr	r0, [pc, #16]	; (8002c70 <i2cGetErrors+0x20>)
 8002c5e:	f001 fbc7 	bl	80043f0 <chSysHalt>

  return i2c_lld_get_errors(i2cp);
 8002c62:	9b01      	ldr	r3, [sp, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	b003      	add	sp, #12
 8002c6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c6e:	bf00      	nop
 8002c70:	08005cb0 	.word	0x08005cb0
	...

08002c80 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               systime_t timeout) {
 8002c80:	b500      	push	{lr}
 8002c82:	b08b      	sub	sp, #44	; 0x2c
 8002c84:	9007      	str	r0, [sp, #28]
 8002c86:	9205      	str	r2, [sp, #20]
 8002c88:	9304      	str	r3, [sp, #16]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	f8ad 301a 	strh.w	r3, [sp, #26]
  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 8002c90:	9b07      	ldr	r3, [sp, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d015      	beq.n	8002cc2 <i2cMasterTransmitTimeout+0x42>
 8002c96:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d011      	beq.n	8002cc2 <i2cMasterTransmitTimeout+0x42>
 8002c9e:	9b04      	ldr	r3, [sp, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <i2cMasterTransmitTimeout+0x42>
 8002ca4:	9b05      	ldr	r3, [sp, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <i2cMasterTransmitTimeout+0x42>
 8002caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <i2cMasterTransmitTimeout+0x3c>
 8002cb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <i2cMasterTransmitTimeout+0x42>
 8002cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <i2cMasterTransmitTimeout+0x42>
 8002cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <i2cMasterTransmitTimeout+0x48>
 8002cc2:	4819      	ldr	r0, [pc, #100]	; (8002d28 <i2cMasterTransmitTimeout+0xa8>)
 8002cc4:	f001 fb94 	bl	80043f0 <chSysHalt>
               (txbytes > 0U) && (txbuf != NULL) &&
               ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8002cc8:	9b07      	ldr	r3, [sp, #28]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d002      	beq.n	8002cd6 <i2cMasterTransmitTimeout+0x56>
 8002cd0:	4815      	ldr	r0, [pc, #84]	; (8002d28 <i2cMasterTransmitTimeout+0xa8>)
 8002cd2:	f001 fb8d 	bl	80043f0 <chSysHalt>

  osalSysLock();
 8002cd6:	f001 f80b 	bl	8003cf0 <osalSysLock.lto_priv.270>
  i2cp->errors = I2C_NO_ERROR;
 8002cda:	9b07      	ldr	r3, [sp, #28]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8002ce0:	9b07      	ldr	r3, [sp, #28]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	701a      	strb	r2, [r3, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002ce6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8002cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	9807      	ldr	r0, [sp, #28]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	9a05      	ldr	r2, [sp, #20]
 8002cfc:	9b04      	ldr	r3, [sp, #16]
 8002cfe:	f7fe fe87 	bl	8001a10 <i2c_lld_master_transmit_timeout>
 8002d02:	9009      	str	r0, [sp, #36]	; 0x24
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8002d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d0a:	d103      	bne.n	8002d14 <i2cMasterTransmitTimeout+0x94>
    i2cp->state = I2C_LOCKED;
 8002d0c:	9b07      	ldr	r3, [sp, #28]
 8002d0e:	2205      	movs	r2, #5
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e002      	b.n	8002d1a <i2cMasterTransmitTimeout+0x9a>
  }
  else {
    i2cp->state = I2C_READY;
 8002d14:	9b07      	ldr	r3, [sp, #28]
 8002d16:	2202      	movs	r2, #2
 8002d18:	701a      	strb	r2, [r3, #0]
  }
  osalSysUnlock();
 8002d1a:	f000 fff1 	bl	8003d00 <osalSysUnlock.lto_priv.268>
  return rdymsg;
 8002d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	b00b      	add	sp, #44	; 0x2c
 8002d24:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d28:	08005cc0 	.word	0x08005cc0
 8002d2c:	00000000 	.word	0x00000000

08002d30 <i2cMasterReceiveTimeout>:
 */
msg_t i2cMasterReceiveTimeout(I2CDriver *i2cp,
                              i2caddr_t addr,
                              uint8_t *rxbuf,
                              size_t rxbytes,
                              systime_t timeout){
 8002d30:	b500      	push	{lr}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	9005      	str	r0, [sp, #20]
 8002d36:	9203      	str	r2, [sp, #12]
 8002d38:	9302      	str	r3, [sp, #8]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	f8ad 3012 	strh.w	r3, [sp, #18]

  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 8002d40:	9b05      	ldr	r3, [sp, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00c      	beq.n	8002d60 <i2cMasterReceiveTimeout+0x30>
 8002d46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <i2cMasterReceiveTimeout+0x30>
 8002d4e:	9b02      	ldr	r3, [sp, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <i2cMasterReceiveTimeout+0x30>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <i2cMasterReceiveTimeout+0x30>
 8002d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <i2cMasterReceiveTimeout+0x36>
 8002d60:	4817      	ldr	r0, [pc, #92]	; (8002dc0 <i2cMasterReceiveTimeout+0x90>)
 8002d62:	f001 fb45 	bl	80043f0 <chSysHalt>
               (rxbytes > 0U) && (rxbuf != NULL) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8002d66:	9b05      	ldr	r3, [sp, #20]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d002      	beq.n	8002d74 <i2cMasterReceiveTimeout+0x44>
 8002d6e:	4814      	ldr	r0, [pc, #80]	; (8002dc0 <i2cMasterReceiveTimeout+0x90>)
 8002d70:	f001 fb3e 	bl	80043f0 <chSysHalt>

  osalSysLock();
 8002d74:	f000 ffbc 	bl	8003cf0 <osalSysLock.lto_priv.270>
  i2cp->errors = I2C_NO_ERROR;
 8002d78:	9b05      	ldr	r3, [sp, #20]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  i2cp->state = I2C_ACTIVE_RX;
 8002d7e:	9b05      	ldr	r3, [sp, #20]
 8002d80:	2204      	movs	r2, #4
 8002d82:	701a      	strb	r2, [r3, #0]
  rdymsg = i2c_lld_master_receive_timeout(i2cp, addr, rxbuf, rxbytes, timeout);
 8002d84:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8002d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	9805      	ldr	r0, [sp, #20]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	9a03      	ldr	r2, [sp, #12]
 8002d92:	9b02      	ldr	r3, [sp, #8]
 8002d94:	f7fe fdcc 	bl	8001930 <i2c_lld_master_receive_timeout>
 8002d98:	9007      	str	r0, [sp, #28]
  if (rdymsg == MSG_TIMEOUT) {
 8002d9a:	9b07      	ldr	r3, [sp, #28]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da0:	d103      	bne.n	8002daa <i2cMasterReceiveTimeout+0x7a>
    i2cp->state = I2C_LOCKED;
 8002da2:	9b05      	ldr	r3, [sp, #20]
 8002da4:	2205      	movs	r2, #5
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e002      	b.n	8002db0 <i2cMasterReceiveTimeout+0x80>
  }
  else {
    i2cp->state = I2C_READY;
 8002daa:	9b05      	ldr	r3, [sp, #20]
 8002dac:	2202      	movs	r2, #2
 8002dae:	701a      	strb	r2, [r3, #0]
  }
  osalSysUnlock();
 8002db0:	f000 ffa6 	bl	8003d00 <osalSysUnlock.lto_priv.268>
  return rdymsg;
 8002db4:	9b07      	ldr	r3, [sp, #28]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	b009      	add	sp, #36	; 0x24
 8002dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dbe:	bf00      	nop
 8002dc0:	08005ce0 	.word	0x08005ce0
	...

08002dd0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	9b01      	ldr	r3, [sp, #4]
 8002dd8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8002ddc:	b002      	add	sp, #8
 8002dde:	4770      	bx	lr

08002de0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8002de0:	b082      	sub	sp, #8
 8002de2:	2300      	movs	r3, #0
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	9b01      	ldr	r3, [sp, #4]
 8002de8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8002dec:	b002      	add	sp, #8
 8002dee:	4770      	bx	lr

08002df0 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8002df0:	b508      	push	{r3, lr}

  port_lock();
 8002df2:	f7ff ffed 	bl	8002dd0 <port_lock>
  _stats_start_measure_crit_thd();
 8002df6:	f002 facb 	bl	8005390 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002dfa:	f001 fb61 	bl	80044c0 <_dbg_check_lock>
}
 8002dfe:	bd08      	pop	{r3, pc}

08002e00 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8002e00:	b508      	push	{r3, lr}

  _dbg_check_unlock();
 8002e02:	f001 fb75 	bl	80044f0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002e06:	f002 facb 	bl	80053a0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <chSysUnlock+0x30>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <chSysUnlock+0x30>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00a      	beq.n	8002e2a <chSysUnlock+0x2a>
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <chSysUnlock+0x30>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <chSysUnlock+0x30>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d202      	bcs.n	8002e2a <chSysUnlock+0x2a>
 8002e24:	4803      	ldr	r0, [pc, #12]	; (8002e34 <chSysUnlock+0x34>)
 8002e26:	f001 fae3 	bl	80043f0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  port_unlock();
 8002e2a:	f7ff ffd9 	bl	8002de0 <port_unlock>
}
 8002e2e:	bd08      	pop	{r3, pc}
 8002e30:	20000800 	.word	0x20000800
 8002e34:	08005d80 	.word	0x08005d80
	...

08002e40 <osalSysLock.lto_priv.271>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8002e40:	b508      	push	{r3, lr}

  chSysLock();
 8002e42:	f7ff ffd5 	bl	8002df0 <chSysLock>
}
 8002e46:	bd08      	pop	{r3, pc}
	...

08002e50 <osalSysUnlock.lto_priv.269>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8002e50:	b508      	push	{r3, lr}

  chSysUnlock();
 8002e52:	f7ff ffd5 	bl	8002e00 <chSysUnlock>
}
 8002e56:	bd08      	pop	{r3, pc}
	...

08002e60 <osalThreadSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
static inline void osalThreadSleep(systime_t time) {
 8002e60:	b500      	push	{lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	9001      	str	r0, [sp, #4]

  chThdSleep(time);
 8002e66:	9801      	ldr	r0, [sp, #4]
 8002e68:	f002 f8a2 	bl	8004fb0 <chThdSleep>
}
 8002e6c:	b003      	add	sp, #12
 8002e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e72:	bf00      	nop
	...

08002e80 <mode_detect>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mode_detect(SDCDriver *sdcp) {
 8002e80:	b500      	push	{lr}
 8002e82:	b085      	sub	sp, #20
 8002e84:	9001      	str	r0, [sp, #4]
  uint32_t resp[1];

  /* V2.0 cards detection.*/
  if (!sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_IF_COND,
 8002e86:	ab03      	add	r3, sp, #12
 8002e88:	9801      	ldr	r0, [sp, #4]
 8002e8a:	2108      	movs	r1, #8
 8002e8c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002e90:	f7fd fed6 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f083 0301 	eor.w	r3, r3, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01a      	beq.n	8002ed6 <mode_detect+0x56>
                                  MMCSD_CMD8_PATTERN, resp)) {
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 8002ea0:	9b01      	ldr	r3, [sp, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Voltage verification.*/
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8002ea6:	9b03      	ldr	r3, [sp, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <mode_detect+0x36>
      return HAL_FAILED;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e02a      	b.n	8002f0c <mode_detect+0x8c>
    }
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002eb6:	ab03      	add	r3, sp, #12
 8002eb8:	9801      	ldr	r0, [sp, #4]
 8002eba:	2137      	movs	r1, #55	; 0x37
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f7fd febf 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <mode_detect+0x52>
        MMCSD_R1_ERROR(resp[0])) {
 8002ec8:	9a03      	ldr	r2, [sp, #12]
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <mode_detect+0x94>)
 8002ecc:	4013      	ands	r3, r2
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
    /* Voltage verification.*/
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
      return HAL_FAILED;
    }
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01b      	beq.n	8002f0a <mode_detect+0x8a>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e01a      	b.n	8002f0c <mode_detect+0x8c>
    }
  }
  else {
    /* MMC or SD V1.1 detection.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002ed6:	ab03      	add	r3, sp, #12
 8002ed8:	9801      	ldr	r0, [sp, #4]
 8002eda:	2137      	movs	r1, #55	; 0x37
 8002edc:	2200      	movs	r2, #0
 8002ede:	f7fd feaf 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <mode_detect+0x72>
        MMCSD_R1_ERROR(resp[0])) {
 8002ee8:	9a03      	ldr	r2, [sp, #12]
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <mode_detect+0x94>)
 8002eec:	4013      	ands	r3, r2
      return HAL_FAILED;
    }
  }
  else {
    /* MMC or SD V1.1 detection.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <mode_detect+0x7a>
        MMCSD_R1_ERROR(resp[0])) {
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 8002ef2:	9b01      	ldr	r3, [sp, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef8:	e007      	b.n	8002f0a <mode_detect+0x8a>
    }
    else {
      sdcp->cardmode = SDC_MODE_CARDTYPE_SDV11;
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
    
      /* Reset error flag illegal command.*/
      sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 8002f00:	9801      	ldr	r0, [sp, #4]
 8002f02:	2100      	movs	r1, #0
 8002f04:	2200      	movs	r2, #0
 8002f06:	f7fd fe3b 	bl	8000b80 <sdc_lld_send_cmd_none>
    }
  }

  return HAL_SUCCESS;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	b005      	add	sp, #20
 8002f10:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f14:	fdffe008 	.word	0xfdffe008
	...

08002f20 <mmc_init>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mmc_init(SDCDriver *sdcp) {
 8002f20:	b500      	push	{lr}
 8002f22:	b087      	sub	sp, #28
 8002f24:	9001      	str	r0, [sp, #4]
  uint32_t ocr;
  unsigned i;
  uint32_t resp[1];

  ocr = 0xC0FF8000U;
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <mmc_init+0x64>)
 8002f28:	9304      	str	r3, [sp, #16]
  i = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9305      	str	r3, [sp, #20]
  while (true) {
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_INIT, ocr, resp)) {
 8002f2e:	ab03      	add	r3, sp, #12
 8002f30:	9801      	ldr	r0, [sp, #4]
 8002f32:	2101      	movs	r1, #1
 8002f34:	9a04      	ldr	r2, [sp, #16]
 8002f36:	f7fd fe43 	bl	8000bc0 <sdc_lld_send_cmd_short>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <mmc_init+0x24>
      return HAL_FAILED;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e01b      	b.n	8002f7c <mmc_init+0x5c>
    }
    if ((resp[0] & 0x80000000U) != 0U) {
 8002f44:	9b03      	ldr	r3, [sp, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	da0b      	bge.n	8002f62 <mmc_init+0x42>
      if ((resp[0] & 0x40000000U) != 0U) {
 8002f4a:	9b03      	ldr	r3, [sp, #12]
 8002f4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d012      	beq.n	8002f7a <mmc_init+0x5a>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8002f54:	9b01      	ldr	r3, [sp, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f043 0210 	orr.w	r2, r3, #16
 8002f5c:	9b01      	ldr	r3, [sp, #4]
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f60:	e00b      	b.n	8002f7a <mmc_init+0x5a>
      }
      break;
    }
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8002f62:	9b05      	ldr	r3, [sp, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	9305      	str	r3, [sp, #20]
 8002f68:	9b05      	ldr	r3, [sp, #20]
 8002f6a:	2b63      	cmp	r3, #99	; 0x63
 8002f6c:	d901      	bls.n	8002f72 <mmc_init+0x52>
      return HAL_FAILED;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e004      	b.n	8002f7c <mmc_init+0x5c>
    }
    osalThreadSleepMilliseconds(10);
 8002f72:	2064      	movs	r0, #100	; 0x64
 8002f74:	f7ff ff74 	bl	8002e60 <osalThreadSleep>
 8002f78:	e7d9      	b.n	8002f2e <mmc_init+0xe>
  }

  return HAL_SUCCESS;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	b007      	add	sp, #28
 8002f80:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f84:	c0ff8000 	.word	0xc0ff8000
	...

08002f90 <sdc_init>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_init(SDCDriver *sdcp) {
 8002f90:	b500      	push	{lr}
 8002f92:	b087      	sub	sp, #28
 8002f94:	9001      	str	r0, [sp, #4]
  unsigned i;
  uint32_t ocr;
  uint32_t resp[1];

  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_SDV20) {
 8002f96:	9b01      	ldr	r3, [sp, #4]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d102      	bne.n	8002fa8 <sdc_init+0x18>
    ocr = SDC_INIT_OCR_V20;
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <sdc_init+0x98>)
 8002fa4:	9304      	str	r3, [sp, #16]
 8002fa6:	e001      	b.n	8002fac <sdc_init+0x1c>
  }
  else {
    ocr = SDC_INIT_OCR;
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <sdc_init+0x9c>)
 8002faa:	9304      	str	r3, [sp, #16]
  }

  i = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	9305      	str	r3, [sp, #20]
  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002fb0:	ab03      	add	r3, sp, #12
 8002fb2:	9801      	ldr	r0, [sp, #4]
 8002fb4:	2137      	movs	r1, #55	; 0x37
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f7fd fe42 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <sdc_init+0x3c>
        MMCSD_R1_ERROR(resp[0])) {
 8002fc2:	9a03      	ldr	r2, [sp, #12]
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <sdc_init+0xa0>)
 8002fc6:	4013      	ands	r3, r2
    ocr = SDC_INIT_OCR;
  }

  i = 0;
  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <sdc_init+0x40>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e026      	b.n	800301e <sdc_init+0x8e>
    }
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_APP_OP_COND, ocr, resp)) {
 8002fd0:	ab03      	add	r3, sp, #12
 8002fd2:	9801      	ldr	r0, [sp, #4]
 8002fd4:	2129      	movs	r1, #41	; 0x29
 8002fd6:	9a04      	ldr	r2, [sp, #16]
 8002fd8:	f7fd fdf2 	bl	8000bc0 <sdc_lld_send_cmd_short>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <sdc_init+0x56>
      return HAL_FAILED;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e01b      	b.n	800301e <sdc_init+0x8e>
    }
    if ((resp[0] & 0x80000000U) != 0U) {
 8002fe6:	9b03      	ldr	r3, [sp, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da0b      	bge.n	8003004 <sdc_init+0x74>
      if ((resp[0] & 0x40000000U) != 0U) {
 8002fec:	9b03      	ldr	r3, [sp, #12]
 8002fee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d012      	beq.n	800301c <sdc_init+0x8c>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8002ff6:	9b01      	ldr	r3, [sp, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f043 0210 	orr.w	r2, r3, #16
 8002ffe:	9b01      	ldr	r3, [sp, #4]
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
 8003002:	e00b      	b.n	800301c <sdc_init+0x8c>
      }
      break;
    }
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8003004:	9b05      	ldr	r3, [sp, #20]
 8003006:	3301      	adds	r3, #1
 8003008:	9305      	str	r3, [sp, #20]
 800300a:	9b05      	ldr	r3, [sp, #20]
 800300c:	2b63      	cmp	r3, #99	; 0x63
 800300e:	d901      	bls.n	8003014 <sdc_init+0x84>
      return HAL_FAILED;
 8003010:	2301      	movs	r3, #1
 8003012:	e004      	b.n	800301e <sdc_init+0x8e>
    }
    osalThreadSleepMilliseconds(10);
 8003014:	2064      	movs	r0, #100	; 0x64
 8003016:	f7ff ff23 	bl	8002e60 <osalThreadSleep>
 800301a:	e7c9      	b.n	8002fb0 <sdc_init+0x20>
  }

  return HAL_SUCCESS;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	b007      	add	sp, #28
 8003022:	f85d fb04 	ldr.w	pc, [sp], #4
 8003026:	bf00      	nop
 8003028:	50ff8000 	.word	0x50ff8000
 800302c:	80100000 	.word	0x80100000
 8003030:	fdffe008 	.word	0xfdffe008
	...

08003040 <mmc_cmd6_construct>:
 * @return              CMD6 argument.
 *
 * @notapi
 */
static uint32_t mmc_cmd6_construct(mmc_switch_t access, uint32_t idx,
                                   uint32_t value, uint32_t cmd_set) {
 8003040:	b500      	push	{lr}
 8003042:	b085      	sub	sp, #20
 8003044:	9102      	str	r1, [sp, #8]
 8003046:	9201      	str	r2, [sp, #4]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	4603      	mov	r3, r0
 800304c:	f88d 300f 	strb.w	r3, [sp, #15]

  osalDbgAssert(idx <= 191U, "This field is not writable");
 8003050:	9b02      	ldr	r3, [sp, #8]
 8003052:	2bbf      	cmp	r3, #191	; 0xbf
 8003054:	d902      	bls.n	800305c <mmc_cmd6_construct+0x1c>
 8003056:	480c      	ldr	r0, [pc, #48]	; (8003088 <mmc_cmd6_construct+0x48>)
 8003058:	f001 f9ca 	bl	80043f0 <chSysHalt>
  osalDbgAssert(cmd_set < 8U, "This field has only 3 bits");
 800305c:	9b00      	ldr	r3, [sp, #0]
 800305e:	2b07      	cmp	r3, #7
 8003060:	d902      	bls.n	8003068 <mmc_cmd6_construct+0x28>
 8003062:	4809      	ldr	r0, [pc, #36]	; (8003088 <mmc_cmd6_construct+0x48>)
 8003064:	f001 f9c4 	bl	80043f0 <chSysHalt>

  return ((uint32_t)access << 24U) | (idx << 16U) | (value << 8U) | cmd_set;
 8003068:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800306c:	061a      	lsls	r2, r3, #24
 800306e:	9b02      	ldr	r3, [sp, #8]
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	431a      	orrs	r2, r3
 8003074:	9b01      	ldr	r3, [sp, #4]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	431a      	orrs	r2, r3
 800307a:	9b00      	ldr	r3, [sp, #0]
 800307c:	4313      	orrs	r3, r2
}
 800307e:	4618      	mov	r0, r3
 8003080:	b005      	add	sp, #20
 8003082:	f85d fb04 	ldr.w	pc, [sp], #4
 8003086:	bf00      	nop
 8003088:	08005d20 	.word	0x08005d20
 800308c:	00000000 	.word	0x00000000

08003090 <sdc_cmd6_construct>:
 *
 * @notapi
 */
static uint32_t sdc_cmd6_construct(sd_switch_t mode,
                                   sd_switch_function_t function,
                                   uint32_t value) {
 8003090:	b500      	push	{lr}
 8003092:	b085      	sub	sp, #20
 8003094:	4603      	mov	r3, r0
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	f88d 3007 	strb.w	r3, [sp, #7]
 800309c:	460b      	mov	r3, r1
 800309e:	f88d 3006 	strb.w	r3, [sp, #6]
  uint32_t ret = 0xFFFFFF;
 80030a2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80030a6:	9303      	str	r3, [sp, #12]

  osalDbgAssert((value < 16U), "This field has only 4 bits");
 80030a8:	9b00      	ldr	r3, [sp, #0]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	d902      	bls.n	80030b4 <sdc_cmd6_construct+0x24>
 80030ae:	480f      	ldr	r0, [pc, #60]	; (80030ec <sdc_cmd6_construct+0x5c>)
 80030b0:	f001 f99e 	bl	80043f0 <chSysHalt>

  ret &= ~((uint32_t)0xFU << ((uint32_t)function * 4U));
 80030b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	461a      	mov	r2, r3
 80030bc:	230f      	movs	r3, #15
 80030be:	4093      	lsls	r3, r2
 80030c0:	43db      	mvns	r3, r3
 80030c2:	9a03      	ldr	r2, [sp, #12]
 80030c4:	4013      	ands	r3, r2
 80030c6:	9303      	str	r3, [sp, #12]
  ret |= value << ((uint32_t)function * 4U);
 80030c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	461a      	mov	r2, r3
 80030d0:	9b00      	ldr	r3, [sp, #0]
 80030d2:	4093      	lsls	r3, r2
 80030d4:	9a03      	ldr	r2, [sp, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	9303      	str	r3, [sp, #12]
  return ret | ((uint32_t)mode << 31U);
 80030da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030de:	07da      	lsls	r2, r3, #31
 80030e0:	9b03      	ldr	r3, [sp, #12]
 80030e2:	4313      	orrs	r3, r2
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	b005      	add	sp, #20
 80030e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80030ec:	08005d40 	.word	0x08005d40

080030f0 <sdc_cmd6_extract_info>:
 * @return              extracted answer.
 *
 * @notapi
 */
static uint16_t sdc_cmd6_extract_info(sd_switch_function_t function,
                                      const uint8_t *buf) {
 80030f0:	b084      	sub	sp, #16
 80030f2:	4603      	mov	r3, r0
 80030f4:	9100      	str	r1, [sp, #0]
 80030f6:	f88d 3007 	strb.w	r3, [sp, #7]

  unsigned start = 12U - ((unsigned)function * 2U);
 80030fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80030fe:	4613      	mov	r3, r2
 8003100:	07db      	lsls	r3, r3, #31
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	330c      	adds	r3, #12
 8003108:	9303      	str	r3, [sp, #12]

  return ((uint16_t)buf[start] << 8U) | (uint16_t)buf[start + 1U];
 800310a:	9a00      	ldr	r2, [sp, #0]
 800310c:	9b03      	ldr	r3, [sp, #12]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	b299      	uxth	r1, r3
 8003116:	9b03      	ldr	r3, [sp, #12]
 8003118:	3301      	adds	r3, #1
 800311a:	9a00      	ldr	r2, [sp, #0]
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	460a      	mov	r2, r1
 8003124:	4313      	orrs	r3, r2
 8003126:	b29b      	uxth	r3, r3
 8003128:	b29b      	uxth	r3, r3
}
 800312a:	4618      	mov	r0, r3
 800312c:	b004      	add	sp, #16
 800312e:	4770      	bx	lr

08003130 <sdc_cmd6_check_status>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_cmd6_check_status(sd_switch_function_t function,
                                 const uint8_t *buf) {
 8003130:	b084      	sub	sp, #16
 8003132:	4603      	mov	r3, r0
 8003134:	9100      	str	r1, [sp, #0]
 8003136:	f88d 3007 	strb.w	r3, [sp, #7]

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 800313a:	9b00      	ldr	r3, [sp, #0]
 800313c:	330e      	adds	r3, #14
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	041a      	lsls	r2, r3, #16
        ((uint32_t)buf[15] << 8U) |
 8003142:	9b00      	ldr	r3, [sp, #0]
 8003144:	330f      	adds	r3, #15
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	021b      	lsls	r3, r3, #8
                                 const uint8_t *buf) {

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 800314a:	4313      	orrs	r3, r2
        ((uint32_t)buf[15] << 8U) |
        (uint32_t)buf[16];
 800314c:	9a00      	ldr	r2, [sp, #0]
 800314e:	3210      	adds	r2, #16
 8003150:	7812      	ldrb	r2, [r2, #0]
                                 const uint8_t *buf) {

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 8003152:	4313      	orrs	r3, r2
 8003154:	9303      	str	r3, [sp, #12]
        ((uint32_t)buf[15] << 8U) |
        (uint32_t)buf[16];
  status = (tmp >> ((uint32_t)function * 4U)) & 0xFU;
 8003156:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	461a      	mov	r2, r3
 800315e:	9b03      	ldr	r3, [sp, #12]
 8003160:	40d3      	lsrs	r3, r2
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	9302      	str	r3, [sp, #8]
  if (0xFU != status) {
 8003168:	9b02      	ldr	r3, [sp, #8]
 800316a:	2b0f      	cmp	r3, #15
 800316c:	d001      	beq.n	8003172 <sdc_cmd6_check_status+0x42>
    return HAL_SUCCESS;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <sdc_cmd6_check_status+0x44>
  }
  return HAL_FAILED;
 8003172:	2301      	movs	r3, #1
}
 8003174:	4618      	mov	r0, r3
 8003176:	b004      	add	sp, #16
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	0000      	movs	r0, r0
	...

08003180 <sdc_detect_bus_clk>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 8003180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af02      	add	r7, sp, #8
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	4669      	mov	r1, sp
 800318c:	460e      	mov	r6, r1
  uint32_t cmdarg;
  const size_t N = 64;
 800318e:	2140      	movs	r1, #64	; 0x40
 8003190:	6179      	str	r1, [r7, #20]
  uint8_t tmp[N];
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	3901      	subs	r1, #1
 8003196:	6139      	str	r1, [r7, #16]
 8003198:	6979      	ldr	r1, [r7, #20]
 800319a:	4608      	mov	r0, r1
 800319c:	f04f 0100 	mov.w	r1, #0
 80031a0:	00cd      	lsls	r5, r1, #3
 80031a2:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 80031a6:	00c4      	lsls	r4, r0, #3
 80031a8:	6979      	ldr	r1, [r7, #20]
 80031aa:	4608      	mov	r0, r1
 80031ac:	f04f 0100 	mov.w	r1, #0
 80031b0:	00cb      	lsls	r3, r1, #3
 80031b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80031b6:	00c2      	lsls	r2, r0, #3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3307      	adds	r3, #7
 80031bc:	08db      	lsrs	r3, r3, #3
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	ebad 0d03 	sub.w	sp, sp, r3
 80031c4:	ab02      	add	r3, sp, #8
 80031c6:	3300      	adds	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Safe default.*/
  *clk = SDC_CLK_25MHz;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]

  /* Looks like only "high capacity" cards produce meaningful results during
     this clock detection procedure.*/
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3318      	adds	r3, #24
 80031d4:	4618      	mov	r0, r3
 80031d6:	217f      	movs	r1, #127	; 0x7f
 80031d8:	227e      	movs	r2, #126	; 0x7e
 80031da:	f000 fef1 	bl	8003fc0 <_mmcsd_get_slice>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <sdc_detect_bus_clk+0x6e>
    *clk = SDC_CLK_25MHz;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
    return HAL_SUCCESS;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e03e      	b.n	800326c <sdc_detect_bus_clk+0xec>
  }

  /* Read switch functions' register.*/
  if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, 0)) {
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	2300      	movs	r3, #0
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4611      	mov	r1, r2
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	2306      	movs	r3, #6
 80031fc:	f7fd fdb0 	bl	8000d60 <sdc_lld_read_special>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <sdc_detect_bus_clk+0x8a>
    return HAL_FAILED;
 8003206:	2301      	movs	r3, #1
 8003208:	e030      	b.n	800326c <sdc_detect_bus_clk+0xec>
  }

  /* Check card capabilities parsing acquired data.*/
  if ((sdc_cmd6_extract_info(SD_SWITCH_FUNCTION_SPEED, tmp) & 2U) == 2U) {
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2000      	movs	r0, #0
 800320e:	4619      	mov	r1, r3
 8003210:	f7ff ff6e 	bl	80030f0 <sdc_cmd6_extract_info>
 8003214:	4603      	mov	r3, r0
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d025      	beq.n	800326a <sdc_detect_bus_clk+0xea>
    /* Construct command to set the bus speed.*/
    cmdarg = sdc_cmd6_construct(SD_SWITCH_SET, SD_SWITCH_FUNCTION_SPEED, 1);
 800321e:	2001      	movs	r0, #1
 8003220:	2100      	movs	r1, #0
 8003222:	2201      	movs	r2, #1
 8003224:	f7ff ff34 	bl	8003090 <sdc_cmd6_construct>
 8003228:	60b8      	str	r0, [r7, #8]

    /* Write constructed command and read operation status in single call.*/
    if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, cmdarg)) {
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4611      	mov	r1, r2
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	2306      	movs	r3, #6
 8003238:	f7fd fd92 	bl	8000d60 <sdc_lld_read_special>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <sdc_detect_bus_clk+0xc6>
      return HAL_FAILED;
 8003242:	2301      	movs	r3, #1
 8003244:	e012      	b.n	800326c <sdc_detect_bus_clk+0xec>
    }

    /* Check card answer for success status bits.*/
    if (HAL_SUCCESS == sdc_cmd6_check_status(SD_SWITCH_FUNCTION_SPEED, tmp)) {
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2000      	movs	r0, #0
 800324a:	4619      	mov	r1, r3
 800324c:	f7ff ff70 	bl	8003130 <sdc_cmd6_check_status>
 8003250:	4603      	mov	r3, r0
 8003252:	f083 0301 	eor.w	r3, r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <sdc_detect_bus_clk+0xe4>
      *clk = SDC_CLK_50MHz;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e002      	b.n	800326a <sdc_detect_bus_clk+0xea>
    }
    else {
      *clk = SDC_CLK_25MHz;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
    }
  }

  return HAL_SUCCESS;
 800326a:	2300      	movs	r3, #0
 800326c:	46b5      	mov	sp, r6
}
 800326e:	4618      	mov	r0, r3
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003276:	bf00      	nop
	...

08003280 <mmc_detect_bus_clk>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mmc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 8003280:	b500      	push	{lr}
 8003282:	b087      	sub	sp, #28
 8003284:	9001      	str	r0, [sp, #4]
 8003286:	9100      	str	r1, [sp, #0]
  uint32_t cmdarg;
  uint32_t resp[1];
  uint8_t *scratchpad = sdcp->config->scratchpad;
 8003288:	9b01      	ldr	r3, [sp, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	9305      	str	r3, [sp, #20]

  /* Safe default.*/
  *clk = SDC_CLK_25MHz;
 8003290:	9b00      	ldr	r3, [sp, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]

  /* Use safe default when there is no space for data.*/
  if (NULL == scratchpad) {
 8003296:	9b05      	ldr	r3, [sp, #20]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <mmc_detect_bus_clk+0x20>
    return HAL_SUCCESS;
 800329c:	2300      	movs	r3, #0
 800329e:	e01b      	b.n	80032d8 <mmc_detect_bus_clk+0x58>
  }

  cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 185, 1, 0);
 80032a0:	2003      	movs	r0, #3
 80032a2:	21b9      	movs	r1, #185	; 0xb9
 80032a4:	2201      	movs	r2, #1
 80032a6:	2300      	movs	r3, #0
 80032a8:	f7ff feca 	bl	8003040 <mmc_cmd6_construct>
 80032ac:	9004      	str	r0, [sp, #16]
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 80032ae:	ab03      	add	r3, sp, #12
 80032b0:	9801      	ldr	r0, [sp, #4]
 80032b2:	2106      	movs	r1, #6
 80032b4:	9a04      	ldr	r2, [sp, #16]
 80032b6:	f7fd fcc3 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f083 0301 	eor.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <mmc_detect_bus_clk+0x56>
                                   MMCSD_R1_ERROR(resp[0]))) {
 80032c6:	9a03      	ldr	r2, [sp, #12]
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <mmc_detect_bus_clk+0x60>)
 80032ca:	4013      	ands	r3, r2
  if (NULL == scratchpad) {
    return HAL_SUCCESS;
  }

  cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 185, 1, 0);
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <mmc_detect_bus_clk+0x56>
                                   MMCSD_R1_ERROR(resp[0]))) {
    *clk = SDC_CLK_50MHz;
 80032d0:	9b00      	ldr	r3, [sp, #0]
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
  }

  return HAL_SUCCESS;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	b007      	add	sp, #28
 80032dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80032e0:	fdffe008 	.word	0xfdffe008
	...

080032f0 <detect_bus_clk>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 80032f0:	b500      	push	{lr}
 80032f2:	b083      	sub	sp, #12
 80032f4:	9001      	str	r0, [sp, #4]
 80032f6:	9100      	str	r1, [sp, #0]

  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 80032f8:	9b01      	ldr	r3, [sp, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	2b02      	cmp	r3, #2
 8003302:	d105      	bne.n	8003310 <detect_bus_clk+0x20>
    return mmc_detect_bus_clk(sdcp, clk);
 8003304:	9801      	ldr	r0, [sp, #4]
 8003306:	9900      	ldr	r1, [sp, #0]
 8003308:	f7ff ffba 	bl	8003280 <mmc_detect_bus_clk>
 800330c:	4603      	mov	r3, r0
 800330e:	e004      	b.n	800331a <detect_bus_clk+0x2a>
  }
  return sdc_detect_bus_clk(sdcp, clk);
 8003310:	9801      	ldr	r0, [sp, #4]
 8003312:	9900      	ldr	r1, [sp, #0]
 8003314:	f7ff ff34 	bl	8003180 <sdc_detect_bus_clk>
 8003318:	4603      	mov	r3, r0
}
 800331a:	4618      	mov	r0, r3
 800331c:	b003      	add	sp, #12
 800331e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003322:	bf00      	nop
	...

08003330 <sdc_set_bus_width>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_set_bus_width(SDCDriver *sdcp) {
 8003330:	b500      	push	{lr}
 8003332:	b085      	sub	sp, #20
 8003334:	9001      	str	r0, [sp, #4]
  uint32_t resp[1];

  if (SDC_MODE_1BIT == sdcp->config->bus_width) {
 8003336:	9b01      	ldr	r3, [sp, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	791b      	ldrb	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <sdc_set_bus_width+0x14>
    /* Nothing to do. Bus is already in 1bit mode.*/
    return HAL_SUCCESS;
 8003340:	2300      	movs	r3, #0
 8003342:	e02c      	b.n	800339e <sdc_set_bus_width+0x6e>
  }
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
 8003344:	9b01      	ldr	r3, [sp, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	791b      	ldrb	r3, [r3, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d124      	bne.n	8003398 <sdc_set_bus_width+0x68>
    sdc_lld_set_bus_mode(sdcp, SDC_MODE_4BIT);
 800334e:	9801      	ldr	r0, [sp, #4]
 8003350:	2101      	movs	r1, #1
 8003352:	f7fd fbed 	bl	8000b30 <sdc_lld_set_bus_mode>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8003356:	9b01      	ldr	r3, [sp, #4]
 8003358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335a:	ab03      	add	r3, sp, #12
 800335c:	9801      	ldr	r0, [sp, #4]
 800335e:	2137      	movs	r1, #55	; 0x37
 8003360:	f7fd fc6e 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d104      	bne.n	8003374 <sdc_set_bus_width+0x44>
        MMCSD_R1_ERROR(resp[0])) {
 800336a:	9a03      	ldr	r2, [sp, #12]
 800336c:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <sdc_set_bus_width+0x78>)
 800336e:	4013      	ands	r3, r2
    /* Nothing to do. Bus is already in 1bit mode.*/
    return HAL_SUCCESS;
  }
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
    sdc_lld_set_bus_mode(sdcp, SDC_MODE_4BIT);
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <sdc_set_bus_width+0x48>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8003374:	2301      	movs	r3, #1
 8003376:	e012      	b.n	800339e <sdc_set_bus_width+0x6e>
    }

    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 8003378:	ab03      	add	r3, sp, #12
 800337a:	9801      	ldr	r0, [sp, #4]
 800337c:	2106      	movs	r1, #6
 800337e:	2202      	movs	r2, #2
 8003380:	f7fd fc5e 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <sdc_set_bus_width+0x64>
        MMCSD_R1_ERROR(resp[0])) {
 800338a:	9a03      	ldr	r2, [sp, #12]
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <sdc_set_bus_width+0x78>)
 800338e:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
    }

    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <sdc_set_bus_width+0x6c>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8003394:	2301      	movs	r3, #1
 8003396:	e002      	b.n	800339e <sdc_set_bus_width+0x6e>
    }
  }
  else {
    /* SD card does not support 8bit bus.*/
    return HAL_FAILED;
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <sdc_set_bus_width+0x6e>
  }

  return HAL_SUCCESS;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	b005      	add	sp, #20
 80033a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033a6:	bf00      	nop
 80033a8:	fdffe008 	.word	0xfdffe008
 80033ac:	00000000 	.word	0x00000000

080033b0 <mmc_set_bus_width>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mmc_set_bus_width(SDCDriver *sdcp) {
 80033b0:	b500      	push	{lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	9001      	str	r0, [sp, #4]
  uint32_t resp[1];
  uint32_t cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 0, 0);
 80033b6:	2003      	movs	r0, #3
 80033b8:	21b7      	movs	r1, #183	; 0xb7
 80033ba:	2200      	movs	r2, #0
 80033bc:	2300      	movs	r3, #0
 80033be:	f7ff fe3f 	bl	8003040 <mmc_cmd6_construct>
 80033c2:	9003      	str	r0, [sp, #12]

  switch(sdcp->config->bus_width){
 80033c4:	9b01      	ldr	r3, [sp, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	791b      	ldrb	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d005      	beq.n	80033da <mmc_set_bus_width+0x2a>
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d00b      	beq.n	80033ea <mmc_set_bus_width+0x3a>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d111      	bne.n	80033fa <mmc_set_bus_width+0x4a>
  case SDC_MODE_1BIT:
    /* Nothing to do. Bus is already in 1bit mode.*/
    return HAL_SUCCESS;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e02a      	b.n	8003430 <mmc_set_bus_width+0x80>
  case SDC_MODE_4BIT:
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 1, 0);
 80033da:	2003      	movs	r0, #3
 80033dc:	21b7      	movs	r1, #183	; 0xb7
 80033de:	2201      	movs	r2, #1
 80033e0:	2300      	movs	r3, #0
 80033e2:	f7ff fe2d 	bl	8003040 <mmc_cmd6_construct>
 80033e6:	9003      	str	r0, [sp, #12]
 80033e8:	e00a      	b.n	8003400 <mmc_set_bus_width+0x50>
    break;
  case SDC_MODE_8BIT:
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 2, 0);
 80033ea:	2003      	movs	r0, #3
 80033ec:	21b7      	movs	r1, #183	; 0xb7
 80033ee:	2202      	movs	r2, #2
 80033f0:	2300      	movs	r3, #0
 80033f2:	f7ff fe25 	bl	8003040 <mmc_cmd6_construct>
 80033f6:	9003      	str	r0, [sp, #12]
 80033f8:	e002      	b.n	8003400 <mmc_set_bus_width+0x50>
    break;
  default:
    osalDbgAssert(false, "unexpected case");
 80033fa:	480f      	ldr	r0, [pc, #60]	; (8003438 <mmc_set_bus_width+0x88>)
 80033fc:	f000 fff8 	bl	80043f0 <chSysHalt>
    break;
  }

  sdc_lld_set_bus_mode(sdcp, sdcp->config->bus_width);
 8003400:	9b01      	ldr	r3, [sp, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	791b      	ldrb	r3, [r3, #4]
 8003406:	9801      	ldr	r0, [sp, #4]
 8003408:	4619      	mov	r1, r3
 800340a:	f7fd fb91 	bl	8000b30 <sdc_lld_set_bus_mode>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 800340e:	ab02      	add	r3, sp, #8
 8003410:	9801      	ldr	r0, [sp, #4]
 8003412:	2106      	movs	r1, #6
 8003414:	9a03      	ldr	r2, [sp, #12]
 8003416:	f7fd fc13 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <mmc_set_bus_width+0x7a>
      MMCSD_R1_ERROR(resp[0])) {
 8003420:	9a02      	ldr	r2, [sp, #8]
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <mmc_set_bus_width+0x8c>)
 8003424:	4013      	ands	r3, r2
    osalDbgAssert(false, "unexpected case");
    break;
  }

  sdc_lld_set_bus_mode(sdcp, sdcp->config->bus_width);
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <mmc_set_bus_width+0x7e>
      MMCSD_R1_ERROR(resp[0])) {
    return HAL_FAILED;
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <mmc_set_bus_width+0x80>
  }

  return HAL_SUCCESS;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	b005      	add	sp, #20
 8003434:	f85d fb04 	ldr.w	pc, [sp], #4
 8003438:	08005d60 	.word	0x08005d60
 800343c:	fdffe008 	.word	0xfdffe008

08003440 <_sdc_wait_for_transfer_state>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 8003440:	b500      	push	{lr}
 8003442:	b085      	sub	sp, #20
 8003444:	9001      	str	r0, [sp, #4]
  uint32_t resp[1];

  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 8003446:	9b01      	ldr	r3, [sp, #4]
 8003448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344a:	ab03      	add	r3, sp, #12
 800344c:	9801      	ldr	r0, [sp, #4]
 800344e:	210d      	movs	r1, #13
 8003450:	f7fd fbf6 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <_sdc_wait_for_transfer_state+0x24>
                                   sdcp->rca, resp) ||
        MMCSD_R1_ERROR(resp[0])) {
 800345a:	9a03      	ldr	r2, [sp, #12]
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <_sdc_wait_for_transfer_state+0x54>)
 800345e:	4013      	ands	r3, r2
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
  uint32_t resp[1];

  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
                                   sdcp->rca, resp) ||
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <_sdc_wait_for_transfer_state+0x28>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8003464:	2301      	movs	r3, #1
 8003466:	e011      	b.n	800348c <_sdc_wait_for_transfer_state+0x4c>
    }

    switch (MMCSD_R1_STS(resp[0])) {
 8003468:	9b03      	ldr	r3, [sp, #12]
 800346a:	0a5b      	lsrs	r3, r3, #9
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	2b04      	cmp	r3, #4
 8003472:	d004      	beq.n	800347e <_sdc_wait_for_transfer_state+0x3e>
 8003474:	2b04      	cmp	r3, #4
 8003476:	d308      	bcc.n	800348a <_sdc_wait_for_transfer_state+0x4a>
 8003478:	2b07      	cmp	r3, #7
 800347a:	d806      	bhi.n	800348a <_sdc_wait_for_transfer_state+0x4a>
 800347c:	e001      	b.n	8003482 <_sdc_wait_for_transfer_state+0x42>
    case MMCSD_STS_TRAN:
      return HAL_SUCCESS;
 800347e:	2300      	movs	r3, #0
 8003480:	e004      	b.n	800348c <_sdc_wait_for_transfer_state+0x4c>
    case MMCSD_STS_DATA:
    case MMCSD_STS_RCV:
    case MMCSD_STS_PRG:
#if SDC_NICE_WAITING == TRUE
      osalThreadSleepMilliseconds(1);
 8003482:	200a      	movs	r0, #10
 8003484:	f7ff fcec 	bl	8002e60 <osalThreadSleep>
 8003488:	e7dd      	b.n	8003446 <_sdc_wait_for_transfer_state+0x6>
#endif
      continue;
    default:
      /* The card should have been initialized so any other state is not
         valid and is reported as an error.*/
      return HAL_FAILED;
 800348a:	2301      	movs	r3, #1
    }
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	b005      	add	sp, #20
 8003490:	f85d fb04 	ldr.w	pc, [sp], #4
 8003494:	fdffe008 	.word	0xfdffe008
	...

080034a0 <sdcInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdcInit(void) {
 80034a0:	b508      	push	{r3, lr}

  sdc_lld_init();
 80034a2:	f7fd faed 	bl	8000a80 <sdc_lld_init>
}
 80034a6:	bd08      	pop	{r3, pc}
	...

080034b0 <sdcObjectInit>:
 *
 * @param[out] sdcp     pointer to the @p SDCDriver object
 *
 * @init
 */
void sdcObjectInit(SDCDriver *sdcp) {
 80034b0:	b082      	sub	sp, #8
 80034b2:	9001      	str	r0, [sp, #4]

  sdcp->vmt      = &sdc_vmt;
 80034b4:	9b01      	ldr	r3, [sp, #4]
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <sdcObjectInit+0x28>)
 80034b8:	601a      	str	r2, [r3, #0]
  sdcp->state    = BLK_STOP;
 80034ba:	9b01      	ldr	r3, [sp, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	711a      	strb	r2, [r3, #4]
  sdcp->errors   = SDC_NO_ERROR;
 80034c0:	9b01      	ldr	r3, [sp, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
  sdcp->config   = NULL;
 80034c6:	9b01      	ldr	r3, [sp, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c
  sdcp->capacity = 0;
 80034cc:	9b01      	ldr	r3, [sp, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d2:	b002      	add	sp, #8
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	08005d00 	.word	0x08005d00
 80034dc:	00000000 	.word	0x00000000

080034e0 <sdcConnect>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcConnect(SDCDriver *sdcp) {
 80034e0:	b500      	push	{lr}
 80034e2:	b089      	sub	sp, #36	; 0x24
 80034e4:	9003      	str	r0, [sp, #12]
  uint32_t resp[1];
  sdcbusclk_t clk = SDC_CLK_25MHz;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f88d 3017 	strb.w	r3, [sp, #23]

  osalDbgCheck(sdcp != NULL);
 80034ec:	9b03      	ldr	r3, [sp, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <sdcConnect+0x18>
 80034f2:	486f      	ldr	r0, [pc, #444]	; (80036b0 <sdcConnect+0x1d0>)
 80034f4:	f000 ff7c 	bl	80043f0 <chSysHalt>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 80034f8:	9b03      	ldr	r3, [sp, #12]
 80034fa:	791b      	ldrb	r3, [r3, #4]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d006      	beq.n	800350e <sdcConnect+0x2e>
 8003500:	9b03      	ldr	r3, [sp, #12]
 8003502:	791b      	ldrb	r3, [r3, #4]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d002      	beq.n	800350e <sdcConnect+0x2e>
 8003508:	4869      	ldr	r0, [pc, #420]	; (80036b0 <sdcConnect+0x1d0>)
 800350a:	f000 ff71 	bl	80043f0 <chSysHalt>
                "invalid state");

  /* Connection procedure in progress.*/
  sdcp->state = BLK_CONNECTING;
 800350e:	9b03      	ldr	r3, [sp, #12]
 8003510:	2203      	movs	r2, #3
 8003512:	711a      	strb	r2, [r3, #4]

  /* Card clock initialization.*/
  sdc_lld_start_clk(sdcp);
 8003514:	9803      	ldr	r0, [sp, #12]
 8003516:	f7fd facb 	bl	8000ab0 <sdc_lld_start_clk>

  /* Enforces the initial card state.*/
  sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 800351a:	9803      	ldr	r0, [sp, #12]
 800351c:	2100      	movs	r1, #0
 800351e:	2200      	movs	r2, #0
 8003520:	f7fd fb2e 	bl	8000b80 <sdc_lld_send_cmd_none>

  /* Detect card type.*/
  if (HAL_FAILED == mode_detect(sdcp)) {
 8003524:	9803      	ldr	r0, [sp, #12]
 8003526:	f7ff fcab 	bl	8002e80 <mode_detect>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	f040 80b4 	bne.w	800369a <sdcConnect+0x1ba>
    goto failed;
  }

  /* Perform specific initialization procedure.*/
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 8003532:	9b03      	ldr	r3, [sp, #12]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	2b02      	cmp	r3, #2
 800353c:	d107      	bne.n	800354e <sdcConnect+0x6e>
    if (HAL_FAILED == mmc_init(sdcp)) {
 800353e:	9803      	ldr	r0, [sp, #12]
 8003540:	f7ff fcee 	bl	8002f20 <mmc_init>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	f040 80a7 	bne.w	800369a <sdcConnect+0x1ba>
 800354c:	e006      	b.n	800355c <sdcConnect+0x7c>
      goto failed;
    }
  }
  else {
    if (HAL_FAILED == sdc_init(sdcp)) {
 800354e:	9803      	ldr	r0, [sp, #12]
 8003550:	f7ff fd1e 	bl	8002f90 <sdc_init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 809f 	bne.w	800369a <sdcConnect+0x1ba>
      goto failed;
    }
  }

  /* Reads CID.*/
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_ALL_SEND_CID, 0, sdcp->cid)) {
 800355c:	9b03      	ldr	r3, [sp, #12]
 800355e:	3308      	adds	r3, #8
 8003560:	9803      	ldr	r0, [sp, #12]
 8003562:	2102      	movs	r1, #2
 8003564:	2200      	movs	r2, #0
 8003566:	f7fd fbab 	bl	8000cc0 <sdc_lld_send_cmd_long_crc>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	f040 8094 	bne.w	800369a <sdcConnect+0x1ba>
    goto failed;
  }

  /* Asks for the RCA.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_RELATIVE_ADDR,
 8003572:	9b03      	ldr	r3, [sp, #12]
 8003574:	3338      	adds	r3, #56	; 0x38
 8003576:	9803      	ldr	r0, [sp, #12]
 8003578:	2103      	movs	r1, #3
 800357a:	2200      	movs	r2, #0
 800357c:	f7fd fb60 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 8089 	bne.w	800369a <sdcConnect+0x1ba>
                                 0, &sdcp->rca)) {
    goto failed;
  }

  /* Reads CSD.*/
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                                sdcp->rca, sdcp->csd)) {
 800358c:	9b03      	ldr	r3, [sp, #12]
 800358e:	3318      	adds	r3, #24
                                 0, &sdcp->rca)) {
    goto failed;
  }

  /* Reads CSD.*/
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 8003590:	9803      	ldr	r0, [sp, #12]
 8003592:	2109      	movs	r1, #9
 8003594:	f7fd fb94 	bl	8000cc0 <sdc_lld_send_cmd_long_crc>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d17d      	bne.n	800369a <sdcConnect+0x1ba>
                                sdcp->rca, sdcp->csd)) {
    goto failed;
  }

  /* Selects the card for operations.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEL_DESEL_CARD,
 800359e:	9b03      	ldr	r3, [sp, #12]
 80035a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a2:	ab06      	add	r3, sp, #24
 80035a4:	9803      	ldr	r0, [sp, #12]
 80035a6:	2107      	movs	r1, #7
 80035a8:	f7fd fb4a 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d173      	bne.n	800369a <sdcConnect+0x1ba>
                                 sdcp->rca, resp)) {
    goto failed;
  }

  /* Switches to high speed.*/
  if (HAL_SUCCESS != detect_bus_clk(sdcp, &clk)) {
 80035b2:	f10d 0317 	add.w	r3, sp, #23
 80035b6:	9803      	ldr	r0, [sp, #12]
 80035b8:	4619      	mov	r1, r3
 80035ba:	f7ff fe99 	bl	80032f0 <detect_bus_clk>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d16a      	bne.n	800369a <sdcConnect+0x1ba>
    goto failed;
  }
  sdc_lld_set_data_clk(sdcp, clk);
 80035c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80035c8:	9803      	ldr	r0, [sp, #12]
 80035ca:	4619      	mov	r1, r3
 80035cc:	f7fd fa90 	bl	8000af0 <sdc_lld_set_data_clk>

  /* Reads extended CSD if needed and possible.*/
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 80035d0:	9b03      	ldr	r3, [sp, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d12c      	bne.n	8003636 <sdcConnect+0x156>

    /* The card is a MMC, checking if it is a large device.*/
    if (_mmcsd_get_slice(sdcp->csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE) > 1U) {
 80035dc:	9b03      	ldr	r3, [sp, #12]
 80035de:	3318      	adds	r3, #24
 80035e0:	4618      	mov	r0, r3
 80035e2:	217f      	movs	r1, #127	; 0x7f
 80035e4:	227e      	movs	r2, #126	; 0x7e
 80035e6:	f000 fceb 	bl	8003fc0 <_mmcsd_get_slice>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d919      	bls.n	8003624 <sdcConnect+0x144>
      uint8_t *ext_csd = sdcp->config->scratchpad;
 80035f0:	9b03      	ldr	r3, [sp, #12]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	9307      	str	r3, [sp, #28]

      /* Size detection requires the buffer.*/
      if (NULL == ext_csd) {
 80035f8:	9b07      	ldr	r3, [sp, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d04d      	beq.n	800369a <sdcConnect+0x1ba>
        goto failed;
      }

      if(sdc_lld_read_special(sdcp, ext_csd, 512, MMCSD_CMD_SEND_EXT_CSD, 0)) {
 80035fe:	2300      	movs	r3, #0
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	9803      	ldr	r0, [sp, #12]
 8003604:	9907      	ldr	r1, [sp, #28]
 8003606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360a:	2308      	movs	r3, #8
 800360c:	f7fd fba8 	bl	8000d60 <sdc_lld_read_special>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d141      	bne.n	800369a <sdcConnect+0x1ba>
        goto failed;
      }

      /* Capacity from the EXT_CSD.*/
      sdcp->capacity = _mmcsd_get_capacity_ext(ext_csd);
 8003616:	9807      	ldr	r0, [sp, #28]
 8003618:	f000 fad2 	bl	8003bc0 <_mmcsd_get_capacity_ext>
 800361c:	4602      	mov	r2, r0
 800361e:	9b03      	ldr	r3, [sp, #12]
 8003620:	629a      	str	r2, [r3, #40]	; 0x28
 8003622:	e010      	b.n	8003646 <sdcConnect+0x166>
    }
    else {
      /* Capacity from the normal CSD.*/
      sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8003624:	9b03      	ldr	r3, [sp, #12]
 8003626:	3318      	adds	r3, #24
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fa89 	bl	8003b40 <_mmcsd_get_capacity>
 800362e:	4602      	mov	r2, r0
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
 8003634:	e007      	b.n	8003646 <sdcConnect+0x166>
    }
  }
  else {
    /* The card is an SDC, capacity from the normal CSD.*/
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8003636:	9b03      	ldr	r3, [sp, #12]
 8003638:	3318      	adds	r3, #24
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fa80 	bl	8003b40 <_mmcsd_get_capacity>
 8003640:	4602      	mov	r2, r0
 8003642:	9b03      	ldr	r3, [sp, #12]
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Block length fixed at 512 bytes.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
 8003646:	ab06      	add	r3, sp, #24
 8003648:	9803      	ldr	r0, [sp, #12]
 800364a:	2110      	movs	r1, #16
 800364c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003650:	f7fd faf6 	bl	8000c40 <sdc_lld_send_cmd_short_crc>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11f      	bne.n	800369a <sdcConnect+0x1ba>
                                 MMCSD_BLOCK_SIZE, resp) ||
      MMCSD_R1_ERROR(resp[0])) {
 800365a:	9a06      	ldr	r2, [sp, #24]
 800365c:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <sdcConnect+0x1d4>)
 800365e:	4013      	ands	r3, r2
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
  }

  /* Block length fixed at 512 bytes.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
                                 MMCSD_BLOCK_SIZE, resp) ||
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11a      	bne.n	800369a <sdcConnect+0x1ba>
      MMCSD_R1_ERROR(resp[0])) {
    goto failed;
  }

  /* Switches to wide bus mode.*/
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8003664:	9b03      	ldr	r3, [sp, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	2b01      	cmp	r3, #1
 800366e:	d902      	bls.n	8003676 <sdcConnect+0x196>
 8003670:	2b02      	cmp	r3, #2
 8003672:	d007      	beq.n	8003684 <sdcConnect+0x1a4>
 8003674:	e011      	b.n	800369a <sdcConnect+0x1ba>
  case SDC_MODE_CARDTYPE_SDV11:
  case SDC_MODE_CARDTYPE_SDV20:
    if (HAL_FAILED == sdc_set_bus_width(sdcp)) {
 8003676:	9803      	ldr	r0, [sp, #12]
 8003678:	f7ff fe5a 	bl	8003330 <sdc_set_bus_width>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10b      	bne.n	800369a <sdcConnect+0x1ba>
 8003682:	e005      	b.n	8003690 <sdcConnect+0x1b0>
      goto failed;
    }
    break;
  case SDC_MODE_CARDTYPE_MMC:
    if (HAL_FAILED == mmc_set_bus_width(sdcp)) {
 8003684:	9803      	ldr	r0, [sp, #12]
 8003686:	f7ff fe93 	bl	80033b0 <mmc_set_bus_width>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <sdcConnect+0x1ba>
    /* Unknown type.*/
    goto failed;
  }

  /* Initialization complete.*/
  sdcp->state = BLK_READY;
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	2205      	movs	r2, #5
 8003694:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 8003696:	2300      	movs	r3, #0
 8003698:	e006      	b.n	80036a8 <sdcConnect+0x1c8>

  /* Connection failed, state reset to BLK_ACTIVE.*/
failed:
  sdc_lld_stop_clk(sdcp);
 800369a:	9803      	ldr	r0, [sp, #12]
 800369c:	f7fd fa38 	bl	8000b10 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 80036a0:	9b03      	ldr	r3, [sp, #12]
 80036a2:	2202      	movs	r2, #2
 80036a4:	711a      	strb	r2, [r3, #4]
  return HAL_FAILED;
 80036a6:	2301      	movs	r3, #1
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	b009      	add	sp, #36	; 0x24
 80036ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80036b0:	08005d90 	.word	0x08005d90
 80036b4:	fdffe008 	.word	0xfdffe008
	...

080036c0 <sdcDisconnect>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcDisconnect(SDCDriver *sdcp) {
 80036c0:	b500      	push	{lr}
 80036c2:	b083      	sub	sp, #12
 80036c4:	9001      	str	r0, [sp, #4]

  osalDbgCheck(sdcp != NULL);
 80036c6:	9b01      	ldr	r3, [sp, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <sdcDisconnect+0x12>
 80036cc:	481a      	ldr	r0, [pc, #104]	; (8003738 <sdcDisconnect+0x78>)
 80036ce:	f000 fe8f 	bl	80043f0 <chSysHalt>

  osalSysLock();
 80036d2:	f7ff fbb5 	bl	8002e40 <osalSysLock.lto_priv.271>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 80036d6:	9b01      	ldr	r3, [sp, #4]
 80036d8:	791b      	ldrb	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d006      	beq.n	80036ec <sdcDisconnect+0x2c>
 80036de:	9b01      	ldr	r3, [sp, #4]
 80036e0:	791b      	ldrb	r3, [r3, #4]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d002      	beq.n	80036ec <sdcDisconnect+0x2c>
 80036e6:	4814      	ldr	r0, [pc, #80]	; (8003738 <sdcDisconnect+0x78>)
 80036e8:	f000 fe82 	bl	80043f0 <chSysHalt>
                "invalid state");
  if (sdcp->state == BLK_ACTIVE) {
 80036ec:	9b01      	ldr	r3, [sp, #4]
 80036ee:	791b      	ldrb	r3, [r3, #4]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d103      	bne.n	80036fc <sdcDisconnect+0x3c>
    osalSysUnlock();
 80036f4:	f7ff fbac 	bl	8002e50 <osalSysUnlock.lto_priv.269>
    return HAL_SUCCESS;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e019      	b.n	8003730 <sdcDisconnect+0x70>
  }
  sdcp->state = BLK_DISCONNECTING;
 80036fc:	9b01      	ldr	r3, [sp, #4]
 80036fe:	2204      	movs	r2, #4
 8003700:	711a      	strb	r2, [r3, #4]
  osalSysUnlock();
 8003702:	f7ff fba5 	bl	8002e50 <osalSysUnlock.lto_priv.269>

  /* Waits for eventual pending operations completion.*/
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8003706:	9801      	ldr	r0, [sp, #4]
 8003708:	f7ff fe9a 	bl	8003440 <_sdc_wait_for_transfer_state>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <sdcDisconnect+0x62>
    sdc_lld_stop_clk(sdcp);
 8003712:	9801      	ldr	r0, [sp, #4]
 8003714:	f7fd f9fc 	bl	8000b10 <sdc_lld_stop_clk>
    sdcp->state = BLK_ACTIVE;
 8003718:	9b01      	ldr	r3, [sp, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	711a      	strb	r2, [r3, #4]
    return HAL_FAILED;
 800371e:	2301      	movs	r3, #1
 8003720:	e006      	b.n	8003730 <sdcDisconnect+0x70>
  }

  /* Card clock stopped.*/
  sdc_lld_stop_clk(sdcp);
 8003722:	9801      	ldr	r0, [sp, #4]
 8003724:	f7fd f9f4 	bl	8000b10 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	b003      	add	sp, #12
 8003734:	f85d fb04 	ldr.w	pc, [sp], #4
 8003738:	08005da0 	.word	0x08005da0
 800373c:	00000000 	.word	0x00000000

08003740 <sdcRead>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 8003740:	b500      	push	{lr}
 8003742:	b087      	sub	sp, #28
 8003744:	9003      	str	r0, [sp, #12]
 8003746:	9102      	str	r1, [sp, #8]
 8003748:	9201      	str	r2, [sp, #4]
 800374a:	9300      	str	r3, [sp, #0]
  bool status;

  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 800374c:	9b03      	ldr	r3, [sp, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <sdcRead+0x1e>
 8003752:	9b01      	ldr	r3, [sp, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <sdcRead+0x1e>
 8003758:	9b00      	ldr	r3, [sp, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <sdcRead+0x24>
 800375e:	4817      	ldr	r0, [pc, #92]	; (80037bc <sdcRead+0x7c>)
 8003760:	f000 fe46 	bl	80043f0 <chSysHalt>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8003764:	9b03      	ldr	r3, [sp, #12]
 8003766:	791b      	ldrb	r3, [r3, #4]
 8003768:	2b05      	cmp	r3, #5
 800376a:	d002      	beq.n	8003772 <sdcRead+0x32>
 800376c:	4813      	ldr	r0, [pc, #76]	; (80037bc <sdcRead+0x7c>)
 800376e:	f000 fe3f 	bl	80043f0 <chSysHalt>

  if ((startblk + n - 1U) > sdcp->capacity){
 8003772:	9a02      	ldr	r2, [sp, #8]
 8003774:	9b00      	ldr	r3, [sp, #0]
 8003776:	4413      	add	r3, r2
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	429a      	cmp	r2, r3
 8003780:	d907      	bls.n	8003792 <sdcRead+0x52>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8003782:	9b03      	ldr	r3, [sp, #12]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800378a:	9b03      	ldr	r3, [sp, #12]
 800378c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_FAILED;
 800378e:	2301      	movs	r3, #1
 8003790:	e010      	b.n	80037b4 <sdcRead+0x74>
  }

  /* Read operation in progress.*/
  sdcp->state = BLK_READING;
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	2206      	movs	r2, #6
 8003796:	711a      	strb	r2, [r3, #4]

  status = sdc_lld_read(sdcp, startblk, buf, n);
 8003798:	9803      	ldr	r0, [sp, #12]
 800379a:	9902      	ldr	r1, [sp, #8]
 800379c:	9a01      	ldr	r2, [sp, #4]
 800379e:	9b00      	ldr	r3, [sp, #0]
 80037a0:	f7fd fbf6 	bl	8000f90 <sdc_lld_read>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f88d 3017 	strb.w	r3, [sp, #23]

  /* Read operation finished.*/
  sdcp->state = BLK_READY;
 80037aa:	9b03      	ldr	r3, [sp, #12]
 80037ac:	2205      	movs	r2, #5
 80037ae:	711a      	strb	r2, [r3, #4]
  return status;
 80037b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	b007      	add	sp, #28
 80037b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80037bc:	08005db0 	.word	0x08005db0

080037c0 <sdcWrite>:
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcWrite(SDCDriver *sdcp, uint32_t startblk,
              const uint8_t *buf, uint32_t n) {
 80037c0:	b500      	push	{lr}
 80037c2:	b087      	sub	sp, #28
 80037c4:	9003      	str	r0, [sp, #12]
 80037c6:	9102      	str	r1, [sp, #8]
 80037c8:	9201      	str	r2, [sp, #4]
 80037ca:	9300      	str	r3, [sp, #0]
  bool status;

  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 80037cc:	9b03      	ldr	r3, [sp, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <sdcWrite+0x1e>
 80037d2:	9b01      	ldr	r3, [sp, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <sdcWrite+0x1e>
 80037d8:	9b00      	ldr	r3, [sp, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <sdcWrite+0x24>
 80037de:	4817      	ldr	r0, [pc, #92]	; (800383c <sdcWrite+0x7c>)
 80037e0:	f000 fe06 	bl	80043f0 <chSysHalt>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 80037e4:	9b03      	ldr	r3, [sp, #12]
 80037e6:	791b      	ldrb	r3, [r3, #4]
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d002      	beq.n	80037f2 <sdcWrite+0x32>
 80037ec:	4813      	ldr	r0, [pc, #76]	; (800383c <sdcWrite+0x7c>)
 80037ee:	f000 fdff 	bl	80043f0 <chSysHalt>

  if ((startblk + n - 1U) > sdcp->capacity){
 80037f2:	9a02      	ldr	r2, [sp, #8]
 80037f4:	9b00      	ldr	r3, [sp, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	1e5a      	subs	r2, r3, #1
 80037fa:	9b03      	ldr	r3, [sp, #12]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	429a      	cmp	r2, r3
 8003800:	d907      	bls.n	8003812 <sdcWrite+0x52>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8003802:	9b03      	ldr	r3, [sp, #12]
 8003804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003806:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800380a:	9b03      	ldr	r3, [sp, #12]
 800380c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_FAILED;
 800380e:	2301      	movs	r3, #1
 8003810:	e010      	b.n	8003834 <sdcWrite+0x74>
  }

  /* Write operation in progress.*/
  sdcp->state = BLK_WRITING;
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	2207      	movs	r2, #7
 8003816:	711a      	strb	r2, [r3, #4]

  status = sdc_lld_write(sdcp, startblk, buf, n);
 8003818:	9803      	ldr	r0, [sp, #12]
 800381a:	9902      	ldr	r1, [sp, #8]
 800381c:	9a01      	ldr	r2, [sp, #4]
 800381e:	9b00      	ldr	r3, [sp, #0]
 8003820:	f7fd fbf6 	bl	8001010 <sdc_lld_write>
 8003824:	4603      	mov	r3, r0
 8003826:	f88d 3017 	strb.w	r3, [sp, #23]

  /* Write operation finished.*/
  sdcp->state = BLK_READY;
 800382a:	9b03      	ldr	r3, [sp, #12]
 800382c:	2205      	movs	r2, #5
 800382e:	711a      	strb	r2, [r3, #4]
  return status;
 8003830:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	b007      	add	sp, #28
 8003838:	f85d fb04 	ldr.w	pc, [sp], #4
 800383c:	08005dc0 	.word	0x08005dc0

08003840 <sdcSync>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcSync(SDCDriver *sdcp) {
 8003840:	b500      	push	{lr}
 8003842:	b085      	sub	sp, #20
 8003844:	9001      	str	r0, [sp, #4]
  bool result;

  osalDbgCheck(sdcp != NULL);
 8003846:	9b01      	ldr	r3, [sp, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <sdcSync+0x12>
 800384c:	480d      	ldr	r0, [pc, #52]	; (8003884 <sdcSync+0x44>)
 800384e:	f000 fdcf 	bl	80043f0 <chSysHalt>

  if (sdcp->state != BLK_READY) {
 8003852:	9b01      	ldr	r3, [sp, #4]
 8003854:	791b      	ldrb	r3, [r3, #4]
 8003856:	2b05      	cmp	r3, #5
 8003858:	d001      	beq.n	800385e <sdcSync+0x1e>
    return HAL_FAILED;
 800385a:	2301      	movs	r3, #1
 800385c:	e00d      	b.n	800387a <sdcSync+0x3a>
  }

  /* Synchronization operation in progress.*/
  sdcp->state = BLK_SYNCING;
 800385e:	9b01      	ldr	r3, [sp, #4]
 8003860:	2208      	movs	r2, #8
 8003862:	711a      	strb	r2, [r3, #4]

  result = sdc_lld_sync(sdcp);
 8003864:	9801      	ldr	r0, [sp, #4]
 8003866:	f7fd fc1b 	bl	80010a0 <sdc_lld_sync>
 800386a:	4603      	mov	r3, r0
 800386c:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Synchronization operation finished.*/
  sdcp->state = BLK_READY;
 8003870:	9b01      	ldr	r3, [sp, #4]
 8003872:	2205      	movs	r2, #5
 8003874:	711a      	strb	r2, [r3, #4]
  return result;
 8003876:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	b005      	add	sp, #20
 800387e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003882:	bf00      	nop
 8003884:	08005dd0 	.word	0x08005dd0
	...

08003890 <sdcGetInfo>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcGetInfo(SDCDriver *sdcp, BlockDeviceInfo *bdip) {
 8003890:	b500      	push	{lr}
 8003892:	b083      	sub	sp, #12
 8003894:	9001      	str	r0, [sp, #4]
 8003896:	9100      	str	r1, [sp, #0]

  osalDbgCheck((sdcp != NULL) && (bdip != NULL));
 8003898:	9b01      	ldr	r3, [sp, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <sdcGetInfo+0x14>
 800389e:	9b00      	ldr	r3, [sp, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <sdcGetInfo+0x1a>
 80038a4:	480a      	ldr	r0, [pc, #40]	; (80038d0 <sdcGetInfo+0x40>)
 80038a6:	f000 fda3 	bl	80043f0 <chSysHalt>

  if (sdcp->state != BLK_READY) {
 80038aa:	9b01      	ldr	r3, [sp, #4]
 80038ac:	791b      	ldrb	r3, [r3, #4]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d001      	beq.n	80038b6 <sdcGetInfo+0x26>
    return HAL_FAILED;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e008      	b.n	80038c8 <sdcGetInfo+0x38>
  }

  bdip->blk_num = sdcp->capacity;
 80038b6:	9b01      	ldr	r3, [sp, #4]
 80038b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ba:	9b00      	ldr	r3, [sp, #0]
 80038bc:	605a      	str	r2, [r3, #4]
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 80038be:	9b00      	ldr	r3, [sp, #0]
 80038c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c4:	601a      	str	r2, [r3, #0]

  return HAL_SUCCESS;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	b003      	add	sp, #12
 80038cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80038d0:	08005de0 	.word	0x08005de0
	...

080038e0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 80038e0:	b082      	sub	sp, #8
 80038e2:	9001      	str	r0, [sp, #4]
 80038e4:	9100      	str	r1, [sp, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80038e6:	4a12      	ldr	r2, [pc, #72]	; (8003930 <nvicEnableVector+0x50>)
 80038e8:	9b00      	ldr	r3, [sp, #0]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	b2d9      	uxtb	r1, r3
 80038f0:	9b01      	ldr	r3, [sp, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80038f8:	460a      	mov	r2, r1
 80038fa:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038fc:	490c      	ldr	r1, [pc, #48]	; (8003930 <nvicEnableVector+0x50>)
 80038fe:	9b01      	ldr	r3, [sp, #4]
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	9a01      	ldr	r2, [sp, #4]
 8003904:	f002 021f 	and.w	r2, r2, #31
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	3360      	adds	r3, #96	; 0x60
 8003910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003914:	4906      	ldr	r1, [pc, #24]	; (8003930 <nvicEnableVector+0x50>)
 8003916:	9b01      	ldr	r3, [sp, #4]
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	9a01      	ldr	r2, [sp, #4]
 800391c:	f002 021f 	and.w	r2, r2, #31
 8003920:	2001      	movs	r0, #1
 8003922:	fa00 f202 	lsl.w	r2, r0, r2
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800392a:	b002      	add	sp, #8
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	e000e100 	.word	0xe000e100
	...

08003940 <nvicSetSystemHandlerPriority>:
 * @brief   Changes the priority of a system handler.
 *
 * @param[in] handler   the system handler number
 * @param[in] prio      the system handler priority
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {
 8003940:	b500      	push	{lr}
 8003942:	b083      	sub	sp, #12
 8003944:	9001      	str	r0, [sp, #4]
 8003946:	9100      	str	r1, [sp, #0]

  osalDbgCheck(handler < 12U);
 8003948:	9b01      	ldr	r3, [sp, #4]
 800394a:	2b0b      	cmp	r3, #11
 800394c:	d902      	bls.n	8003954 <nvicSetSystemHandlerPriority+0x14>
 800394e:	4808      	ldr	r0, [pc, #32]	; (8003970 <nvicSetSystemHandlerPriority+0x30>)
 8003950:	f000 fd4e 	bl	80043f0 <chSysHalt>
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 8003954:	4a07      	ldr	r2, [pc, #28]	; (8003974 <nvicSetSystemHandlerPriority+0x34>)
 8003956:	9b00      	ldr	r3, [sp, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	b2d9      	uxtb	r1, r3
 800395e:	9b01      	ldr	r3, [sp, #4]
 8003960:	4413      	add	r3, r2
 8003962:	3318      	adds	r3, #24
 8003964:	460a      	mov	r2, r1
 8003966:	701a      	strb	r2, [r3, #0]
#endif
}
 8003968:	b003      	add	sp, #12
 800396a:	f85d fb04 	ldr.w	pc, [sp], #4
 800396e:	bf00      	nop
 8003970:	08005df0 	.word	0x08005df0
 8003974:	e000ed00 	.word	0xe000ed00
	...

08003980 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8003980:	4a0d      	ldr	r2, [pc, #52]	; (80039b8 <hal_lld_backup_domain_init+0x38>)
 8003982:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <hal_lld_backup_domain_init+0x38>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398a:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <hal_lld_backup_domain_init+0x3c>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003998:	d006      	beq.n	80039a8 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <hal_lld_backup_domain_init+0x3c>)
 800399c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039a0:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <hal_lld_backup_domain_init+0x3c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80039a8:	4a03      	ldr	r2, [pc, #12]	; (80039b8 <hal_lld_backup_domain_init+0x38>)
 80039aa:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <hal_lld_backup_domain_init+0x38>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039b2:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40007000 	.word	0x40007000
 80039bc:	40023800 	.word	0x40023800

080039c0 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 80039c0:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <hal_lld_init+0x60>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <hal_lld_init+0x60>)
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039cc:	611a      	str	r2, [r3, #16]
 80039ce:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <hal_lld_init+0x60>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <hal_lld_init+0x60>)
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <hal_lld_init+0x60>)
 80039da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039de:	615a      	str	r2, [r3, #20]
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <hal_lld_init+0x60>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80039e6:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <hal_lld_init+0x60>)
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <hal_lld_init+0x60>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
 80039f0:	6213      	str	r3, [r2, #32]
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <hal_lld_init+0x60>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <hal_lld_init+0x60>)
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <hal_lld_init+0x60>)
 80039fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <hal_lld_init+0x60>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8003a0a:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <hal_lld_init+0x60>)
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <hal_lld_init+0x60>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8003a16:	f7ff ffb3 	bl	8003980 <hal_lld_backup_domain_init>

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8003a1a:	f7fe fd59 	bl	80024d0 <dmaInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8003a1e:	bd08      	pop	{r3, pc}
 8003a20:	40023800 	.word	0x40023800
	...

08003a30 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003a30:	4b3c      	ldr	r3, [pc, #240]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <stm32_clock_init+0xf8>)
 8003a3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a3e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003a40:	4a38      	ldr	r2, [pc, #224]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a42:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003a4c:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f9      	beq.n	8003a4c <stm32_clock_init+0x1c>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8003a58:	4a32      	ldr	r2, [pc, #200]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a5a:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8003a64:	4a2f      	ldr	r2, [pc, #188]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a66:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f9      	bne.n	8003a6c <stm32_clock_init+0x3c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003a78:	4a2a      	ldr	r2, [pc, #168]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8003a82:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003a84:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8003a8a:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <stm32_clock_init+0xf4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f9      	beq.n	8003a96 <stm32_clock_init+0x66>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8003aa2:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <stm32_clock_init+0xf4>)
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <stm32_clock_init+0xf4>)
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <stm32_clock_init+0xf4>)
 8003ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f9      	beq.n	8003aae <stm32_clock_init+0x7e>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8003aba:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <stm32_clock_init+0xf4>)
 8003abc:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <stm32_clock_init+0xfc>)
 8003abe:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <stm32_clock_init+0xf4>)
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <stm32_clock_init+0xf4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <stm32_clock_init+0xf8>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f9      	beq.n	8003acc <stm32_clock_init+0x9c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <stm32_clock_init+0xf4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f9      	beq.n	8003ad8 <stm32_clock_init+0xa8>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <stm32_clock_init+0xf4>)
 8003ae6:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <stm32_clock_init+0x100>)
 8003ae8:	609a      	str	r2, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <stm32_clock_init+0x104>)
 8003aec:	f240 7202 	movw	r2, #1794	; 0x702
 8003af0:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003af2:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <stm32_clock_init+0xf4>)
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <stm32_clock_init+0xf4>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <stm32_clock_init+0xf4>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d1f9      	bne.n	8003afe <stm32_clock_init+0xce>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8003b0a:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <stm32_clock_init+0xf4>)
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <stm32_clock_init+0xf4>)
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b14:	6453      	str	r3, [r2, #68]	; 0x44
 8003b16:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <stm32_clock_init+0xf4>)
 8003b18:	4b02      	ldr	r3, [pc, #8]	; (8003b24 <stm32_clock_init+0xf4>)
 8003b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b20:	6653      	str	r3, [r2, #100]	; 0x64
}
 8003b22:	4770      	bx	lr
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	07412a0d 	.word	0x07412a0d
 8003b30:	38889400 	.word	0x38889400
 8003b34:	40023c00 	.word	0x40023c00
	...

08003b40 <_mmcsd_get_capacity>:
 * @return              The card capacity.
 * @retval 0            CSD format error
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8003b40:	b500      	push	{lr}
 8003b42:	b087      	sub	sp, #28
 8003b44:	9001      	str	r0, [sp, #4]
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);
 8003b46:	9b01      	ldr	r3, [sp, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <_mmcsd_get_capacity+0x12>
 8003b4c:	481b      	ldr	r0, [pc, #108]	; (8003bbc <_mmcsd_get_capacity+0x7c>)
 8003b4e:	f000 fc4f 	bl	80043f0 <chSysHalt>

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8003b52:	9801      	ldr	r0, [sp, #4]
 8003b54:	217f      	movs	r1, #127	; 0x7f
 8003b56:	227e      	movs	r2, #126	; 0x7e
 8003b58:	f000 fa32 	bl	8003fc0 <_mmcsd_get_slice>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <_mmcsd_get_capacity+0x28>
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d01b      	beq.n	8003b9e <_mmcsd_get_capacity+0x5e>
 8003b66:	e023      	b.n	8003bb0 <_mmcsd_get_capacity+0x70>
  case 0:
    /* CSD version 1.0 */
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 8003b68:	9801      	ldr	r0, [sp, #4]
 8003b6a:	2149      	movs	r1, #73	; 0x49
 8003b6c:	223e      	movs	r2, #62	; 0x3e
 8003b6e:	f000 fa27 	bl	8003fc0 <_mmcsd_get_slice>
 8003b72:	9005      	str	r0, [sp, #20]
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 8003b74:	9801      	ldr	r0, [sp, #4]
 8003b76:	2131      	movs	r1, #49	; 0x31
 8003b78:	222f      	movs	r2, #47	; 0x2f
 8003b7a:	f000 fa21 	bl	8003fc0 <_mmcsd_get_slice>
 8003b7e:	9004      	str	r0, [sp, #16]
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 8003b80:	9801      	ldr	r0, [sp, #4]
 8003b82:	2153      	movs	r1, #83	; 0x53
 8003b84:	2250      	movs	r2, #80	; 0x50
 8003b86:	f000 fa1b 	bl	8003fc0 <_mmcsd_get_slice>
 8003b8a:	9003      	str	r0, [sp, #12]
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 8003b8c:	9b05      	ldr	r3, [sp, #20]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	9a04      	ldr	r2, [sp, #16]
 8003b92:	3202      	adds	r2, #2
 8003b94:	4093      	lsls	r3, r2
 8003b96:	9a03      	ldr	r2, [sp, #12]
 8003b98:	3a09      	subs	r2, #9
 8003b9a:	4093      	lsls	r3, r2
 8003b9c:	e009      	b.n	8003bb2 <_mmcsd_get_capacity+0x72>
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8003b9e:	9801      	ldr	r0, [sp, #4]
 8003ba0:	2145      	movs	r1, #69	; 0x45
 8003ba2:	2230      	movs	r2, #48	; 0x30
 8003ba4:	f000 fa0c 	bl	8003fc0 <_mmcsd_get_slice>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	3301      	adds	r3, #1
 8003bac:	029b      	lsls	r3, r3, #10
 8003bae:	e000      	b.n	8003bb2 <_mmcsd_get_capacity+0x72>
  default:
    /* Reserved value detected.*/
    break;
  }
  return 0U;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	b007      	add	sp, #28
 8003bb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bba:	bf00      	nop
 8003bbc:	08005c50 	.word	0x08005c50

08003bc0 <_mmcsd_get_capacity_ext>:
 *
 * @return              The card capacity.
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {
 8003bc0:	b500      	push	{lr}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	9001      	str	r0, [sp, #4]

  osalDbgCheck(NULL != ext_csd);
 8003bc6:	9b01      	ldr	r3, [sp, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <_mmcsd_get_capacity_ext+0x12>
 8003bcc:	480c      	ldr	r0, [pc, #48]	; (8003c00 <_mmcsd_get_capacity_ext+0x40>)
 8003bce:	f000 fc0f 	bl	80043f0 <chSysHalt>

  return ((uint32_t)ext_csd[215] << 24U) +
 8003bd2:	9b01      	ldr	r3, [sp, #4]
 8003bd4:	33d7      	adds	r3, #215	; 0xd7
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	061a      	lsls	r2, r3, #24
         ((uint32_t)ext_csd[214] << 16U) +
 8003bda:	9b01      	ldr	r3, [sp, #4]
 8003bdc:	33d6      	adds	r3, #214	; 0xd6
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	041b      	lsls	r3, r3, #16
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
 8003be2:	441a      	add	r2, r3
         ((uint32_t)ext_csd[214] << 16U) +
         ((uint32_t)ext_csd[213] << 8U)  +
 8003be4:	9b01      	ldr	r3, [sp, #4]
 8003be6:	33d5      	adds	r3, #213	; 0xd5
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	021b      	lsls	r3, r3, #8
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
         ((uint32_t)ext_csd[214] << 16U) +
 8003bec:	4413      	add	r3, r2
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
 8003bee:	9a01      	ldr	r2, [sp, #4]
 8003bf0:	32d4      	adds	r2, #212	; 0xd4
 8003bf2:	7812      	ldrb	r2, [r2, #0]
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
 8003bf4:	4413      	add	r3, r2
         ((uint32_t)ext_csd[214] << 16U) +
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	b003      	add	sp, #12
 8003bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bfe:	bf00      	nop
 8003c00:	08005c70 	.word	0x08005c70
	...

08003c10 <osalMutexObjectInit>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8003c10:	b500      	push	{lr}
 8003c12:	b083      	sub	sp, #12
 8003c14:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8003c16:	9801      	ldr	r0, [sp, #4]
 8003c18:	f000 fa32 	bl	8004080 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 8003c1c:	b003      	add	sp, #12
 8003c1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c22:	bf00      	nop
	...

08003c30 <adcInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void adcInit(void) {
 8003c30:	b508      	push	{r3, lr}

  adc_lld_init();
 8003c32:	f7fe fe1d 	bl	8002870 <adc_lld_init>
}
 8003c36:	bd08      	pop	{r3, pc}
	...

08003c40 <adcObjectInit>:
 *
 * @param[out] adcp     pointer to the @p ADCDriver object
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {
 8003c40:	b500      	push	{lr}
 8003c42:	b083      	sub	sp, #12
 8003c44:	9001      	str	r0, [sp, #4]

  adcp->state    = ADC_STOP;
 8003c46:	9b01      	ldr	r3, [sp, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
  adcp->config   = NULL;
 8003c4c:	9b01      	ldr	r3, [sp, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	605a      	str	r2, [r3, #4]
  adcp->samples  = NULL;
 8003c52:	9b01      	ldr	r3, [sp, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	609a      	str	r2, [r3, #8]
  adcp->depth    = 0;
 8003c58:	9b01      	ldr	r3, [sp, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60da      	str	r2, [r3, #12]
  adcp->grpp     = NULL;
 8003c5e:	9b01      	ldr	r3, [sp, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	611a      	str	r2, [r3, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8003c64:	9b01      	ldr	r3, [sp, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	615a      	str	r2, [r3, #20]
#endif
#if ADC_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&adcp->mutex);
 8003c6a:	9b01      	ldr	r3, [sp, #4]
 8003c6c:	3318      	adds	r3, #24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ffce 	bl	8003c10 <osalMutexObjectInit>
#endif
#if defined(ADC_DRIVER_EXT_INIT_HOOK)
  ADC_DRIVER_EXT_INIT_HOOK(adcp);
#endif
}
 8003c74:	b003      	add	sp, #12
 8003c76:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c7a:	bf00      	nop
 8003c7c:	0000      	movs	r0, r0
	...

08003c80 <port_lock.lto_priv.287>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8003c80:	b082      	sub	sp, #8
 8003c82:	2320      	movs	r3, #32
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	9b01      	ldr	r3, [sp, #4]
 8003c88:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003c8c:	b002      	add	sp, #8
 8003c8e:	4770      	bx	lr

08003c90 <port_unlock.lto_priv.285>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8003c90:	b082      	sub	sp, #8
 8003c92:	2300      	movs	r3, #0
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	9b01      	ldr	r3, [sp, #4]
 8003c98:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003c9c:	b002      	add	sp, #8
 8003c9e:	4770      	bx	lr

08003ca0 <chSysLock.lto_priv.283>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8003ca0:	b508      	push	{r3, lr}

  port_lock();
 8003ca2:	f7ff ffed 	bl	8003c80 <port_lock.lto_priv.287>
  _stats_start_measure_crit_thd();
 8003ca6:	f001 fb73 	bl	8005390 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003caa:	f000 fc09 	bl	80044c0 <_dbg_check_lock>
}
 8003cae:	bd08      	pop	{r3, pc}

08003cb0 <chSysUnlock.lto_priv.281>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8003cb0:	b508      	push	{r3, lr}

  _dbg_check_unlock();
 8003cb2:	f000 fc1d 	bl	80044f0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003cb6:	f001 fb73 	bl	80053a0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <chSysUnlock.lto_priv.281+0x30>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <chSysUnlock.lto_priv.281+0x30>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00a      	beq.n	8003cda <chSysUnlock.lto_priv.281+0x2a>
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <chSysUnlock.lto_priv.281+0x30>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <chSysUnlock.lto_priv.281+0x30>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d202      	bcs.n	8003cda <chSysUnlock.lto_priv.281+0x2a>
 8003cd4:	4803      	ldr	r0, [pc, #12]	; (8003ce4 <chSysUnlock.lto_priv.281+0x34>)
 8003cd6:	f000 fb8b 	bl	80043f0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  port_unlock();
 8003cda:	f7ff ffd9 	bl	8003c90 <port_unlock.lto_priv.285>
}
 8003cde:	bd08      	pop	{r3, pc}
 8003ce0:	20000800 	.word	0x20000800
 8003ce4:	08005ca0 	.word	0x08005ca0
	...

08003cf0 <osalSysLock.lto_priv.270>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8003cf0:	b508      	push	{r3, lr}

  chSysLock();
 8003cf2:	f7ff ffd5 	bl	8003ca0 <chSysLock.lto_priv.283>
}
 8003cf6:	bd08      	pop	{r3, pc}
	...

08003d00 <osalSysUnlock.lto_priv.268>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8003d00:	b508      	push	{r3, lr}

  chSysUnlock();
 8003d02:	f7ff ffd5 	bl	8003cb0 <chSysUnlock.lto_priv.281>
}
 8003d06:	bd08      	pop	{r3, pc}
	...

08003d10 <osalMutexObjectInit.lto_priv.279>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8003d10:	b500      	push	{lr}
 8003d12:	b083      	sub	sp, #12
 8003d14:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8003d16:	9801      	ldr	r0, [sp, #4]
 8003d18:	f000 f9b2 	bl	8004080 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 8003d1c:	b003      	add	sp, #12
 8003d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d22:	bf00      	nop
	...

08003d30 <port_lock.lto_priv.321>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8003d30:	b082      	sub	sp, #8
 8003d32:	2320      	movs	r3, #32
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	9b01      	ldr	r3, [sp, #4]
 8003d38:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003d3c:	b002      	add	sp, #8
 8003d3e:	4770      	bx	lr

08003d40 <port_unlock.lto_priv.317>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8003d40:	b082      	sub	sp, #8
 8003d42:	2300      	movs	r3, #0
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	9b01      	ldr	r3, [sp, #4]
 8003d48:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003d4c:	b002      	add	sp, #8
 8003d4e:	4770      	bx	lr

08003d50 <chSysLock.lto_priv.314>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8003d50:	b508      	push	{r3, lr}

  port_lock();
 8003d52:	f7ff ffed 	bl	8003d30 <port_lock.lto_priv.321>
  _stats_start_measure_crit_thd();
 8003d56:	f001 fb1b 	bl	8005390 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003d5a:	f000 fbb1 	bl	80044c0 <_dbg_check_lock>
}
 8003d5e:	bd08      	pop	{r3, pc}

08003d60 <chSysUnlock.lto_priv.310>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8003d60:	b508      	push	{r3, lr}

  _dbg_check_unlock();
 8003d62:	f000 fbc5 	bl	80044f0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003d66:	f001 fb1b 	bl	80053a0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <chSysUnlock.lto_priv.310+0x30>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <chSysUnlock.lto_priv.310+0x30>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00a      	beq.n	8003d8a <chSysUnlock.lto_priv.310+0x2a>
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <chSysUnlock.lto_priv.310+0x30>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <chSysUnlock.lto_priv.310+0x30>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d202      	bcs.n	8003d8a <chSysUnlock.lto_priv.310+0x2a>
 8003d84:	4803      	ldr	r0, [pc, #12]	; (8003d94 <chSysUnlock.lto_priv.310+0x34>)
 8003d86:	f000 fb33 	bl	80043f0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  port_unlock();
 8003d8a:	f7ff ffd9 	bl	8003d40 <port_unlock.lto_priv.317>
}
 8003d8e:	bd08      	pop	{r3, pc}
 8003d90:	20000800 	.word	0x20000800
 8003d94:	08005c20 	.word	0x08005c20
	...

08003da0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <_core_init+0x1c>)
 8003da2:	3307      	adds	r3, #7
 8003da4:	f023 0307 	bic.w	r3, r3, #7
 8003da8:	461a      	mov	r2, r3
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <_core_init+0x20>)
 8003dac:	601a      	str	r2, [r3, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <_core_init+0x24>)
 8003db0:	f023 0307 	bic.w	r3, r3, #7
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <_core_init+0x28>)
 8003db8:	601a      	str	r2, [r3, #0]

  nextmem = (uint8_t *)&buffer[0];
  endmem = (uint8_t *)&buffer[MEM_ALIGN_NEXT(CH_CFG_MEMCORE_SIZE) /
                              MEM_ALIGN_SIZE];
#endif
}
 8003dba:	4770      	bx	lr
 8003dbc:	200013c8 	.word	0x200013c8
 8003dc0:	200008e0 	.word	0x200008e0
 8003dc4:	20020000 	.word	0x20020000
 8003dc8:	200008e4 	.word	0x200008e4
 8003dcc:	00000000 	.word	0x00000000

08003dd0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8003dd0:	b500      	push	{lr}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	9001      	str	r0, [sp, #4]
  void *p;

  chSysLock();
 8003dd6:	f7ff ffbb 	bl	8003d50 <chSysLock.lto_priv.314>
  p = chCoreAllocI(size);
 8003dda:	9801      	ldr	r0, [sp, #4]
 8003ddc:	f000 f808 	bl	8003df0 <chCoreAllocI>
 8003de0:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8003de2:	f7ff ffbd 	bl	8003d60 <chSysUnlock.lto_priv.310>

  return p;
 8003de6:	9b03      	ldr	r3, [sp, #12]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	b005      	add	sp, #20
 8003dec:	f85d fb04 	ldr.w	pc, [sp], #4

08003df0 <chCoreAllocI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocI(size_t size) {
 8003df0:	b500      	push	{lr}
 8003df2:	b085      	sub	sp, #20
 8003df4:	9001      	str	r0, [sp, #4]
  void *p;

  chDbgCheckClassI();
 8003df6:	f000 fc03 	bl	8004600 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
 8003dfa:	9b01      	ldr	r3, [sp, #4]
 8003dfc:	3307      	adds	r3, #7
 8003dfe:	f023 0307 	bic.w	r3, r3, #7
 8003e02:	9301      	str	r3, [sp, #4]
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <chCoreAllocI+0x48>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <chCoreAllocI+0x4c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	9b01      	ldr	r3, [sp, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d201      	bcs.n	8003e1c <chCoreAllocI+0x2c>
  /*lint -restore*/
    return NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e009      	b.n	8003e30 <chCoreAllocI+0x40>
  }
  p = nextmem;
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <chCoreAllocI+0x4c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	9303      	str	r3, [sp, #12]
  nextmem += size;
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <chCoreAllocI+0x4c>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	9b01      	ldr	r3, [sp, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <chCoreAllocI+0x4c>)
 8003e2c:	6013      	str	r3, [r2, #0]

  return p;
 8003e2e:	9b03      	ldr	r3, [sp, #12]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	b005      	add	sp, #20
 8003e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e38:	200008e4 	.word	0x200008e4
 8003e3c:	200008e0 	.word	0x200008e0

08003e40 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 8003e40:	b508      	push	{r3, lr}

  default_heap.h_provider = chCoreAlloc;
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <_heap_init+0x1c>)
 8003e44:	4a06      	ldr	r2, [pc, #24]	; (8003e60 <_heap_init+0x20>)
 8003e46:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <_heap_init+0x1c>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 8003e4e:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <_heap_init+0x1c>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8003e54:	4803      	ldr	r0, [pc, #12]	; (8003e64 <_heap_init+0x24>)
 8003e56:	f000 f913 	bl	8004080 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.h_sem, (cnt_t)1);
#endif
}
 8003e5a:	bd08      	pop	{r3, pc}
 8003e5c:	200008e8 	.word	0x200008e8
 8003e60:	08003dd1 	.word	0x08003dd1
 8003e64:	200008f8 	.word	0x200008f8
	...

08003e70 <port_lock.lto_priv.323>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8003e70:	b082      	sub	sp, #8
 8003e72:	2320      	movs	r3, #32
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	9b01      	ldr	r3, [sp, #4]
 8003e78:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003e7c:	b002      	add	sp, #8
 8003e7e:	4770      	bx	lr

08003e80 <port_unlock.lto_priv.319>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8003e80:	b082      	sub	sp, #8
 8003e82:	2300      	movs	r3, #0
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	9b01      	ldr	r3, [sp, #4]
 8003e88:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003e8c:	b002      	add	sp, #8
 8003e8e:	4770      	bx	lr

08003e90 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8003e90:	b508      	push	{r3, lr}

  port_lock();
 8003e92:	f7ff ffed 	bl	8003e70 <port_lock.lto_priv.323>
}
 8003e96:	bd08      	pop	{r3, pc}
	...

08003ea0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8003ea0:	b508      	push	{r3, lr}

  port_unlock();
 8003ea2:	f7ff ffed 	bl	8003e80 <port_unlock.lto_priv.319>
}
 8003ea6:	bd08      	pop	{r3, pc}
	...

08003eb0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8003eb0:	b510      	push	{r4, lr}
 8003eb2:	b082      	sub	sp, #8
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8003eb4:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <SVC_Handler+0x34>)
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <SVC_Handler+0x34>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003ec0:	f3ef 8309 	mrs	r3, PSP
 8003ec4:	461c      	mov	r4, r3
  return(result);
 8003ec6:	4623      	mov	r3, r4
#endif

  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();
 8003ec8:	9301      	str	r3, [sp, #4]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8003eca:	9b01      	ldr	r3, [sp, #4]
 8003ecc:	3368      	adds	r3, #104	; 0x68
 8003ece:	9301      	str	r3, [sp, #4]

  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);
 8003ed0:	9b01      	ldr	r3, [sp, #4]
 8003ed2:	9300      	str	r3, [sp, #0]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003ed4:	9b00      	ldr	r3, [sp, #0]
 8003ed6:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
 8003eda:	f7ff ffe1 	bl	8003ea0 <port_unlock_from_isr>
}
 8003ede:	b002      	add	sp, #8
 8003ee0:	bd10      	pop	{r4, pc}
 8003ee2:	bf00      	nop
 8003ee4:	e000ef30 	.word	0xe000ef30
	...

08003ef0 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	b084      	sub	sp, #16

  port_lock_from_isr();
 8003ef4:	f7ff ffcc 	bl	8003e90 <port_lock_from_isr>
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003ef8:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <_port_irq_epilogue+0x68>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d025      	beq.n	8003f50 <_port_irq_epilogue+0x60>
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8003f04:	eef1 3a10 	vmrs	r3, fpscr
 8003f08:	9302      	str	r3, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003f0a:	f3ef 8309 	mrs	r3, PSP
 8003f0e:	461c      	mov	r4, r3
  return(result);
 8003f10:	4623      	mov	r3, r4
      /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
      (void) __get_FPSCR();
#endif

    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
 8003f12:	9303      	str	r3, [sp, #12]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8003f14:	9b03      	ldr	r3, [sp, #12]
 8003f16:	3b68      	subs	r3, #104	; 0x68
 8003f18:	9303      	str	r3, [sp, #12]

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8003f1a:	9b03      	ldr	r3, [sp, #12]
 8003f1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f20:	61da      	str	r2, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <_port_irq_epilogue+0x6c>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	461a      	mov	r2, r3
 8003f28:	9b03      	ldr	r3, [sp, #12]
 8003f2a:	661a      	str	r2, [r3, #96]	; 0x60
#endif

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
 8003f2c:	9b03      	ldr	r3, [sp, #12]
 8003f2e:	9301      	str	r3, [sp, #4]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003f30:	9b01      	ldr	r3, [sp, #4]
 8003f32:	f383 8809 	msr	PSP, r3

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8003f36:	f000 fe13 	bl	8004b60 <chSchIsPreemptionRequired>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <_port_irq_epilogue+0x58>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8003f40:	9b03      	ldr	r3, [sp, #12]
 8003f42:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <_port_irq_epilogue+0x70>)
 8003f44:	619a      	str	r2, [r3, #24]
 8003f46:	e005      	b.n	8003f54 <_port_irq_epilogue+0x64>
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8003f48:	9b03      	ldr	r3, [sp, #12]
 8003f4a:	4a06      	ldr	r2, [pc, #24]	; (8003f64 <_port_irq_epilogue+0x74>)
 8003f4c:	619a      	str	r2, [r3, #24]
 8003f4e:	e001      	b.n	8003f54 <_port_irq_epilogue+0x64>

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
 8003f50:	f7ff ffa6 	bl	8003ea0 <port_unlock_from_isr>
}
 8003f54:	b004      	add	sp, #16
 8003f56:	bd10      	pop	{r4, pc}
 8003f58:	e000ed00 	.word	0xe000ed00
 8003f5c:	e000ef30 	.word	0xe000ef30
 8003f60:	08000301 	.word	0x08000301
 8003f64:	08000314 	.word	0x08000314
	...

08003f70 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
	...

08003f80 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8003f80:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8003f82:	f7ff fff5 	bl	8003f70 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8003f86:	f7ff fd1b 	bl	80039c0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8003f8a:	4807      	ldr	r0, [pc, #28]	; (8003fa8 <halInit+0x28>)
 8003f8c:	f7fe fce8 	bl	8002960 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 8003f90:	f7ff fe4e 	bl	8003c30 <adcInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 8003f94:	f7fe fe0c 	bl	8002bb0 <i2cInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
 8003f98:	f7ff fa82 	bl	80034a0 <sdcInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8003f9c:	f7fd f8a0 	bl	80010e0 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8003fa0:	f000 f806 	bl	8003fb0 <stInit>
#endif
}
 8003fa4:	bd08      	pop	{r3, pc}
 8003fa6:	bf00      	nop
 8003fa8:	08005fa0 	.word	0x08005fa0
 8003fac:	00000000 	.word	0x00000000

08003fb0 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8003fb0:	b508      	push	{r3, lr}

  st_lld_init();
 8003fb2:	f7fe fb9d 	bl	80026f0 <st_lld_init>
}
 8003fb6:	bd08      	pop	{r3, pc}
	...

08003fc0 <_mmcsd_get_slice>:
 *
 * @notapi
 */
uint32_t _mmcsd_get_slice(const uint32_t *data,
                          uint32_t end,
                          uint32_t start) {
 8003fc0:	b500      	push	{lr}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	9003      	str	r0, [sp, #12]
 8003fc6:	9102      	str	r1, [sp, #8]
 8003fc8:	9201      	str	r2, [sp, #4]
  unsigned startidx, endidx, startoff;
  uint32_t endmask;

  osalDbgCheck((end >= start) && ((end - start) < 32U));
 8003fca:	9a02      	ldr	r2, [sp, #8]
 8003fcc:	9b01      	ldr	r3, [sp, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d304      	bcc.n	8003fdc <_mmcsd_get_slice+0x1c>
 8003fd2:	9a02      	ldr	r2, [sp, #8]
 8003fd4:	9b01      	ldr	r3, [sp, #4]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b1f      	cmp	r3, #31
 8003fda:	d902      	bls.n	8003fe2 <_mmcsd_get_slice+0x22>
 8003fdc:	481d      	ldr	r0, [pc, #116]	; (8004054 <_mmcsd_get_slice+0x94>)
 8003fde:	f000 fa07 	bl	80043f0 <chSysHalt>

  startidx = start / 32U;
 8003fe2:	9b01      	ldr	r3, [sp, #4]
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	9307      	str	r3, [sp, #28]
  startoff = start % 32U;
 8003fe8:	9b01      	ldr	r3, [sp, #4]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	9306      	str	r3, [sp, #24]
  endidx   = end / 32U;
 8003ff0:	9b02      	ldr	r3, [sp, #8]
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	9305      	str	r3, [sp, #20]
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 8003ff6:	9b02      	ldr	r3, [sp, #8]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	461a      	mov	r2, r3
 8004000:	2301      	movs	r3, #1
 8004002:	4093      	lsls	r3, r2
 8004004:	3b01      	subs	r3, #1
 8004006:	9304      	str	r3, [sp, #16]

  /* One or two pieces?*/
  if (startidx < endidx) {
 8004008:	9a07      	ldr	r2, [sp, #28]
 800400a:	9b05      	ldr	r3, [sp, #20]
 800400c:	429a      	cmp	r2, r3
 800400e:	d213      	bcs.n	8004038 <_mmcsd_get_slice+0x78>
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8004010:	9b07      	ldr	r3, [sp, #28]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	9a03      	ldr	r2, [sp, #12]
 8004016:	4413      	add	r3, r2
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	9b06      	ldr	r3, [sp, #24]
 800401c:	40da      	lsrs	r2, r3
           ((data[endidx] & endmask) << (32U - startoff));
 800401e:	9b05      	ldr	r3, [sp, #20]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	9903      	ldr	r1, [sp, #12]
 8004024:	440b      	add	r3, r1
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	9b04      	ldr	r3, [sp, #16]
 800402a:	400b      	ands	r3, r1
 800402c:	9906      	ldr	r1, [sp, #24]
 800402e:	f1c1 0120 	rsb	r1, r1, #32
 8004032:	408b      	lsls	r3, r1
  endidx   = end / 32U;
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;

  /* One or two pieces?*/
  if (startidx < endidx) {
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8004034:	4313      	orrs	r3, r2
 8004036:	e009      	b.n	800404c <_mmcsd_get_slice+0x8c>
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8004038:	9b07      	ldr	r3, [sp, #28]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	9a03      	ldr	r2, [sp, #12]
 800403e:	4413      	add	r3, r2
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	9b04      	ldr	r3, [sp, #16]
 8004044:	401a      	ands	r2, r3
 8004046:	9b06      	ldr	r3, [sp, #24]
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	b009      	add	sp, #36	; 0x24
 8004050:	f85d fb04 	ldr.w	pc, [sp], #4
 8004054:	08005c30 	.word	0x08005c30
	...

08004060 <queue_init.lto_priv.390>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8004060:	b082      	sub	sp, #8
 8004062:	9001      	str	r0, [sp, #4]

  tqp->p_next = (thread_t *)tqp;
 8004064:	9b01      	ldr	r3, [sp, #4]
 8004066:	9a01      	ldr	r2, [sp, #4]
 8004068:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800406a:	9b01      	ldr	r3, [sp, #4]
 800406c:	9a01      	ldr	r2, [sp, #4]
 800406e:	605a      	str	r2, [r3, #4]
}
 8004070:	b002      	add	sp, #8
 8004072:	4770      	bx	lr
	...

08004080 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8004080:	b500      	push	{lr}
 8004082:	b083      	sub	sp, #12
 8004084:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);
 8004086:	9b01      	ldr	r3, [sp, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <chMtxObjectInit+0x12>
 800408c:	4806      	ldr	r0, [pc, #24]	; (80040a8 <chMtxObjectInit+0x28>)
 800408e:	f000 f9af 	bl	80043f0 <chSysHalt>

  queue_init(&mp->m_queue);
 8004092:	9b01      	ldr	r3, [sp, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ffe3 	bl	8004060 <queue_init.lto_priv.390>
  mp->m_owner = NULL;
 800409a:	9b01      	ldr	r3, [sp, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->m_cnt = (cnt_t)0;
#endif
}
 80040a0:	b003      	add	sp, #12
 80040a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80040a6:	bf00      	nop
 80040a8:	08005c10 	.word	0x08005c10
 80040ac:	00000000 	.word	0x00000000

080040b0 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
	...

080040c0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
	...

080040d0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80040d0:	e7fe      	b.n	80040d0 <__default_exit>
 80040d2:	bf00      	nop
	...

080040e0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80040e0:	b084      	sub	sp, #16
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 80040e2:	4b16      	ldr	r3, [pc, #88]	; (800413c <__init_ram_areas+0x5c>)
 80040e4:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 80040e6:	9b03      	ldr	r3, [sp, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 80040ec:	9b03      	ldr	r3, [sp, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	e009      	b.n	8004108 <__init_ram_areas+0x28>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 80040f4:	9b02      	ldr	r3, [sp, #8]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	9b01      	ldr	r3, [sp, #4]
 80040fa:	601a      	str	r2, [r3, #0]
      p++;
 80040fc:	9b01      	ldr	r3, [sp, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	9301      	str	r3, [sp, #4]
      tp++;
 8004102:	9b02      	ldr	r3, [sp, #8]
 8004104:	3304      	adds	r3, #4
 8004106:	9302      	str	r3, [sp, #8]
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8004108:	9b03      	ldr	r3, [sp, #12]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	9b01      	ldr	r3, [sp, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d8f0      	bhi.n	80040f4 <__init_ram_areas+0x14>
 8004112:	e005      	b.n	8004120 <__init_ram_areas+0x40>
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8004114:	9b01      	ldr	r3, [sp, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
      p++;
 800411a:	9b01      	ldr	r3, [sp, #4]
 800411c:	3304      	adds	r3, #4
 800411e:	9301      	str	r3, [sp, #4]
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	9b01      	ldr	r3, [sp, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d8f4      	bhi.n	8004114 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	3310      	adds	r3, #16
 800412e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8004130:	9b03      	ldr	r3, [sp, #12]
 8004132:	4a03      	ldr	r2, [pc, #12]	; (8004140 <__init_ram_areas+0x60>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d3d6      	bcc.n	80040e6 <__init_ram_areas+0x6>
#endif
}
 8004138:	b004      	add	sp, #16
 800413a:	4770      	bx	lr
 800413c:	08005ab0 	.word	0x08005ab0
 8004140:	08005b30 	.word	0x08005b30
	...

08004150 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8004150:	e7fe      	b.n	8004150 <BusFault_Handler>
 8004152:	bf00      	nop
	...

08004160 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004160:	b084      	sub	sp, #16
 8004162:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <NVIC_SetPriorityGrouping+0x38>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8004172:	9a02      	ldr	r2, [sp, #8]
 8004174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004178:	4013      	ands	r3, r2
 800417a:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 800417c:	9b03      	ldr	r3, [sp, #12]
 800417e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004180:	9b02      	ldr	r3, [sp, #8]
 8004182:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418c:	9302      	str	r3, [sp, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800418e:	4a02      	ldr	r2, [pc, #8]	; (8004198 <NVIC_SetPriorityGrouping+0x38>)
 8004190:	9b02      	ldr	r3, [sp, #8]
 8004192:	60d3      	str	r3, [r2, #12]
}
 8004194:	b004      	add	sp, #16
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00
 800419c:	00000000 	.word	0x00000000

080041a0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a0:	b082      	sub	sp, #8
 80041a2:	4603      	mov	r3, r0
 80041a4:	9100      	str	r1, [sp, #0]
 80041a6:	f88d 3007 	strb.w	r3, [sp, #7]
  if((int32_t)IRQn < 0) {
 80041aa:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	da0c      	bge.n	80041cc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b2:	490c      	ldr	r1, [pc, #48]	; (80041e4 <NVIC_SetPriority+0x44>)
 80041b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	3b04      	subs	r3, #4
 80041be:	9a00      	ldr	r2, [sp, #0]
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	0112      	lsls	r2, r2, #4
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	440b      	add	r3, r1
 80041c8:	761a      	strb	r2, [r3, #24]
 80041ca:	e009      	b.n	80041e0 <NVIC_SetPriority+0x40>
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041cc:	4906      	ldr	r1, [pc, #24]	; (80041e8 <NVIC_SetPriority+0x48>)
 80041ce:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80041d2:	9a00      	ldr	r2, [sp, #0]
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	0112      	lsls	r2, r2, #4
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	440b      	add	r3, r1
 80041dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80041e0:	b002      	add	sp, #8
 80041e2:	4770      	bx	lr
 80041e4:	e000ed00 	.word	0xe000ed00
 80041e8:	e000e100 	.word	0xe000e100
 80041ec:	00000000 	.word	0x00000000

080041f0 <port_init>:
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {
 80041f0:	b508      	push	{r3, lr}

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <port_init+0x3c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	609a      	str	r2, [r3, #8]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 80041f8:	2003      	movs	r0, #3
 80041fa:	f7ff ffb1 	bl	8004160 <NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80041fe:	4a0c      	ldr	r2, [pc, #48]	; (8004230 <port_init+0x40>)
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <port_init+0x40>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004208:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <port_init+0x44>)
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <port_init+0x44>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8004216:	f06f 0004 	mvn.w	r0, #4
 800421a:	2101      	movs	r1, #1
 800421c:	f7ff ffc0 	bl	80041a0 <NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8004220:	f06f 0001 	mvn.w	r0, #1
 8004224:	2102      	movs	r1, #2
 8004226:	f7ff ffbb 	bl	80041a0 <NVIC_SetPriority>
}
 800422a:	bd08      	pop	{r3, pc}
 800422c:	e000ed00 	.word	0xe000ed00
 8004230:	e000edf0 	.word	0xe000edf0
 8004234:	e0001000 	.word	0xe0001000
	...

08004240 <port_lock.lto_priv.407>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8004240:	b082      	sub	sp, #8
 8004242:	2320      	movs	r3, #32
 8004244:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004246:	9b01      	ldr	r3, [sp, #4]
 8004248:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800424c:	b002      	add	sp, #8
 800424e:	4770      	bx	lr

08004250 <port_unlock.lto_priv.401>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8004250:	b082      	sub	sp, #8
 8004252:	2300      	movs	r3, #0
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	9b01      	ldr	r3, [sp, #4]
 8004258:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800425c:	b002      	add	sp, #8
 800425e:	4770      	bx	lr

08004260 <port_lock_from_isr.lto_priv.417>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8004260:	b508      	push	{r3, lr}

  port_lock();
 8004262:	f7ff ffed 	bl	8004240 <port_lock.lto_priv.407>
}
 8004266:	bd08      	pop	{r3, pc}
	...

08004270 <port_unlock_from_isr.lto_priv.413>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8004270:	b508      	push	{r3, lr}

  port_unlock();
 8004272:	f7ff ffed 	bl	8004250 <port_unlock.lto_priv.401>
}
 8004276:	bd08      	pop	{r3, pc}
	...

08004280 <port_disable>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004280:	b672      	cpsid	i
 *          the priority mask to level 0.
 */
static inline void port_disable(void) {

  __disable_irq();
}
 8004282:	4770      	bx	lr
	...

08004290 <port_enable>:

/**
 * @brief   Enables all the interrupt sources.
 * @note    In this port it lowers the base priority to user level.
 */
static inline void port_enable(void) {
 8004290:	b082      	sub	sp, #8
 8004292:	2300      	movs	r3, #0
 8004294:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004296:	9b01      	ldr	r3, [sp, #4]
 8004298:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800429c:	b662      	cpsie	i

#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#endif
  __enable_irq();
}
 800429e:	b002      	add	sp, #8
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
	...

080042b0 <chSysEnable>:
 * @note    This API is no replacement for @p chSysUnlock(), the
 *          @p chSysUnlock() could do more than just enable the interrupts.
 *
 * @special
 */
static inline void chSysEnable(void) {
 80042b0:	b508      	push	{r3, lr}

  _dbg_check_enable();
 80042b2:	f000 f8ed 	bl	8004490 <_dbg_check_enable>
  port_enable();
 80042b6:	f7ff ffeb 	bl	8004290 <port_enable>
}
 80042ba:	bd08      	pop	{r3, pc}
 80042bc:	0000      	movs	r0, r0
	...

080042c0 <chSysLockFromISR.lto_priv.443>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80042c0:	b508      	push	{r3, lr}

  port_lock_from_isr();
 80042c2:	f7ff ffcd 	bl	8004260 <port_lock_from_isr.lto_priv.417>
  _stats_start_measure_crit_isr();
 80042c6:	f001 f873 	bl	80053b0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80042ca:	f000 f929 	bl	8004520 <_dbg_check_lock_from_isr>
}
 80042ce:	bd08      	pop	{r3, pc}

080042d0 <chSysUnlockFromISR.lto_priv.441>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 80042d0:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
 80042d2:	f000 f93d 	bl	8004550 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80042d6:	f001 f873 	bl	80053c0 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 80042da:	f7ff ffc9 	bl	8004270 <port_unlock_from_isr.lto_priv.413>
}
 80042de:	bd08      	pop	{r3, pc}

080042e0 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 80042e0:	b500      	push	{lr}
 80042e2:	b083      	sub	sp, #12

  chDbgCheckClassI();
 80042e4:	f000 f98c 	bl	8004600 <chDbgCheckClassI>

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 80042e8:	4b18      	ldr	r3, [pc, #96]	; (800434c <chVTDoTickI+0x6c>)
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	3301      	adds	r3, #1
 80042ee:	4a17      	ldr	r2, [pc, #92]	; (800434c <chVTDoTickI+0x6c>)
 80042f0:	6293      	str	r3, [r2, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80042f2:	4b16      	ldr	r3, [pc, #88]	; (800434c <chVTDoTickI+0x6c>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4a16      	ldr	r2, [pc, #88]	; (8004350 <chVTDoTickI+0x70>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d024      	beq.n	8004346 <chVTDoTickI+0x66>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 80042fc:	4b13      	ldr	r3, [pc, #76]	; (800434c <chVTDoTickI+0x6c>)
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	3a01      	subs	r2, #1
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	e019      	b.n	800433c <chVTDoTickI+0x5c>
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
 8004308:	4b10      	ldr	r3, [pc, #64]	; (800434c <chVTDoTickI+0x6c>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	9301      	str	r3, [sp, #4]
      fn = vtp->vt_func;
 800430e:	9b01      	ldr	r3, [sp, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	9300      	str	r3, [sp, #0]
      vtp->vt_func = NULL;
 8004314:	9b01      	ldr	r3, [sp, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	60da      	str	r2, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800431a:	9b01      	ldr	r3, [sp, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a0c      	ldr	r2, [pc, #48]	; (8004350 <chVTDoTickI+0x70>)
 8004320:	605a      	str	r2, [r3, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 8004322:	9b01      	ldr	r3, [sp, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a09      	ldr	r2, [pc, #36]	; (800434c <chVTDoTickI+0x6c>)
 8004328:	61d3      	str	r3, [r2, #28]
      chSysUnlockFromISR();
 800432a:	f7ff ffd1 	bl	80042d0 <chSysUnlockFromISR.lto_priv.441>
      fn(vtp->vt_par);
 800432e:	9b01      	ldr	r3, [sp, #4]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	9b00      	ldr	r3, [sp, #0]
 8004334:	4610      	mov	r0, r2
 8004336:	4798      	blx	r3
      chSysLockFromISR();
 8004338:	f7ff ffc2 	bl	80042c0 <chSysLockFromISR.lto_priv.443>
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <chVTDoTickI+0x6c>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0e0      	beq.n	8004308 <chVTDoTickI+0x28>

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
              (now + delta - ch.vtlist.vt_lasttime),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8004346:	b003      	add	sp, #12
 8004348:	f85d fb04 	ldr.w	pc, [sp], #4
 800434c:	20000800 	.word	0x20000800
 8004350:	2000081c 	.word	0x2000081c
	...

08004360 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8004360:	b082      	sub	sp, #8
 8004362:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8004364:	4b02      	ldr	r3, [pc, #8]	; (8004370 <chRegSetThreadName+0x10>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	9a01      	ldr	r2, [sp, #4]
 800436a:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
 800436c:	b002      	add	sp, #8
 800436e:	4770      	bx	lr
 8004370:	20000800 	.word	0x20000800
	...

08004380 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8004380:	b508      	push	{r3, lr}
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
 8004382:	f7ff ff35 	bl	80041f0 <port_init>
  _scheduler_init();
 8004386:	f000 fa93 	bl	80048b0 <_scheduler_init>
  _vt_init();
 800438a:	f000 f969 	bl	8004660 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800438e:	f000 ff1f 	bl	80051d0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8004392:	f7ff fd05 	bl	8003da0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8004396:	f7ff fd53 	bl	8003e40 <_heap_init>
#endif
#if CH_DBG_STATISTICS == TRUE
  _stats_init();
 800439a:	f000 ffb1 	bl	8005300 <_stats_init>
#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
 800439e:	480e      	ldr	r0, [pc, #56]	; (80043d8 <chSysInit+0x58>)
 80043a0:	2101      	movs	r1, #1
 80043a2:	f000 fd2d 	bl	8004e00 <_thread_init>
 80043a6:	4602      	mov	r2, r0
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <chSysInit+0x5c>)
 80043aa:	619a      	str	r2, [r3, #24]
#endif

  currp->p_state = CH_STATE_CURRENT;
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <chSysInit+0x5c>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2020 	strb.w	r2, [r3, #32]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <chSysInit+0x5c>)
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <chSysInit+0x60>)
 80043bc:	61da      	str	r2, [r3, #28]
#endif

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->p_stats);
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <chSysInit+0x5c>)
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	3350      	adds	r3, #80	; 0x50
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 ff3b 	bl	8005240 <chTMStartMeasurementX>
#endif

  chSysEnable();
 80043ca:	f7ff ff71 	bl	80042b0 <chSysEnable>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Note, &ch_debug points to the string "main" if the registry is
     active.*/
  chRegSetThreadName((const char *)&ch_debug);
 80043ce:	4805      	ldr	r0, [pc, #20]	; (80043e4 <chSysInit+0x64>)
 80043d0:	f7ff ffc6 	bl	8004360 <chRegSetThreadName>
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 80043d4:	bd08      	pop	{r3, pc}
 80043d6:	bf00      	nop
 80043d8:	20000838 	.word	0x20000838
 80043dc:	20000800 	.word	0x20000800
 80043e0:	20000400 	.word	0x20000400
 80043e4:	08005bf0 	.word	0x08005bf0
	...

080043f0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 80043f0:	b500      	push	{lr}
 80043f2:	b083      	sub	sp, #12
 80043f4:	9001      	str	r0, [sp, #4]

  port_disable();
 80043f6:	f7ff ff43 	bl	8004280 <port_disable>
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80043fa:	4a02      	ldr	r2, [pc, #8]	; (8004404 <chSysHalt+0x14>)
 80043fc:	9b01      	ldr	r3, [sp, #4]
 80043fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004400:	e7fe      	b.n	8004400 <chSysHalt+0x10>
 8004402:	bf00      	nop
 8004404:	20000800 	.word	0x20000800
	...

08004410 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8004410:	b508      	push	{r3, lr}

  chDbgCheckClassI();
 8004412:	f000 f8f5 	bl	8004600 <chDbgCheckClassI>

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <chSysTimerHandlerI+0x34>)
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <chSysTimerHandlerI+0x22>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <chSysTimerHandlerI+0x34>)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800442a:	3a01      	subs	r2, #1
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 8004432:	4b04      	ldr	r3, [pc, #16]	; (8004444 <chSysTimerHandlerI+0x34>)
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004438:	3201      	adds	r2, #1
 800443a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
  chVTDoTickI();
 800443c:	f7ff ff50 	bl	80042e0 <chVTDoTickI>
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 8004440:	bd08      	pop	{r3, pc}
 8004442:	bf00      	nop
 8004444:	20000800 	.word	0x20000800
	...

08004450 <port_lock.lto_priv.408>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8004450:	b082      	sub	sp, #8
 8004452:	2320      	movs	r3, #32
 8004454:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004456:	9b01      	ldr	r3, [sp, #4]
 8004458:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800445c:	b002      	add	sp, #8
 800445e:	4770      	bx	lr

08004460 <port_unlock.lto_priv.402>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8004460:	b082      	sub	sp, #8
 8004462:	2300      	movs	r3, #0
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800446c:	b002      	add	sp, #8
 800446e:	4770      	bx	lr

08004470 <port_lock_from_isr.lto_priv.418>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8004470:	b508      	push	{r3, lr}

  port_lock();
 8004472:	f7ff ffed 	bl	8004450 <port_lock.lto_priv.408>
}
 8004476:	bd08      	pop	{r3, pc}
	...

08004480 <port_unlock_from_isr.lto_priv.414>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8004480:	b508      	push	{r3, lr}

  port_unlock();
 8004482:	f7ff ffed 	bl	8004460 <port_unlock.lto_priv.402>
}
 8004486:	bd08      	pop	{r3, pc}
	...

08004490 <_dbg_check_enable>:
/**
 * @brief   Guard code for @p chSysEnable().
 *
 * @notapi
 */
void _dbg_check_enable(void) {
 8004490:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <_dbg_check_enable+0x1c>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <_dbg_check_enable+0x12>
 800449a:	4b04      	ldr	r3, [pc, #16]	; (80044ac <_dbg_check_enable+0x1c>)
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <_dbg_check_enable+0x18>
    chSysHalt("SV#3");
 80044a2:	4803      	ldr	r0, [pc, #12]	; (80044b0 <_dbg_check_enable+0x20>)
 80044a4:	f7ff ffa4 	bl	80043f0 <chSysHalt>
  }
}
 80044a8:	bd08      	pop	{r3, pc}
 80044aa:	bf00      	nop
 80044ac:	20000800 	.word	0x20000800
 80044b0:	08005a50 	.word	0x08005a50
	...

080044c0 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 80044c0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <_dbg_check_lock+0x20>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <_dbg_check_lock+0x12>
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <_dbg_check_lock+0x20>)
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <_dbg_check_lock+0x18>
    chSysHalt("SV#4");
 80044d2:	4804      	ldr	r0, [pc, #16]	; (80044e4 <_dbg_check_lock+0x24>)
 80044d4:	f7ff ff8c 	bl	80043f0 <chSysHalt>
  }
  _dbg_enter_lock();
 80044d8:	4b01      	ldr	r3, [pc, #4]	; (80044e0 <_dbg_check_lock+0x20>)
 80044da:	2201      	movs	r2, #1
 80044dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80044de:	bd08      	pop	{r3, pc}
 80044e0:	20000800 	.word	0x20000800
 80044e4:	08005a58 	.word	0x08005a58
	...

080044f0 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 80044f0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <_dbg_check_unlock+0x20>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <_dbg_check_unlock+0x12>
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <_dbg_check_unlock+0x20>)
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	2b00      	cmp	r3, #0
 8004500:	dc02      	bgt.n	8004508 <_dbg_check_unlock+0x18>
    chSysHalt("SV#5");
 8004502:	4804      	ldr	r0, [pc, #16]	; (8004514 <_dbg_check_unlock+0x24>)
 8004504:	f7ff ff74 	bl	80043f0 <chSysHalt>
  }
  _dbg_leave_lock();
 8004508:	4b01      	ldr	r3, [pc, #4]	; (8004510 <_dbg_check_unlock+0x20>)
 800450a:	2200      	movs	r2, #0
 800450c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800450e:	bd08      	pop	{r3, pc}
 8004510:	20000800 	.word	0x20000800
 8004514:	08005a60 	.word	0x08005a60
	...

08004520 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 8004520:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004522:	4b07      	ldr	r3, [pc, #28]	; (8004540 <_dbg_check_lock_from_isr+0x20>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	2b00      	cmp	r3, #0
 8004528:	dd03      	ble.n	8004532 <_dbg_check_lock_from_isr+0x12>
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <_dbg_check_lock_from_isr+0x20>)
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <_dbg_check_lock_from_isr+0x18>
    chSysHalt("SV#6");
 8004532:	4804      	ldr	r0, [pc, #16]	; (8004544 <_dbg_check_lock_from_isr+0x24>)
 8004534:	f7ff ff5c 	bl	80043f0 <chSysHalt>
  }
  _dbg_enter_lock();
 8004538:	4b01      	ldr	r3, [pc, #4]	; (8004540 <_dbg_check_lock_from_isr+0x20>)
 800453a:	2201      	movs	r2, #1
 800453c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800453e:	bd08      	pop	{r3, pc}
 8004540:	20000800 	.word	0x20000800
 8004544:	08005a68 	.word	0x08005a68
	...

08004550 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8004550:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <_dbg_check_unlock_from_isr+0x20>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	2b00      	cmp	r3, #0
 8004558:	dd03      	ble.n	8004562 <_dbg_check_unlock_from_isr+0x12>
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <_dbg_check_unlock_from_isr+0x20>)
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	2b00      	cmp	r3, #0
 8004560:	dc02      	bgt.n	8004568 <_dbg_check_unlock_from_isr+0x18>
    chSysHalt("SV#7");
 8004562:	4804      	ldr	r0, [pc, #16]	; (8004574 <_dbg_check_unlock_from_isr+0x24>)
 8004564:	f7ff ff44 	bl	80043f0 <chSysHalt>
  }
  _dbg_leave_lock();
 8004568:	4b01      	ldr	r3, [pc, #4]	; (8004570 <_dbg_check_unlock_from_isr+0x20>)
 800456a:	2200      	movs	r2, #0
 800456c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800456e:	bd08      	pop	{r3, pc}
 8004570:	20000800 	.word	0x20000800
 8004574:	08005a70 	.word	0x08005a70
	...

08004580 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8004580:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8004582:	f7ff ff75 	bl	8004470 <port_lock_from_isr.lto_priv.418>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <_dbg_check_enter_isr+0x2c>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	2b00      	cmp	r3, #0
 800458c:	db03      	blt.n	8004596 <_dbg_check_enter_isr+0x16>
 800458e:	4b07      	ldr	r3, [pc, #28]	; (80045ac <_dbg_check_enter_isr+0x2c>)
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <_dbg_check_enter_isr+0x1c>
    chSysHalt("SV#8");
 8004596:	4806      	ldr	r0, [pc, #24]	; (80045b0 <_dbg_check_enter_isr+0x30>)
 8004598:	f7ff ff2a 	bl	80043f0 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <_dbg_check_enter_isr+0x2c>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a02      	ldr	r2, [pc, #8]	; (80045ac <_dbg_check_enter_isr+0x2c>)
 80045a4:	6313      	str	r3, [r2, #48]	; 0x30
  port_unlock_from_isr();
 80045a6:	f7ff ff6b 	bl	8004480 <port_unlock_from_isr.lto_priv.414>
}
 80045aa:	bd08      	pop	{r3, pc}
 80045ac:	20000800 	.word	0x20000800
 80045b0:	08005a78 	.word	0x08005a78
	...

080045c0 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 80045c0:	b508      	push	{r3, lr}

  port_lock_from_isr();
 80045c2:	f7ff ff55 	bl	8004470 <port_lock_from_isr.lto_priv.418>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <_dbg_check_leave_isr+0x2c>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	dd03      	ble.n	80045d6 <_dbg_check_leave_isr+0x16>
 80045ce:	4b07      	ldr	r3, [pc, #28]	; (80045ec <_dbg_check_leave_isr+0x2c>)
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <_dbg_check_leave_isr+0x1c>
    chSysHalt("SV#9");
 80045d6:	4806      	ldr	r0, [pc, #24]	; (80045f0 <_dbg_check_leave_isr+0x30>)
 80045d8:	f7ff ff0a 	bl	80043f0 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
 80045dc:	4b03      	ldr	r3, [pc, #12]	; (80045ec <_dbg_check_leave_isr+0x2c>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	3b01      	subs	r3, #1
 80045e2:	4a02      	ldr	r2, [pc, #8]	; (80045ec <_dbg_check_leave_isr+0x2c>)
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30
  port_unlock_from_isr();
 80045e6:	f7ff ff4b 	bl	8004480 <port_unlock_from_isr.lto_priv.414>
}
 80045ea:	bd08      	pop	{r3, pc}
 80045ec:	20000800 	.word	0x20000800
 80045f0:	08005a80 	.word	0x08005a80
	...

08004600 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 8004600:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <chDbgCheckClassI+0x1c>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	2b00      	cmp	r3, #0
 8004608:	db03      	blt.n	8004612 <chDbgCheckClassI+0x12>
 800460a:	4b04      	ldr	r3, [pc, #16]	; (800461c <chDbgCheckClassI+0x1c>)
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	2b00      	cmp	r3, #0
 8004610:	dc02      	bgt.n	8004618 <chDbgCheckClassI+0x18>
    chSysHalt("SV#10");
 8004612:	4803      	ldr	r0, [pc, #12]	; (8004620 <chDbgCheckClassI+0x20>)
 8004614:	f7ff feec 	bl	80043f0 <chSysHalt>
  }
}
 8004618:	bd08      	pop	{r3, pc}
 800461a:	bf00      	nop
 800461c:	20000800 	.word	0x20000800
 8004620:	08005a88 	.word	0x08005a88
	...

08004630 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8004630:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <chDbgCheckClassS+0x1c>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <chDbgCheckClassS+0x12>
 800463a:	4b04      	ldr	r3, [pc, #16]	; (800464c <chDbgCheckClassS+0x1c>)
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	2b00      	cmp	r3, #0
 8004640:	dc02      	bgt.n	8004648 <chDbgCheckClassS+0x18>
    chSysHalt("SV#11");
 8004642:	4803      	ldr	r0, [pc, #12]	; (8004650 <chDbgCheckClassS+0x20>)
 8004644:	f7ff fed4 	bl	80043f0 <chSysHalt>
  }
}
 8004648:	bd08      	pop	{r3, pc}
 800464a:	bf00      	nop
 800464c:	20000800 	.word	0x20000800
 8004650:	08005a90 	.word	0x08005a90
	...

08004660 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <_vt_init+0x1c>)
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <_vt_init+0x20>)
 8004664:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <_vt_init+0x1c>)
 8004668:	4a05      	ldr	r2, [pc, #20]	; (8004680 <_vt_init+0x20>)
 800466a:	621a      	str	r2, [r3, #32]
  ch.vtlist.vt_delta = (systime_t)-1;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <_vt_init+0x1c>)
 800466e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 8004674:	4b01      	ldr	r3, [pc, #4]	; (800467c <_vt_init+0x1c>)
 8004676:	2200      	movs	r2, #0
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800467a:	4770      	bx	lr
 800467c:	20000800 	.word	0x20000800
 8004680:	2000081c 	.word	0x2000081c
	...

08004690 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8004690:	b500      	push	{lr}
 8004692:	b087      	sub	sp, #28
 8004694:	9003      	str	r0, [sp, #12]
 8004696:	9102      	str	r1, [sp, #8]
 8004698:	9201      	str	r2, [sp, #4]
 800469a:	9300      	str	r3, [sp, #0]
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 800469c:	f7ff ffb0 	bl	8004600 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <chVTDoSetI+0x22>
 80046a6:	9b01      	ldr	r3, [sp, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <chVTDoSetI+0x22>
 80046ac:	9b02      	ldr	r3, [sp, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <chVTDoSetI+0x28>
 80046b2:	481d      	ldr	r0, [pc, #116]	; (8004728 <chVTDoSetI+0x98>)
 80046b4:	f7ff fe9c 	bl	80043f0 <chSysHalt>

  vtp->vt_par = par;
 80046b8:	9b03      	ldr	r3, [sp, #12]
 80046ba:	9a00      	ldr	r2, [sp, #0]
 80046bc:	611a      	str	r2, [r3, #16]
  vtp->vt_func = vtfunc;
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	9a01      	ldr	r2, [sp, #4]
 80046c2:	60da      	str	r2, [r3, #12]
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
    }
  }
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;
 80046c4:	9b02      	ldr	r3, [sp, #8]
 80046c6:	9304      	str	r3, [sp, #16]

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.vt_next;
 80046c8:	4b18      	ldr	r3, [pc, #96]	; (800472c <chVTDoSetI+0x9c>)
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	9305      	str	r3, [sp, #20]
 80046ce:	e007      	b.n	80046e0 <chVTDoSetI+0x50>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80046d0:	9b05      	ldr	r3, [sp, #20]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	9a04      	ldr	r2, [sp, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	9304      	str	r3, [sp, #16]
    p = p->vt_next;
 80046da:	9b05      	ldr	r3, [sp, #20]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	9305      	str	r3, [sp, #20]
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 80046e0:	9b05      	ldr	r3, [sp, #20]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	9b04      	ldr	r3, [sp, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d3f2      	bcc.n	80046d0 <chVTDoSetI+0x40>
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 80046ea:	9b03      	ldr	r3, [sp, #12]
 80046ec:	9a05      	ldr	r2, [sp, #20]
 80046ee:	601a      	str	r2, [r3, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	605a      	str	r2, [r3, #4]
  vtp->vt_prev->vt_next = vtp;
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	9a03      	ldr	r2, [sp, #12]
 8004700:	601a      	str	r2, [r3, #0]
  p->vt_prev = vtp;
 8004702:	9b05      	ldr	r3, [sp, #20]
 8004704:	9a03      	ldr	r2, [sp, #12]
 8004706:	605a      	str	r2, [r3, #4]
  vtp->vt_delta = delta
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	9a04      	ldr	r2, [sp, #16]
 800470c:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800470e:	9b05      	ldr	r3, [sp, #20]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	9b04      	ldr	r3, [sp, #16]
 8004714:	1ad2      	subs	r2, r2, r3
 8004716:	9b05      	ldr	r3, [sp, #20]
 8004718:	609a      	str	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <chVTDoSetI+0x9c>)
 800471c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004720:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004722:	b007      	add	sp, #28
 8004724:	f85d fb04 	ldr.w	pc, [sp], #4
 8004728:	08005b30 	.word	0x08005b30
 800472c:	20000800 	.word	0x20000800

08004730 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8004730:	b500      	push	{lr}
 8004732:	b083      	sub	sp, #12
 8004734:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8004736:	f7ff ff63 	bl	8004600 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 800473a:	9b01      	ldr	r3, [sp, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <chVTDoResetI+0x16>
 8004740:	4813      	ldr	r0, [pc, #76]	; (8004790 <chVTDoResetI+0x60>)
 8004742:	f7ff fe55 	bl	80043f0 <chSysHalt>
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");
 8004746:	9b01      	ldr	r3, [sp, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <chVTDoResetI+0x24>
 800474e:	4810      	ldr	r0, [pc, #64]	; (8004790 <chVTDoResetI+0x60>)
 8004750:	f7ff fe4e 	bl	80043f0 <chSysHalt>

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8004754:	9b01      	ldr	r3, [sp, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	9a01      	ldr	r2, [sp, #4]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	6891      	ldr	r1, [r2, #8]
 800475e:	9a01      	ldr	r2, [sp, #4]
 8004760:	6892      	ldr	r2, [r2, #8]
 8004762:	440a      	add	r2, r1
 8004764:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	9a01      	ldr	r2, [sp, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	601a      	str	r2, [r3, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8004770:	9b01      	ldr	r3, [sp, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	9a01      	ldr	r2, [sp, #4]
 8004776:	6852      	ldr	r2, [r2, #4]
 8004778:	605a      	str	r2, [r3, #4]
  vtp->vt_func = NULL;
 800477a:	9b01      	ldr	r3, [sp, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	60da      	str	r2, [r3, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8004780:	4b04      	ldr	r3, [pc, #16]	; (8004794 <chVTDoResetI+0x64>)
 8004782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004786:	625a      	str	r2, [r3, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8004788:	b003      	add	sp, #12
 800478a:	f85d fb04 	ldr.w	pc, [sp], #4
 800478e:	bf00      	nop
 8004790:	08005b40 	.word	0x08005b40
 8004794:	20000800 	.word	0x20000800
	...

080047a0 <port_lock.lto_priv.409>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80047a0:	b082      	sub	sp, #8
 80047a2:	2320      	movs	r3, #32
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	9b01      	ldr	r3, [sp, #4]
 80047a8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80047ac:	b002      	add	sp, #8
 80047ae:	4770      	bx	lr

080047b0 <port_unlock.lto_priv.403>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80047b0:	b082      	sub	sp, #8
 80047b2:	2300      	movs	r3, #0
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	9b01      	ldr	r3, [sp, #4]
 80047b8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80047bc:	b002      	add	sp, #8
 80047be:	4770      	bx	lr

080047c0 <port_lock_from_isr.lto_priv.419>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80047c0:	b508      	push	{r3, lr}

  port_lock();
 80047c2:	f7ff ffed 	bl	80047a0 <port_lock.lto_priv.409>
}
 80047c6:	bd08      	pop	{r3, pc}
	...

080047d0 <port_unlock_from_isr.lto_priv.415>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80047d0:	b508      	push	{r3, lr}

  port_unlock();
 80047d2:	f7ff ffed 	bl	80047b0 <port_unlock.lto_priv.403>
}
 80047d6:	bd08      	pop	{r3, pc}
	...

080047e0 <queue_init.lto_priv.439>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 80047e0:	b082      	sub	sp, #8
 80047e2:	9001      	str	r0, [sp, #4]

  tqp->p_next = (thread_t *)tqp;
 80047e4:	9b01      	ldr	r3, [sp, #4]
 80047e6:	9a01      	ldr	r2, [sp, #4]
 80047e8:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	9a01      	ldr	r2, [sp, #4]
 80047ee:	605a      	str	r2, [r3, #4]
}
 80047f0:	b002      	add	sp, #8
 80047f2:	4770      	bx	lr
	...

08004800 <queue_fifo_remove.lto_priv.437>:
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8004800:	b084      	sub	sp, #16
 8004802:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->p_next;
 8004804:	9b01      	ldr	r3, [sp, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	9303      	str	r3, [sp, #12]

  tqp->p_next = tp->p_next;
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004812:	9b01      	ldr	r3, [sp, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	9a01      	ldr	r2, [sp, #4]
 8004818:	605a      	str	r2, [r3, #4]

  return tp;
 800481a:	9b03      	ldr	r3, [sp, #12]
}
 800481c:	4618      	mov	r0, r3
 800481e:	b004      	add	sp, #16
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
	...

08004830 <queue_dequeue>:
  tqp->p_prev->p_next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 8004830:	b082      	sub	sp, #8
 8004832:	9001      	str	r0, [sp, #4]

  tp->p_prev->p_next = tp->p_next;
 8004834:	9b01      	ldr	r3, [sp, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	9a01      	ldr	r2, [sp, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800483e:	9b01      	ldr	r3, [sp, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	9a01      	ldr	r2, [sp, #4]
 8004844:	6852      	ldr	r2, [r2, #4]
 8004846:	605a      	str	r2, [r3, #4]

  return tp;
 8004848:	9b01      	ldr	r3, [sp, #4]
}
 800484a:	4618      	mov	r0, r3
 800484c:	b002      	add	sp, #8
 800484e:	4770      	bx	lr

08004850 <chSysLockFromISR.lto_priv.444>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8004850:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8004852:	f7ff ffb5 	bl	80047c0 <port_lock_from_isr.lto_priv.419>
  _stats_start_measure_crit_isr();
 8004856:	f000 fdab 	bl	80053b0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800485a:	f7ff fe61 	bl	8004520 <_dbg_check_lock_from_isr>
}
 800485e:	bd08      	pop	{r3, pc}

08004860 <chSysUnlockFromISR.lto_priv.442>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8004860:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
 8004862:	f7ff fe75 	bl	8004550 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004866:	f000 fdab 	bl	80053c0 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 800486a:	f7ff ffb1 	bl	80047d0 <port_unlock_from_isr.lto_priv.415>
}
 800486e:	bd08      	pop	{r3, pc}

08004870 <chVTIsArmedI>:
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {
 8004870:	b500      	push	{lr}
 8004872:	b083      	sub	sp, #12
 8004874:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8004876:	f7ff fec3 	bl	8004600 <chDbgCheckClassI>

  return (bool)(vtp->vt_func != NULL);
 800487a:	9b01      	ldr	r3, [sp, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	b2db      	uxtb	r3, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	b003      	add	sp, #12
 800488c:	f85d fb04 	ldr.w	pc, [sp], #4

08004890 <chSemFastSignalI>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8004890:	b500      	push	{lr}
 8004892:	b083      	sub	sp, #12
 8004894:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8004896:	f7ff feb3 	bl	8004600 <chDbgCheckClassI>

  sp->s_cnt++;
 800489a:	9b01      	ldr	r3, [sp, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	9b01      	ldr	r3, [sp, #4]
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	b003      	add	sp, #12
 80048a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80048aa:	bf00      	nop
 80048ac:	0000      	movs	r0, r0
	...

080048b0 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 80048b0:	b508      	push	{r3, lr}

  queue_init(&ch.rlist.r_queue);
 80048b2:	4806      	ldr	r0, [pc, #24]	; (80048cc <_scheduler_init+0x1c>)
 80048b4:	f7ff ff94 	bl	80047e0 <queue_init.lto_priv.439>
  ch.rlist.r_prio = NOPRIO;
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <_scheduler_init+0x1c>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80048be:	4b03      	ldr	r3, [pc, #12]	; (80048cc <_scheduler_init+0x1c>)
 80048c0:	4a02      	ldr	r2, [pc, #8]	; (80048cc <_scheduler_init+0x1c>)
 80048c2:	611a      	str	r2, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80048c4:	4b01      	ldr	r3, [pc, #4]	; (80048cc <_scheduler_init+0x1c>)
 80048c6:	4a01      	ldr	r2, [pc, #4]	; (80048cc <_scheduler_init+0x1c>)
 80048c8:	615a      	str	r2, [r3, #20]
#endif
}
 80048ca:	bd08      	pop	{r3, pc}
 80048cc:	20000800 	.word	0x20000800

080048d0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80048d0:	b500      	push	{lr}
 80048d2:	b085      	sub	sp, #20
 80048d4:	9001      	str	r0, [sp, #4]
  thread_t *cp;

  chDbgCheckClassI();
 80048d6:	f7ff fe93 	bl	8004600 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80048da:	9b01      	ldr	r3, [sp, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <chSchReadyI+0x16>
 80048e0:	4818      	ldr	r0, [pc, #96]	; (8004944 <chSchReadyI+0x74>)
 80048e2:	f7ff fd85 	bl	80043f0 <chSysHalt>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 80048e6:	9b01      	ldr	r3, [sp, #4]
 80048e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <chSchReadyI+0x2a>
 80048f0:	9b01      	ldr	r3, [sp, #4]
 80048f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048f6:	2b0f      	cmp	r3, #15
 80048f8:	d102      	bne.n	8004900 <chSchReadyI+0x30>
 80048fa:	4812      	ldr	r0, [pc, #72]	; (8004944 <chSchReadyI+0x74>)
 80048fc:	f7ff fd78 	bl	80043f0 <chSysHalt>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8004900:	9b01      	ldr	r3, [sp, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <chSchReadyI+0x78>)
 800490a:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->p_next;
 800490c:	9b03      	ldr	r3, [sp, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	9303      	str	r3, [sp, #12]
  } while (cp->p_prio >= tp->p_prio);
 8004912:	9b03      	ldr	r3, [sp, #12]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	9b01      	ldr	r3, [sp, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	d2f6      	bcs.n	800490c <chSchReadyI+0x3c>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800491e:	9b01      	ldr	r3, [sp, #4]
 8004920:	9a03      	ldr	r2, [sp, #12]
 8004922:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	9b01      	ldr	r3, [sp, #4]
 800492a:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
 800492c:	9b01      	ldr	r3, [sp, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	9a01      	ldr	r2, [sp, #4]
 8004932:	601a      	str	r2, [r3, #0]
  cp->p_prev = tp;
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	9a01      	ldr	r2, [sp, #4]
 8004938:	605a      	str	r2, [r3, #4]

  return tp;
 800493a:	9b01      	ldr	r3, [sp, #4]
}
 800493c:	4618      	mov	r0, r3
 800493e:	b005      	add	sp, #20
 8004940:	f85d fb04 	ldr.w	pc, [sp], #4
 8004944:	08005b50 	.word	0x08005b50
 8004948:	20000800 	.word	0x20000800
 800494c:	00000000 	.word	0x00000000

08004950 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8004950:	b510      	push	{r4, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	4603      	mov	r3, r0
 8004956:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *otp;

  chDbgCheckClassS();
 800495a:	f7ff fe69 	bl	8004630 <chDbgCheckClassS>

  otp = currp;
 800495e:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <chSchGoSleepS+0x78>)
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	9303      	str	r3, [sp, #12]
  otp->p_state = newstate;
 8004964:	9b03      	ldr	r3, [sp, #12]
 8004966:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800496a:	f883 2020 	strb.w	r2, [r3, #32]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800496e:	9b03      	ldr	r3, [sp, #12]
 8004970:	2264      	movs	r2, #100	; 0x64
 8004972:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8004976:	4814      	ldr	r0, [pc, #80]	; (80049c8 <chSchGoSleepS+0x78>)
 8004978:	f7ff ff42 	bl	8004800 <queue_fifo_remove.lto_priv.437>
 800497c:	4602      	mov	r2, r0
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <chSchGoSleepS+0x78>)
 8004980:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <chSchGoSleepS+0x78>)
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2020 	strb.w	r2, [r3, #32]
  chSysSwitch(currp, otp);
 800498c:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <chSchGoSleepS+0x78>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	4618      	mov	r0, r3
 8004992:	9903      	ldr	r1, [sp, #12]
 8004994:	f000 fcdc 	bl	8005350 <_stats_ctxswc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8004998:	f3ef 8309 	mrs	r3, PSP
 800499c:	461c      	mov	r4, r3
  return(result);
 800499e:	4623      	mov	r3, r4
 80049a0:	9302      	str	r3, [sp, #8]
 80049a2:	9b02      	ldr	r3, [sp, #8]
 80049a4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d202      	bcs.n	80049b6 <chSchGoSleepS+0x66>
 80049b0:	4806      	ldr	r0, [pc, #24]	; (80049cc <chSchGoSleepS+0x7c>)
 80049b2:	f7ff fd1d 	bl	80043f0 <chSysHalt>
 80049b6:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <chSchGoSleepS+0x78>)
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	4618      	mov	r0, r3
 80049bc:	9903      	ldr	r1, [sp, #12]
 80049be:	f7fb fc87 	bl	80002d0 <_port_switch>
}
 80049c2:	b004      	add	sp, #16
 80049c4:	bd10      	pop	{r4, pc}
 80049c6:	bf00      	nop
 80049c8:	20000800 	.word	0x20000800
 80049cc:	08005a98 	.word	0x08005a98

080049d0 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80049d0:	b500      	push	{lr}
 80049d2:	b085      	sub	sp, #20
 80049d4:	9001      	str	r0, [sp, #4]
  thread_t *tp = (thread_t *)p;
 80049d6:	9b01      	ldr	r3, [sp, #4]
 80049d8:	9303      	str	r3, [sp, #12]

  chSysLockFromISR();
 80049da:	f7ff ff39 	bl	8004850 <chSysLockFromISR.lto_priv.444>
  switch (tp->p_state) {
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e4:	2b07      	cmp	r3, #7
 80049e6:	d823      	bhi.n	8004a30 <wakeup+0x60>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <wakeup+0x20>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a11 	.word	0x08004a11
 80049f4:	08004a31 	.word	0x08004a31
 80049f8:	08004a31 	.word	0x08004a31
 80049fc:	08004a17 	.word	0x08004a17
 8004a00:	08004a2b 	.word	0x08004a2b
 8004a04:	08004a21 	.word	0x08004a21
 8004a08:	08004a31 	.word	0x08004a31
 8004a0c:	08004a2b 	.word	0x08004a2b
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8004a10:	f7ff ff26 	bl	8004860 <chSysUnlockFromISR.lto_priv.442>
 8004a14:	e015      	b.n	8004a42 <wakeup+0x72>
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8004a16:	9b03      	ldr	r3, [sp, #12]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e007      	b.n	8004a30 <wakeup+0x60>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff33 	bl	8004890 <chSemFastSignalI>
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 8004a2a:	9803      	ldr	r0, [sp, #12]
 8004a2c:	f7ff ff00 	bl	8004830 <queue_dequeue>
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8004a30:	9b03      	ldr	r3, [sp, #12]
 8004a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
  (void) chSchReadyI(tp);
 8004a38:	9803      	ldr	r0, [sp, #12]
 8004a3a:	f7ff ff49 	bl	80048d0 <chSchReadyI>
  chSysUnlockFromISR();
 8004a3e:	f7ff ff0f 	bl	8004860 <chSysUnlockFromISR.lto_priv.442>
}
 8004a42:	b005      	add	sp, #20
 8004a44:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004a50 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8004a50:	b500      	push	{lr}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	4603      	mov	r3, r0
 8004a56:	9100      	str	r1, [sp, #0]
 8004a58:	f88d 3007 	strb.w	r3, [sp, #7]

  chDbgCheckClassS();
 8004a5c:	f7ff fde8 	bl	8004630 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
 8004a60:	9b00      	ldr	r3, [sp, #0]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a66:	d018      	beq.n	8004a9a <chSchGoSleepTimeoutS+0x4a>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <chSchGoSleepTimeoutS+0x64>)
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	aa03      	add	r2, sp, #12
 8004a6e:	4610      	mov	r0, r2
 8004a70:	9900      	ldr	r1, [sp, #0]
 8004a72:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <chSchGoSleepTimeoutS+0x68>)
 8004a74:	f7ff fe0c 	bl	8004690 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8004a78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff ff67 	bl	8004950 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8004a82:	ab03      	add	r3, sp, #12
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fef3 	bl	8004870 <chVTIsArmedI>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <chSchGoSleepTimeoutS+0x54>
      chVTDoResetI(&vt);
 8004a90:	ab03      	add	r3, sp, #12
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fe4c 	bl	8004730 <chVTDoResetI>
 8004a98:	e004      	b.n	8004aa4 <chSchGoSleepTimeoutS+0x54>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8004a9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff ff56 	bl	8004950 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <chSchGoSleepTimeoutS+0x64>)
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	b009      	add	sp, #36	; 0x24
 8004aae:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ab2:	bf00      	nop
 8004ab4:	20000800 	.word	0x20000800
 8004ab8:	080049d1 	.word	0x080049d1
 8004abc:	00000000 	.word	0x00000000

08004ac0 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	9001      	str	r0, [sp, #4]
 8004ac6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassS();
 8004ac8:	f7ff fdb2 	bl	8004630 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004acc:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <chSchWakeupS+0x94>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <chSchWakeupS+0x94>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00a      	beq.n	8004aec <chSchWakeupS+0x2c>
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <chSchWakeupS+0x94>)
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <chSchWakeupS+0x94>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d202      	bcs.n	8004aec <chSchWakeupS+0x2c>
 8004ae6:	481c      	ldr	r0, [pc, #112]	; (8004b58 <chSchWakeupS+0x98>)
 8004ae8:	f7ff fc82 	bl	80043f0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	9a00      	ldr	r2, [sp, #0]
 8004af0:	629a      	str	r2, [r3, #40]	; 0x28

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <chSchWakeupS+0x94>)
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d803      	bhi.n	8004b08 <chSchWakeupS+0x48>
    (void) chSchReadyI(ntp);
 8004b00:	9801      	ldr	r0, [sp, #4]
 8004b02:	f7ff fee5 	bl	80048d0 <chSchReadyI>
 8004b06:	e023      	b.n	8004b50 <chSchWakeupS+0x90>
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <chSchWakeupS+0x94>)
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fedf 	bl	80048d0 <chSchReadyI>
 8004b12:	9003      	str	r0, [sp, #12]
    setcurrp(ntp);
 8004b14:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <chSchWakeupS+0x94>)
 8004b16:	9b01      	ldr	r3, [sp, #4]
 8004b18:	6193      	str	r3, [r2, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8004b1a:	9b01      	ldr	r3, [sp, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2020 	strb.w	r2, [r3, #32]
    chSysSwitch(ntp, otp);
 8004b22:	9801      	ldr	r0, [sp, #4]
 8004b24:	9903      	ldr	r1, [sp, #12]
 8004b26:	f000 fc13 	bl	8005350 <_stats_ctxswc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8004b2a:	f3ef 8309 	mrs	r3, PSP
 8004b2e:	461c      	mov	r4, r3
  return(result);
 8004b30:	4623      	mov	r3, r4
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	9b02      	ldr	r3, [sp, #8]
 8004b36:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d202      	bcs.n	8004b48 <chSchWakeupS+0x88>
 8004b42:	4806      	ldr	r0, [pc, #24]	; (8004b5c <chSchWakeupS+0x9c>)
 8004b44:	f7ff fc54 	bl	80043f0 <chSysHalt>
 8004b48:	9801      	ldr	r0, [sp, #4]
 8004b4a:	9903      	ldr	r1, [sp, #12]
 8004b4c:	f7fb fbc0 	bl	80002d0 <_port_switch>
  }
}
 8004b50:	b004      	add	sp, #16
 8004b52:	bd10      	pop	{r4, pc}
 8004b54:	20000800 	.word	0x20000800
 8004b58:	08005b60 	.word	0x08005b60
 8004b5c:	08005a98 	.word	0x08005a98

08004b60 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8004b60:	b082      	sub	sp, #8
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8004b62:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <chSchIsPreemptionRequired+0x44>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	9301      	str	r3, [sp, #4]
  tprio_t p2 = currp->p_prio;
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <chSchIsPreemptionRequired+0x44>)
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	9300      	str	r3, [sp, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8004b72:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <chSchIsPreemptionRequired+0x44>)
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <chSchIsPreemptionRequired+0x2e>
 8004b7e:	9a01      	ldr	r2, [sp, #4]
 8004b80:	9b00      	ldr	r3, [sp, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	bf8c      	ite	hi
 8004b86:	2301      	movhi	r3, #1
 8004b88:	2300      	movls	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	e006      	b.n	8004b9c <chSchIsPreemptionRequired+0x3c>
 8004b8e:	9a01      	ldr	r2, [sp, #4]
 8004b90:	9b00      	ldr	r3, [sp, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	bf2c      	ite	cs
 8004b96:	2301      	movcs	r3, #1
 8004b98:	2300      	movcc	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	b002      	add	sp, #8
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000800 	.word	0x20000800
	...

08004bb0 <chSchDoRescheduleBehind>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	b082      	sub	sp, #8
  thread_t *otp;

  otp = currp;
 8004bb4:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <chSchDoRescheduleBehind+0x68>)
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	9301      	str	r3, [sp, #4]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8004bba:	4817      	ldr	r0, [pc, #92]	; (8004c18 <chSchDoRescheduleBehind+0x68>)
 8004bbc:	f7ff fe20 	bl	8004800 <queue_fifo_remove.lto_priv.437>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <chSchDoRescheduleBehind+0x68>)
 8004bc4:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <chSchDoRescheduleBehind+0x68>)
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2020 	strb.w	r2, [r3, #32]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8004bd0:	9b01      	ldr	r3, [sp, #4]
 8004bd2:	2264      	movs	r2, #100	; 0x64
 8004bd4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
#endif
  (void) chSchReadyI(otp);
 8004bd8:	9801      	ldr	r0, [sp, #4]
 8004bda:	f7ff fe79 	bl	80048d0 <chSchReadyI>
  chSysSwitch(currp, otp);
 8004bde:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <chSchDoRescheduleBehind+0x68>)
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	4618      	mov	r0, r3
 8004be4:	9901      	ldr	r1, [sp, #4]
 8004be6:	f000 fbb3 	bl	8005350 <_stats_ctxswc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8004bea:	f3ef 8309 	mrs	r3, PSP
 8004bee:	461c      	mov	r4, r3
  return(result);
 8004bf0:	4623      	mov	r3, r4
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	9b00      	ldr	r3, [sp, #0]
 8004bf6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004bfa:	9b01      	ldr	r3, [sp, #4]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d202      	bcs.n	8004c08 <chSchDoRescheduleBehind+0x58>
 8004c02:	4806      	ldr	r0, [pc, #24]	; (8004c1c <chSchDoRescheduleBehind+0x6c>)
 8004c04:	f7ff fbf4 	bl	80043f0 <chSysHalt>
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <chSchDoRescheduleBehind+0x68>)
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	9901      	ldr	r1, [sp, #4]
 8004c10:	f7fb fb5e 	bl	80002d0 <_port_switch>
}
 8004c14:	b002      	add	sp, #8
 8004c16:	bd10      	pop	{r4, pc}
 8004c18:	20000800 	.word	0x20000800
 8004c1c:	08005a98 	.word	0x08005a98

08004c20 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8004c20:	b510      	push	{r4, lr}
 8004c22:	b084      	sub	sp, #16
  thread_t *otp, *cp;

  otp = currp;
 8004c24:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <chSchDoRescheduleAhead+0x94>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	9302      	str	r3, [sp, #8]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8004c2a:	4822      	ldr	r0, [pc, #136]	; (8004cb4 <chSchDoRescheduleAhead+0x94>)
 8004c2c:	f7ff fde8 	bl	8004800 <queue_fifo_remove.lto_priv.437>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <chSchDoRescheduleAhead+0x94>)
 8004c34:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004c36:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <chSchDoRescheduleAhead+0x94>)
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2020 	strb.w	r2, [r3, #32]

  otp->p_state = CH_STATE_READY;
 8004c40:	9b02      	ldr	r3, [sp, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
 8004c48:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <chSchDoRescheduleAhead+0x94>)
 8004c4a:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->p_next;
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	9303      	str	r3, [sp, #12]
  } while (cp->p_prio > otp->p_prio);
 8004c52:	9b03      	ldr	r3, [sp, #12]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	9b02      	ldr	r3, [sp, #8]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d8f6      	bhi.n	8004c4c <chSchDoRescheduleAhead+0x2c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8004c5e:	9b02      	ldr	r3, [sp, #8]
 8004c60:	9a03      	ldr	r2, [sp, #12]
 8004c62:	601a      	str	r2, [r3, #0]
  otp->p_prev = cp->p_prev;
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	9b02      	ldr	r3, [sp, #8]
 8004c6a:	605a      	str	r2, [r3, #4]
  otp->p_prev->p_next = otp;
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	9a02      	ldr	r2, [sp, #8]
 8004c72:	601a      	str	r2, [r3, #0]
  cp->p_prev = otp;
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	9a02      	ldr	r2, [sp, #8]
 8004c78:	605a      	str	r2, [r3, #4]

  chSysSwitch(currp, otp);
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <chSchDoRescheduleAhead+0x94>)
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	9902      	ldr	r1, [sp, #8]
 8004c82:	f000 fb65 	bl	8005350 <_stats_ctxswc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8004c86:	f3ef 8309 	mrs	r3, PSP
 8004c8a:	461c      	mov	r4, r3
  return(result);
 8004c8c:	4623      	mov	r3, r4
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	9b01      	ldr	r3, [sp, #4]
 8004c92:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004c96:	9b02      	ldr	r3, [sp, #8]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d202      	bcs.n	8004ca4 <chSchDoRescheduleAhead+0x84>
 8004c9e:	4806      	ldr	r0, [pc, #24]	; (8004cb8 <chSchDoRescheduleAhead+0x98>)
 8004ca0:	f7ff fba6 	bl	80043f0 <chSysHalt>
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <chSchDoRescheduleAhead+0x94>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	9902      	ldr	r1, [sp, #8]
 8004cac:	f7fb fb10 	bl	80002d0 <_port_switch>
}
 8004cb0:	b004      	add	sp, #16
 8004cb2:	bd10      	pop	{r4, pc}
 8004cb4:	20000800 	.word	0x20000800
 8004cb8:	08005a98 	.word	0x08005a98
 8004cbc:	00000000 	.word	0x00000000

08004cc0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8004cc0:	b508      	push	{r3, lr}

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <chSchDoReschedule+0x1c>)
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <chSchDoReschedule+0x14>
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 8004cce:	f7ff ff6f 	bl	8004bb0 <chSchDoRescheduleBehind>
 8004cd2:	e001      	b.n	8004cd8 <chSchDoReschedule+0x18>
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 8004cd4:	f7ff ffa4 	bl	8004c20 <chSchDoRescheduleAhead>
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8004cd8:	bd08      	pop	{r3, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000800 	.word	0x20000800

08004ce0 <port_lock.lto_priv.410>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004ce6:	9b01      	ldr	r3, [sp, #4]
 8004ce8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8004cec:	b002      	add	sp, #8
 8004cee:	4770      	bx	lr

08004cf0 <port_unlock.lto_priv.404>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	9b01      	ldr	r3, [sp, #4]
 8004cf8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8004cfc:	b002      	add	sp, #8
 8004cfe:	4770      	bx	lr

08004d00 <list_init>:
 *
 * @param[in] tlp       pointer to the threads list object
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {
 8004d00:	b082      	sub	sp, #8
 8004d02:	9001      	str	r0, [sp, #4]

  tlp->p_next = (thread_t *)tlp;
 8004d04:	9b01      	ldr	r3, [sp, #4]
 8004d06:	9a01      	ldr	r2, [sp, #4]
 8004d08:	601a      	str	r2, [r3, #0]
}
 8004d0a:	b002      	add	sp, #8
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <list_notempty>:
 * @param[in] tlp       pointer to the threads list object
 * @return              The status of the list.
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {
 8004d10:	b082      	sub	sp, #8
 8004d12:	9001      	str	r0, [sp, #4]

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8004d14:	9b01      	ldr	r3, [sp, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	9b01      	ldr	r3, [sp, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	b002      	add	sp, #8
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	0000      	movs	r0, r0
	...

08004d30 <queue_init.lto_priv.440>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8004d30:	b082      	sub	sp, #8
 8004d32:	9001      	str	r0, [sp, #4]

  tqp->p_next = (thread_t *)tqp;
 8004d34:	9b01      	ldr	r3, [sp, #4]
 8004d36:	9a01      	ldr	r2, [sp, #4]
 8004d38:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8004d3a:	9b01      	ldr	r3, [sp, #4]
 8004d3c:	9a01      	ldr	r2, [sp, #4]
 8004d3e:	605a      	str	r2, [r3, #4]
}
 8004d40:	b002      	add	sp, #8
 8004d42:	4770      	bx	lr
	...

08004d50 <list_remove>:

  tp->p_next = tlp->p_next;
  tlp->p_next = tp;
}

static inline thread_t *list_remove(threads_list_t *tlp) {
 8004d50:	b084      	sub	sp, #16
 8004d52:	9001      	str	r0, [sp, #4]

  thread_t *tp = tlp->p_next;
 8004d54:	9b01      	ldr	r3, [sp, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	9303      	str	r3, [sp, #12]
  tlp->p_next = tp->p_next;
 8004d5a:	9b03      	ldr	r3, [sp, #12]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	9b01      	ldr	r3, [sp, #4]
 8004d60:	601a      	str	r2, [r3, #0]

  return tp;
 8004d62:	9b03      	ldr	r3, [sp, #12]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	b004      	add	sp, #16
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	0000      	movs	r0, r0
	...

08004d70 <chSysLock.lto_priv.436>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8004d70:	b508      	push	{r3, lr}

  port_lock();
 8004d72:	f7ff ffb5 	bl	8004ce0 <port_lock.lto_priv.410>
  _stats_start_measure_crit_thd();
 8004d76:	f000 fb0b 	bl	8005390 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8004d7a:	f7ff fba1 	bl	80044c0 <_dbg_check_lock>
}
 8004d7e:	bd08      	pop	{r3, pc}

08004d80 <chSysUnlock.lto_priv.434>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8004d80:	b508      	push	{r3, lr}

  _dbg_check_unlock();
 8004d82:	f7ff fbb5 	bl	80044f0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004d86:	f000 fb0b 	bl	80053a0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <chSysUnlock.lto_priv.434+0x30>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <chSysUnlock.lto_priv.434+0x30>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00a      	beq.n	8004daa <chSysUnlock.lto_priv.434+0x2a>
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <chSysUnlock.lto_priv.434+0x30>)
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <chSysUnlock.lto_priv.434+0x30>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d202      	bcs.n	8004daa <chSysUnlock.lto_priv.434+0x2a>
 8004da4:	4803      	ldr	r0, [pc, #12]	; (8004db4 <chSysUnlock.lto_priv.434+0x34>)
 8004da6:	f7ff fb23 	bl	80043f0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  port_unlock();
 8004daa:	f7ff ffa1 	bl	8004cf0 <port_unlock.lto_priv.404>
}
 8004dae:	bd08      	pop	{r3, pc}
 8004db0:	20000800 	.word	0x20000800
 8004db4:	08005b80 	.word	0x08005b80
	...

08004dc0 <chThdGetSelfX>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004dc0:	4b01      	ldr	r3, [pc, #4]	; (8004dc8 <chThdGetSelfX+0x8>)
 8004dc2:	699b      	ldr	r3, [r3, #24]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	4770      	bx	lr
 8004dc8:	20000800 	.word	0x20000800
 8004dcc:	00000000 	.word	0x00000000

08004dd0 <chThdSleepS>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {
 8004dd0:	b500      	push	{lr}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	9001      	str	r0, [sp, #4]

  chDbgCheck(time != TIME_IMMEDIATE);
 8004dd6:	9b01      	ldr	r3, [sp, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <chThdSleepS+0x12>
 8004ddc:	4804      	ldr	r0, [pc, #16]	; (8004df0 <chThdSleepS+0x20>)
 8004dde:	f7ff fb07 	bl	80043f0 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8004de2:	2008      	movs	r0, #8
 8004de4:	9901      	ldr	r1, [sp, #4]
 8004de6:	f7ff fe33 	bl	8004a50 <chSchGoSleepTimeoutS>
}
 8004dea:	b003      	add	sp, #12
 8004dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8004df0:	08005b90 	.word	0x08005b90
	...

08004e00 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 8004e00:	b500      	push	{lr}
 8004e02:	b083      	sub	sp, #12
 8004e04:	9001      	str	r0, [sp, #4]
 8004e06:	9100      	str	r1, [sp, #0]

  tp->p_prio = prio;
 8004e08:	9b01      	ldr	r3, [sp, #4]
 8004e0a:	9a00      	ldr	r2, [sp, #0]
 8004e0c:	609a      	str	r2, [r3, #8]
  tp->p_state = CH_STATE_WTSTART;
 8004e0e:	9b01      	ldr	r3, [sp, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 2020 	strb.w	r2, [r3, #32]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8004e1e:	9b01      	ldr	r3, [sp, #4]
 8004e20:	2264      	movs	r2, #100	; 0x64
 8004e22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8004e26:	9b01      	ldr	r3, [sp, #4]
 8004e28:	9a00      	ldr	r2, [sp, #0]
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
  tp->p_mtxlist = NULL;
 8004e2c:	9b01      	ldr	r3, [sp, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8004e32:	9b01      	ldr	r3, [sp, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 8004e38:	9b01      	ldr	r3, [sp, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
 8004e4c:	9b01      	ldr	r3, [sp, #4]
 8004e4e:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <_thread_init+0x9c>)
 8004e50:	611a      	str	r2, [r3, #16]
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <_thread_init+0x9c>)
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	9b01      	ldr	r3, [sp, #4]
 8004e58:	615a      	str	r2, [r3, #20]
 8004e5a:	9b01      	ldr	r3, [sp, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	9a01      	ldr	r2, [sp, #4]
 8004e60:	611a      	str	r2, [r3, #16]
 8004e62:	4a0e      	ldr	r2, [pc, #56]	; (8004e9c <_thread_init+0x9c>)
 8004e64:	9b01      	ldr	r3, [sp, #4]
 8004e66:	6153      	str	r3, [r2, #20]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8004e68:	9b01      	ldr	r3, [sp, #4]
 8004e6a:	332c      	adds	r3, #44	; 0x2c
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff ff47 	bl	8004d00 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	3330      	adds	r3, #48	; 0x30
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff ff5a 	bl	8004d30 <queue_init.lto_priv.440>
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8004e7c:	9b01      	ldr	r3, [sp, #4]
 8004e7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004e82:	9b01      	ldr	r3, [sp, #4]
 8004e84:	61da      	str	r2, [r3, #28]
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
 8004e86:	9b01      	ldr	r3, [sp, #4]
 8004e88:	3350      	adds	r3, #80	; 0x50
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f9c0 	bl	8005210 <chTMObjectInit>
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
 8004e90:	9b01      	ldr	r3, [sp, #4]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	b003      	add	sp, #12
 8004e96:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e9a:	bf00      	nop
 8004e9c:	20000800 	.word	0x20000800

08004ea0 <_thread_memfill>:
 * @param[in] endp      last address to fill +1
 * @param[in] v         filler value
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	9003      	str	r0, [sp, #12]
 8004ea4:	9102      	str	r1, [sp, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	f88d 3007 	strb.w	r3, [sp, #7]
 8004eac:	e005      	b.n	8004eba <_thread_memfill+0x1a>

  while (startp < endp) {
    *startp++ = v;
 8004eae:	9b03      	ldr	r3, [sp, #12]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	9203      	str	r2, [sp, #12]
 8004eb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004eb8:	701a      	strb	r2, [r3, #0]
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8004eba:	9a03      	ldr	r2, [sp, #12]
 8004ebc:	9b02      	ldr	r3, [sp, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d3f5      	bcc.n	8004eae <_thread_memfill+0xe>
    *startp++ = v;
  }
}
 8004ec2:	b004      	add	sp, #16
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
	...

08004ed0 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8004ed0:	b500      	push	{lr}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	9003      	str	r0, [sp, #12]
 8004ed6:	9102      	str	r1, [sp, #8]
 8004ed8:	9201      	str	r2, [sp, #4]
 8004eda:	9300      	str	r3, [sp, #0]
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
 8004ee0:	f7ff fb8e 	bl	8004600 <chDbgCheckClassI>
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <chThdCreateI+0x2e>
 8004eea:	9b02      	ldr	r3, [sp, #8]
 8004eec:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 8004ef0:	d305      	bcc.n	8004efe <chThdCreateI+0x2e>
 8004ef2:	9b01      	ldr	r3, [sp, #4]
 8004ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef6:	d802      	bhi.n	8004efe <chThdCreateI+0x2e>
 8004ef8:	9b00      	ldr	r3, [sp, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <chThdCreateI+0x34>
 8004efe:	480f      	ldr	r0, [pc, #60]	; (8004f3c <chThdCreateI+0x6c>)
 8004f00:	f7ff fa76 	bl	80043f0 <chSysHalt>
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8004f04:	9b02      	ldr	r3, [sp, #8]
 8004f06:	3b64      	subs	r3, #100	; 0x64
 8004f08:	9a03      	ldr	r2, [sp, #12]
 8004f0a:	441a      	add	r2, r3
 8004f0c:	9b05      	ldr	r3, [sp, #20]
 8004f0e:	60da      	str	r2, [r3, #12]
 8004f10:	9b05      	ldr	r3, [sp, #20]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	9a00      	ldr	r2, [sp, #0]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
 8004f18:	9b05      	ldr	r3, [sp, #20]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	9a08      	ldr	r2, [sp, #32]
 8004f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8004f20:	9b05      	ldr	r3, [sp, #20]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a06      	ldr	r2, [pc, #24]	; (8004f40 <chThdCreateI+0x70>)
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60

  return _thread_init(tp, prio);
 8004f28:	9805      	ldr	r0, [sp, #20]
 8004f2a:	9901      	ldr	r1, [sp, #4]
 8004f2c:	f7ff ff68 	bl	8004e00 <_thread_init>
 8004f30:	4603      	mov	r3, r0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	b007      	add	sp, #28
 8004f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f3a:	bf00      	nop
 8004f3c:	08005b70 	.word	0x08005b70
 8004f40:	080002e9 	.word	0x080002e9
	...

08004f50 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8004f50:	b500      	push	{lr}
 8004f52:	b089      	sub	sp, #36	; 0x24
 8004f54:	9005      	str	r0, [sp, #20]
 8004f56:	9104      	str	r1, [sp, #16]
 8004f58:	9203      	str	r2, [sp, #12]
 8004f5a:	9302      	str	r3, [sp, #8]
  thread_t *tp;
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 8004f5c:	9b05      	ldr	r3, [sp, #20]
 8004f5e:	3368      	adds	r3, #104	; 0x68
 8004f60:	9805      	ldr	r0, [sp, #20]
 8004f62:	4619      	mov	r1, r3
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	f7ff ff9b 	bl	8004ea0 <_thread_memfill>
                  (uint8_t *)wsp + sizeof(thread_t),
                  CH_DBG_THREAD_FILL_VALUE);
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 8004f6a:	9b05      	ldr	r3, [sp, #20]
 8004f6c:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8004f70:	9a05      	ldr	r2, [sp, #20]
 8004f72:	9b04      	ldr	r3, [sp, #16]
 8004f74:	4413      	add	r3, r2
 8004f76:	4608      	mov	r0, r1
 8004f78:	4619      	mov	r1, r3
 8004f7a:	2255      	movs	r2, #85	; 0x55
 8004f7c:	f7ff ff90 	bl	8004ea0 <_thread_memfill>
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8004f80:	f7ff fef6 	bl	8004d70 <chSysLock.lto_priv.436>
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8004f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	9805      	ldr	r0, [sp, #20]
 8004f8a:	9904      	ldr	r1, [sp, #16]
 8004f8c:	9a03      	ldr	r2, [sp, #12]
 8004f8e:	9b02      	ldr	r3, [sp, #8]
 8004f90:	f7ff ff9e 	bl	8004ed0 <chThdCreateI>
 8004f94:	9007      	str	r0, [sp, #28]
  chSchWakeupS(tp, MSG_OK);
 8004f96:	9807      	ldr	r0, [sp, #28]
 8004f98:	2100      	movs	r1, #0
 8004f9a:	f7ff fd91 	bl	8004ac0 <chSchWakeupS>
  chSysUnlock();
 8004f9e:	f7ff feef 	bl	8004d80 <chSysUnlock.lto_priv.434>

  return tp;
 8004fa2:	9b07      	ldr	r3, [sp, #28]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	b009      	add	sp, #36	; 0x24
 8004fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fac:	0000      	movs	r0, r0
	...

08004fb0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8004fb0:	b500      	push	{lr}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	9001      	str	r0, [sp, #4]

  chSysLock();
 8004fb6:	f7ff fedb 	bl	8004d70 <chSysLock.lto_priv.436>
  chThdSleepS(time);
 8004fba:	9801      	ldr	r0, [sp, #4]
 8004fbc:	f7ff ff08 	bl	8004dd0 <chThdSleepS>
  chSysUnlock();
 8004fc0:	f7ff fede 	bl	8004d80 <chSysUnlock.lto_priv.434>
}
 8004fc4:	b003      	add	sp, #12
 8004fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fca:	bf00      	nop
 8004fcc:	0000      	movs	r0, r0
	...

08004fd0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8004fd0:	b500      	push	{lr}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	9001      	str	r0, [sp, #4]

  chSysLock();
 8004fd6:	f7ff fecb 	bl	8004d70 <chSysLock.lto_priv.436>
  chThdExitS(msg);
 8004fda:	9801      	ldr	r0, [sp, #4]
 8004fdc:	f000 f808 	bl	8004ff0 <chThdExitS>
  /* The thread never returns here.*/
}
 8004fe0:	b003      	add	sp, #12
 8004fe2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fe6:	bf00      	nop
	...

08004ff0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8004ff0:	b500      	push	{lr}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	9001      	str	r0, [sp, #4]
  thread_t *tp = currp;
 8004ff6:	4b19      	ldr	r3, [pc, #100]	; (800505c <chThdExitS+0x6c>)
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	9303      	str	r3, [sp, #12]

  tp->p_u.exitcode = msg;
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	9a01      	ldr	r2, [sp, #4]
 8005000:	629a      	str	r2, [r3, #40]	; 0x28
 8005002:	e008      	b.n	8005016 <chThdExitS+0x26>
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	332c      	adds	r3, #44	; 0x2c
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fea1 	bl	8004d50 <list_remove>
 800500e:	4603      	mov	r3, r0
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fc5d 	bl	80048d0 <chSchReadyI>
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	332c      	adds	r3, #44	; 0x2c
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fe78 	bl	8004d10 <list_notempty>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1ee      	bne.n	8005004 <chThdExitS+0x14>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d109      	bne.n	8005048 <chThdExitS+0x58>
    REG_REMOVE(tp);
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	9a03      	ldr	r2, [sp, #12]
 800503a:	6912      	ldr	r2, [r2, #16]
 800503c:	611a      	str	r2, [r3, #16]
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	9a03      	ldr	r2, [sp, #12]
 8005044:	6952      	ldr	r2, [r2, #20]
 8005046:	615a      	str	r2, [r3, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8005048:	200f      	movs	r0, #15
 800504a:	f7ff fc81 	bl	8004950 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 800504e:	4804      	ldr	r0, [pc, #16]	; (8005060 <chThdExitS+0x70>)
 8005050:	f7ff f9ce 	bl	80043f0 <chSysHalt>
}
 8005054:	b005      	add	sp, #20
 8005056:	f85d fb04 	ldr.w	pc, [sp], #4
 800505a:	bf00      	nop
 800505c:	20000800 	.word	0x20000800
 8005060:	08005ba0 	.word	0x08005ba0
	...

08005070 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8005070:	b500      	push	{lr}
 8005072:	b085      	sub	sp, #20
 8005074:	9001      	str	r0, [sp, #4]
  thread_t *tp = chThdGetSelfX();
 8005076:	f7ff fea3 	bl	8004dc0 <chThdGetSelfX>
 800507a:	9003      	str	r0, [sp, #12]

  chDbgAssert(*trp == NULL, "not NULL");
 800507c:	9b01      	ldr	r3, [sp, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <chThdSuspendS+0x1a>
 8005084:	4809      	ldr	r0, [pc, #36]	; (80050ac <chThdSuspendS+0x3c>)
 8005086:	f7ff f9b3 	bl	80043f0 <chSysHalt>

  *trp = tp;
 800508a:	9b01      	ldr	r3, [sp, #4]
 800508c:	9a03      	ldr	r2, [sp, #12]
 800508e:	601a      	str	r2, [r3, #0]
  tp->p_u.wttrp = trp;
 8005090:	9b03      	ldr	r3, [sp, #12]
 8005092:	9a01      	ldr	r2, [sp, #4]
 8005094:	629a      	str	r2, [r3, #40]	; 0x28
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8005096:	2003      	movs	r0, #3
 8005098:	f7ff fc5a 	bl	8004950 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 800509c:	f7ff fe90 	bl	8004dc0 <chThdGetSelfX>
 80050a0:	4603      	mov	r3, r0
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	b005      	add	sp, #20
 80050a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80050ac:	08005bb0 	.word	0x08005bb0

080050b0 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
 80050b0:	b500      	push	{lr}
 80050b2:	b085      	sub	sp, #20
 80050b4:	9001      	str	r0, [sp, #4]
 80050b6:	9100      	str	r1, [sp, #0]
  thread_t *tp = chThdGetSelfX();
 80050b8:	f7ff fe82 	bl	8004dc0 <chThdGetSelfX>
 80050bc:	9003      	str	r0, [sp, #12]

  chDbgAssert(*trp == NULL, "not NULL");
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <chThdSuspendTimeoutS+0x1c>
 80050c6:	480c      	ldr	r0, [pc, #48]	; (80050f8 <chThdSuspendTimeoutS+0x48>)
 80050c8:	f7ff f992 	bl	80043f0 <chSysHalt>

  if (TIME_IMMEDIATE == timeout) {
 80050cc:	9b00      	ldr	r3, [sp, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <chThdSuspendTimeoutS+0x28>
    return MSG_TIMEOUT;
 80050d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050d6:	e00a      	b.n	80050ee <chThdSuspendTimeoutS+0x3e>
  }

  *trp = tp;
 80050d8:	9b01      	ldr	r3, [sp, #4]
 80050da:	9a03      	ldr	r2, [sp, #12]
 80050dc:	601a      	str	r2, [r3, #0]
  tp->p_u.wttrp = trp;
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	9a01      	ldr	r2, [sp, #4]
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80050e4:	2003      	movs	r0, #3
 80050e6:	9900      	ldr	r1, [sp, #0]
 80050e8:	f7ff fcb2 	bl	8004a50 <chSchGoSleepTimeoutS>
 80050ec:	4603      	mov	r3, r0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	b005      	add	sp, #20
 80050f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80050f6:	bf00      	nop
 80050f8:	08005bc0 	.word	0x08005bc0
 80050fc:	00000000 	.word	0x00000000

08005100 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8005100:	b500      	push	{lr}
 8005102:	b085      	sub	sp, #20
 8005104:	9001      	str	r0, [sp, #4]
 8005106:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
 8005108:	9b01      	ldr	r3, [sp, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d013      	beq.n	8005138 <chThdResumeI+0x38>
    thread_t *tp = *trp;
 8005110:	9b01      	ldr	r3, [sp, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
 8005116:	9b03      	ldr	r3, [sp, #12]
 8005118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800511c:	2b03      	cmp	r3, #3
 800511e:	d002      	beq.n	8005126 <chThdResumeI+0x26>
 8005120:	4807      	ldr	r0, [pc, #28]	; (8005140 <chThdResumeI+0x40>)
 8005122:	f7ff f965 	bl	80043f0 <chSysHalt>
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8005126:	9b01      	ldr	r3, [sp, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
    tp->p_u.rdymsg = msg;
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	9a00      	ldr	r2, [sp, #0]
 8005130:	629a      	str	r2, [r3, #40]	; 0x28
    (void) chSchReadyI(tp);
 8005132:	9803      	ldr	r0, [sp, #12]
 8005134:	f7ff fbcc 	bl	80048d0 <chSchReadyI>
  }
}
 8005138:	b005      	add	sp, #20
 800513a:	f85d fb04 	ldr.w	pc, [sp], #4
 800513e:	bf00      	nop
 8005140:	08005be0 	.word	0x08005be0
	...

08005150 <port_rt_get_counter_value.lto_priv.422>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8005150:	4b01      	ldr	r3, [pc, #4]	; (8005158 <port_rt_get_counter_value.lto_priv.422+0x8>)
 8005152:	685b      	ldr	r3, [r3, #4]
}
 8005154:	4618      	mov	r0, r3
 8005156:	4770      	bx	lr
 8005158:	e0001000 	.word	0xe0001000
 800515c:	00000000 	.word	0x00000000

08005160 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8005160:	b084      	sub	sp, #16
 8005162:	9003      	str	r0, [sp, #12]
 8005164:	9102      	str	r1, [sp, #8]
 8005166:	9201      	str	r2, [sp, #4]

  tmp->n++;
 8005168:	9b03      	ldr	r3, [sp, #12]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	9a02      	ldr	r2, [sp, #8]
 8005178:	1ad2      	subs	r2, r2, r3
 800517a:	9b01      	ldr	r3, [sp, #4]
 800517c:	1ad2      	subs	r2, r2, r3
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8005182:	9b03      	ldr	r3, [sp, #12]
 8005184:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	461a      	mov	r2, r3
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	1812      	adds	r2, r2, r0
 8005194:	eb43 0301 	adc.w	r3, r3, r1
 8005198:	9903      	ldr	r1, [sp, #12]
 800519a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  if (tmp->last > tmp->worst) {
 800519e:	9b03      	ldr	r3, [sp, #12]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d903      	bls.n	80051b2 <tm_stop+0x52>
    tmp->worst = tmp->last;
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	9b03      	ldr	r3, [sp, #12]
 80051b0:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 80051b2:	9b03      	ldr	r3, [sp, #12]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	9b03      	ldr	r3, [sp, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d203      	bcs.n	80051c6 <tm_stop+0x66>
    tmp->best = tmp->last;
 80051be:	9b03      	ldr	r3, [sp, #12]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	601a      	str	r2, [r3, #0]
  }
}
 80051c6:	b004      	add	sp, #16
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	0000      	movs	r0, r0
	...

080051d0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80051d0:	b500      	push	{lr}
 80051d2:	b087      	sub	sp, #28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <_tm_init+0x34>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  chTMObjectInit(&tm);
 80051dc:	466b      	mov	r3, sp
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f816 	bl	8005210 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 80051e4:	466b      	mov	r3, sp
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f82a 	bl	8005240 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80051ec:	466b      	mov	r3, sp
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f836 	bl	8005260 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 80051f4:	9b02      	ldr	r3, [sp, #8]
 80051f6:	4a03      	ldr	r2, [pc, #12]	; (8005204 <_tm_init+0x34>)
 80051f8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 80051fc:	b007      	add	sp, #28
 80051fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005202:	bf00      	nop
 8005204:	20000800 	.word	0x20000800
	...

08005210 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8005210:	b082      	sub	sp, #8
 8005212:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 8005214:	9b01      	ldr	r3, [sp, #4]
 8005216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800521a:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 800521c:	9b01      	ldr	r3, [sp, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8005222:	9b01      	ldr	r3, [sp, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 8005228:	9b01      	ldr	r3, [sp, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 800522e:	9901      	ldr	r1, [sp, #4]
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800523c:	b002      	add	sp, #8
 800523e:	4770      	bx	lr

08005240 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 8005240:	b500      	push	{lr}
 8005242:	b083      	sub	sp, #12
 8005244:	9001      	str	r0, [sp, #4]

  tmp->last = chSysGetRealtimeCounterX();
 8005246:	f7ff ff83 	bl	8005150 <port_rt_get_counter_value.lto_priv.422>
 800524a:	4602      	mov	r2, r0
 800524c:	9b01      	ldr	r3, [sp, #4]
 800524e:	609a      	str	r2, [r3, #8]
}
 8005250:	b003      	add	sp, #12
 8005252:	f85d fb04 	ldr.w	pc, [sp], #4
 8005256:	bf00      	nop
	...

08005260 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8005260:	b500      	push	{lr}
 8005262:	b083      	sub	sp, #12
 8005264:	9001      	str	r0, [sp, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8005266:	f7ff ff73 	bl	8005150 <port_rt_get_counter_value.lto_priv.422>
 800526a:	4602      	mov	r2, r0
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <chTMStopMeasurementX+0x24>)
 800526e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005272:	9801      	ldr	r0, [sp, #4]
 8005274:	4611      	mov	r1, r2
 8005276:	461a      	mov	r2, r3
 8005278:	f7ff ff72 	bl	8005160 <tm_stop>
}
 800527c:	b003      	add	sp, #12
 800527e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005282:	bf00      	nop
 8005284:	20000800 	.word	0x20000800
	...

08005290 <chTMChainMeasurementToX>:
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8005290:	b500      	push	{lr}
 8005292:	b083      	sub	sp, #12
 8005294:	9001      	str	r0, [sp, #4]
 8005296:	9100      	str	r1, [sp, #0]

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8005298:	f7ff ff5a 	bl	8005150 <port_rt_get_counter_value.lto_priv.422>
 800529c:	4602      	mov	r2, r0
 800529e:	9b00      	ldr	r3, [sp, #0]
 80052a0:	609a      	str	r2, [r3, #8]

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
 80052a2:	9b00      	ldr	r3, [sp, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	9801      	ldr	r0, [sp, #4]
 80052a8:	4619      	mov	r1, r3
 80052aa:	2200      	movs	r2, #0
 80052ac:	f7ff ff58 	bl	8005160 <tm_stop>
}
 80052b0:	b003      	add	sp, #12
 80052b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80052b6:	bf00      	nop
	...

080052c0 <port_lock.lto_priv.411>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80052c0:	b082      	sub	sp, #8
 80052c2:	2320      	movs	r3, #32
 80052c4:	9301      	str	r3, [sp, #4]
 80052c6:	9b01      	ldr	r3, [sp, #4]
 80052c8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80052cc:	b002      	add	sp, #8
 80052ce:	4770      	bx	lr

080052d0 <port_unlock.lto_priv.405>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80052d0:	b082      	sub	sp, #8
 80052d2:	2300      	movs	r3, #0
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	9b01      	ldr	r3, [sp, #4]
 80052d8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80052dc:	b002      	add	sp, #8
 80052de:	4770      	bx	lr

080052e0 <port_lock_from_isr.lto_priv.420>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80052e0:	b508      	push	{r3, lr}

  port_lock();
 80052e2:	f7ff ffed 	bl	80052c0 <port_lock.lto_priv.411>
}
 80052e6:	bd08      	pop	{r3, pc}
	...

080052f0 <port_unlock_from_isr.lto_priv.416>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80052f0:	b508      	push	{r3, lr}

  port_unlock();
 80052f2:	f7ff ffed 	bl	80052d0 <port_unlock.lto_priv.405>
}
 80052f6:	bd08      	pop	{r3, pc}
	...

08005300 <_stats_init>:
/**
 * @brief   Initializes the statistics module.
 *
 * @init
 */
void _stats_init(void) {
 8005300:	b508      	push	{r3, lr}

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <_stats_init+0x20>)
 8005304:	2200      	movs	r2, #0
 8005306:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <_stats_init+0x20>)
 800530c:	2200      	movs	r2, #0
 800530e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
 8005312:	4804      	ldr	r0, [pc, #16]	; (8005324 <_stats_init+0x24>)
 8005314:	f7ff ff7c 	bl	8005210 <chTMObjectInit>
  chTMObjectInit(&ch.kernel_stats.m_crit_isr);
 8005318:	4803      	ldr	r0, [pc, #12]	; (8005328 <_stats_init+0x28>)
 800531a:	f7ff ff79 	bl	8005210 <chTMObjectInit>
}
 800531e:	bd08      	pop	{r3, pc}
 8005320:	20000800 	.word	0x20000800
 8005324:	200008b0 	.word	0x200008b0
 8005328:	200008c8 	.word	0x200008c8
 800532c:	00000000 	.word	0x00000000

08005330 <_stats_increase_irq>:

/**
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {
 8005330:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8005332:	f7ff ffd5 	bl	80052e0 <port_lock_from_isr.lto_priv.420>
  ch.kernel_stats.n_irq++;
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <_stats_increase_irq+0x1c>)
 8005338:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800533c:	3301      	adds	r3, #1
 800533e:	4a03      	ldr	r2, [pc, #12]	; (800534c <_stats_increase_irq+0x1c>)
 8005340:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
  port_unlock_from_isr();
 8005344:	f7ff ffd4 	bl	80052f0 <port_unlock_from_isr.lto_priv.416>
}
 8005348:	bd08      	pop	{r3, pc}
 800534a:	bf00      	nop
 800534c:	20000800 	.word	0x20000800

08005350 <_stats_ctxswc>:
 * @brief   Updates context switch related statistics.
 *
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {
 8005350:	b500      	push	{lr}
 8005352:	b083      	sub	sp, #12
 8005354:	9001      	str	r0, [sp, #4]
 8005356:	9100      	str	r1, [sp, #0]

  ch.kernel_stats.n_ctxswc++;
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <_stats_ctxswc+0x30>)
 800535a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800535e:	3301      	adds	r3, #1
 8005360:	4a07      	ldr	r2, [pc, #28]	; (8005380 <_stats_ctxswc+0x30>)
 8005362:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8005366:	9b00      	ldr	r3, [sp, #0]
 8005368:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	3350      	adds	r3, #80	; 0x50
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	f7ff ff8c 	bl	8005290 <chTMChainMeasurementToX>
}
 8005378:	b003      	add	sp, #12
 800537a:	f85d fb04 	ldr.w	pc, [sp], #4
 800537e:	bf00      	nop
 8005380:	20000800 	.word	0x20000800
	...

08005390 <_stats_start_measure_crit_thd>:

/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {
 8005390:	b508      	push	{r3, lr}

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8005392:	4802      	ldr	r0, [pc, #8]	; (800539c <_stats_start_measure_crit_thd+0xc>)
 8005394:	f7ff ff54 	bl	8005240 <chTMStartMeasurementX>
}
 8005398:	bd08      	pop	{r3, pc}
 800539a:	bf00      	nop
 800539c:	200008b0 	.word	0x200008b0

080053a0 <_stats_stop_measure_crit_thd>:

/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {
 80053a0:	b508      	push	{r3, lr}

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 80053a2:	4802      	ldr	r0, [pc, #8]	; (80053ac <_stats_stop_measure_crit_thd+0xc>)
 80053a4:	f7ff ff5c 	bl	8005260 <chTMStopMeasurementX>
}
 80053a8:	bd08      	pop	{r3, pc}
 80053aa:	bf00      	nop
 80053ac:	200008b0 	.word	0x200008b0

080053b0 <_stats_start_measure_crit_isr>:

/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {
 80053b0:	b508      	push	{r3, lr}

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 80053b2:	4802      	ldr	r0, [pc, #8]	; (80053bc <_stats_start_measure_crit_isr+0xc>)
 80053b4:	f7ff ff44 	bl	8005240 <chTMStartMeasurementX>
}
 80053b8:	bd08      	pop	{r3, pc}
 80053ba:	bf00      	nop
 80053bc:	200008c8 	.word	0x200008c8

080053c0 <_stats_stop_measure_crit_isr>:

/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {
 80053c0:	b508      	push	{r3, lr}

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 80053c2:	4802      	ldr	r0, [pc, #8]	; (80053cc <_stats_stop_measure_crit_isr+0xc>)
 80053c4:	f7ff ff4c 	bl	8005260 <chTMStopMeasurementX>
}
 80053c8:	bd08      	pop	{r3, pc}
 80053ca:	bf00      	nop
 80053cc:	200008c8 	.word	0x200008c8
 80053d0:	65726854 	.word	0x65726854
 80053d4:	2c736461 	.word	0x2c736461
 80053d8:	716e6520 	.word	0x716e6520
 80053dc:	69756575 	.word	0x69756575
 80053e0:	7420676e 	.word	0x7420676e
 80053e4:	20747365 	.word	0x20747365
 80053e8:	00003123 	.word	0x00003123
 80053ec:	65726854 	.word	0x65726854
 80053f0:	2c736461 	.word	0x2c736461
 80053f4:	716e6520 	.word	0x716e6520
 80053f8:	69756575 	.word	0x69756575
 80053fc:	7420676e 	.word	0x7420676e
 8005400:	20747365 	.word	0x20747365
 8005404:	00003223 	.word	0x00003223
 8005408:	65726854 	.word	0x65726854
 800540c:	2c736461 	.word	0x2c736461
 8005410:	69727020 	.word	0x69727020
 8005414:	7469726f 	.word	0x7469726f
 8005418:	68632079 	.word	0x68632079
 800541c:	65676e61 	.word	0x65676e61
 8005420:	00000000 	.word	0x00000000
 8005424:	65726854 	.word	0x65726854
 8005428:	2c736461 	.word	0x2c736461
 800542c:	6c656420 	.word	0x6c656420
 8005430:	00737961 	.word	0x00737961
 8005434:	616d6553 	.word	0x616d6553
 8005438:	726f6870 	.word	0x726f6870
 800543c:	202c7365 	.word	0x202c7365
 8005440:	75716e65 	.word	0x75716e65
 8005444:	6e697565 	.word	0x6e697565
 8005448:	00000067 	.word	0x00000067
 800544c:	616d6553 	.word	0x616d6553
 8005450:	726f6870 	.word	0x726f6870
 8005454:	202c7365 	.word	0x202c7365
 8005458:	656d6974 	.word	0x656d6974
 800545c:	0074756f 	.word	0x0074756f
 8005460:	616d6553 	.word	0x616d6553
 8005464:	726f6870 	.word	0x726f6870
 8005468:	202c7365 	.word	0x202c7365
 800546c:	6d6f7461 	.word	0x6d6f7461
 8005470:	73206369 	.word	0x73206369
 8005474:	616e6769 	.word	0x616e6769
 8005478:	61772d6c 	.word	0x61772d6c
 800547c:	00007469 	.word	0x00007469
 8005480:	616e6942 	.word	0x616e6942
 8005484:	53207972 	.word	0x53207972
 8005488:	70616d65 	.word	0x70616d65
 800548c:	65726f68 	.word	0x65726f68
 8005490:	66202c73 	.word	0x66202c73
 8005494:	74636e75 	.word	0x74636e75
 8005498:	616e6f69 	.word	0x616e6f69
 800549c:	7974696c 	.word	0x7974696c
 80054a0:	00000000 	.word	0x00000000
 80054a4:	6574754d 	.word	0x6574754d
 80054a8:	2c736578 	.word	0x2c736578
 80054ac:	69727020 	.word	0x69727020
 80054b0:	7469726f 	.word	0x7469726f
 80054b4:	6e652079 	.word	0x6e652079
 80054b8:	75657571 	.word	0x75657571
 80054bc:	20676e69 	.word	0x20676e69
 80054c0:	74736574 	.word	0x74736574
 80054c4:	00000000 	.word	0x00000000
 80054c8:	6574754d 	.word	0x6574754d
 80054cc:	2c736578 	.word	0x2c736578
 80054d0:	69727020 	.word	0x69727020
 80054d4:	7469726f 	.word	0x7469726f
 80054d8:	6e692079 	.word	0x6e692079
 80054dc:	69726568 	.word	0x69726568
 80054e0:	636e6174 	.word	0x636e6174
 80054e4:	73202c65 	.word	0x73202c65
 80054e8:	6c706d69 	.word	0x6c706d69
 80054ec:	61632065 	.word	0x61632065
 80054f0:	00006573 	.word	0x00006573
 80054f4:	6574754d 	.word	0x6574754d
 80054f8:	2c736578 	.word	0x2c736578
 80054fc:	69727020 	.word	0x69727020
 8005500:	7469726f 	.word	0x7469726f
 8005504:	6e692079 	.word	0x6e692079
 8005508:	69726568 	.word	0x69726568
 800550c:	636e6174 	.word	0x636e6174
 8005510:	63202c65 	.word	0x63202c65
 8005514:	6c706d6f 	.word	0x6c706d6f
 8005518:	63207865 	.word	0x63207865
 800551c:	00657361 	.word	0x00657361
 8005520:	6574754d 	.word	0x6574754d
 8005524:	2c736578 	.word	0x2c736578
 8005528:	69727020 	.word	0x69727020
 800552c:	7469726f 	.word	0x7469726f
 8005530:	65722079 	.word	0x65722079
 8005534:	6e727574 	.word	0x6e727574
 8005538:	00000000 	.word	0x00000000
 800553c:	6574754d 	.word	0x6574754d
 8005540:	2c736578 	.word	0x2c736578
 8005544:	61747320 	.word	0x61747320
 8005548:	00737574 	.word	0x00737574
 800554c:	646e6f43 	.word	0x646e6f43
 8005550:	2c726156 	.word	0x2c726156
 8005554:	67697320 	.word	0x67697320
 8005558:	206c616e 	.word	0x206c616e
 800555c:	74736574 	.word	0x74736574
 8005560:	00000000 	.word	0x00000000
 8005564:	646e6f43 	.word	0x646e6f43
 8005568:	2c726156 	.word	0x2c726156
 800556c:	6f726220 	.word	0x6f726220
 8005570:	61636461 	.word	0x61636461
 8005574:	74207473 	.word	0x74207473
 8005578:	00747365 	.word	0x00747365
 800557c:	646e6f43 	.word	0x646e6f43
 8005580:	2c726156 	.word	0x2c726156
 8005584:	6f6f6220 	.word	0x6f6f6220
 8005588:	74207473 	.word	0x74207473
 800558c:	00747365 	.word	0x00747365
 8005590:	7373654d 	.word	0x7373654d
 8005594:	73656761 	.word	0x73656761
 8005598:	6f6c202c 	.word	0x6f6c202c
 800559c:	0000706f 	.word	0x0000706f
 80055a0:	6c69614d 	.word	0x6c69614d
 80055a4:	65786f62 	.word	0x65786f62
 80055a8:	71202c73 	.word	0x71202c73
 80055ac:	69756575 	.word	0x69756575
 80055b0:	6120676e 	.word	0x6120676e
 80055b4:	7420646e 	.word	0x7420646e
 80055b8:	6f656d69 	.word	0x6f656d69
 80055bc:	00737475 	.word	0x00737475
 80055c0:	6e657645 	.word	0x6e657645
 80055c4:	202c7374 	.word	0x202c7374
 80055c8:	69676572 	.word	0x69676572
 80055cc:	61727473 	.word	0x61727473
 80055d0:	6e6f6974 	.word	0x6e6f6974
 80055d4:	646e6120 	.word	0x646e6120
 80055d8:	73696420 	.word	0x73696420
 80055dc:	63746170 	.word	0x63746170
 80055e0:	00000068 	.word	0x00000068
 80055e4:	6e657645 	.word	0x6e657645
 80055e8:	202c7374 	.word	0x202c7374
 80055ec:	74696177 	.word	0x74696177
 80055f0:	646e6120 	.word	0x646e6120
 80055f4:	6f726220 	.word	0x6f726220
 80055f8:	61636461 	.word	0x61636461
 80055fc:	00007473 	.word	0x00007473
 8005600:	6e657645 	.word	0x6e657645
 8005604:	202c7374 	.word	0x202c7374
 8005608:	656d6974 	.word	0x656d6974
 800560c:	7374756f 	.word	0x7374756f
 8005610:	00000000 	.word	0x00000000
 8005614:	70616548 	.word	0x70616548
 8005618:	6c61202c 	.word	0x6c61202c
 800561c:	61636f6c 	.word	0x61636f6c
 8005620:	6e6f6974 	.word	0x6e6f6974
 8005624:	646e6120 	.word	0x646e6120
 8005628:	61726620 	.word	0x61726620
 800562c:	6e656d67 	.word	0x6e656d67
 8005630:	69746174 	.word	0x69746174
 8005634:	74206e6f 	.word	0x74206e6f
 8005638:	00747365 	.word	0x00747365
 800563c:	6f6d654d 	.word	0x6f6d654d
 8005640:	50207972 	.word	0x50207972
 8005644:	736c6f6f 	.word	0x736c6f6f
 8005648:	7571202c 	.word	0x7571202c
 800564c:	2f657565 	.word	0x2f657565
 8005650:	75716564 	.word	0x75716564
 8005654:	00657565 	.word	0x00657565
 8005658:	616e7944 	.word	0x616e7944
 800565c:	2063696d 	.word	0x2063696d
 8005660:	73495041 	.word	0x73495041
 8005664:	6874202c 	.word	0x6874202c
 8005668:	64616572 	.word	0x64616572
 800566c:	72632073 	.word	0x72632073
 8005670:	69746165 	.word	0x69746165
 8005674:	66206e6f 	.word	0x66206e6f
 8005678:	206d6f72 	.word	0x206d6f72
 800567c:	70616568 	.word	0x70616568
 8005680:	00000000 	.word	0x00000000
 8005684:	616e7944 	.word	0x616e7944
 8005688:	2063696d 	.word	0x2063696d
 800568c:	73495041 	.word	0x73495041
 8005690:	6874202c 	.word	0x6874202c
 8005694:	64616572 	.word	0x64616572
 8005698:	72632073 	.word	0x72632073
 800569c:	69746165 	.word	0x69746165
 80056a0:	66206e6f 	.word	0x66206e6f
 80056a4:	206d6f72 	.word	0x206d6f72
 80056a8:	6f6d656d 	.word	0x6f6d656d
 80056ac:	70207972 	.word	0x70207972
 80056b0:	006c6f6f 	.word	0x006c6f6f
 80056b4:	616e7944 	.word	0x616e7944
 80056b8:	2063696d 	.word	0x2063696d
 80056bc:	73495041 	.word	0x73495041
 80056c0:	6572202c 	.word	0x6572202c
 80056c4:	74736967 	.word	0x74736967
 80056c8:	61207972 	.word	0x61207972
 80056cc:	7220646e 	.word	0x7220646e
 80056d0:	72656665 	.word	0x72656665
 80056d4:	65636e65 	.word	0x65636e65
 80056d8:	00000073 	.word	0x00000073
 80056dc:	75657551 	.word	0x75657551
 80056e0:	202c7365 	.word	0x202c7365
 80056e4:	75706e69 	.word	0x75706e69
 80056e8:	75712074 	.word	0x75712074
 80056ec:	73657565 	.word	0x73657565
 80056f0:	00000000 	.word	0x00000000
 80056f4:	75657551 	.word	0x75657551
 80056f8:	202c7365 	.word	0x202c7365
 80056fc:	7074756f 	.word	0x7074756f
 8005700:	71207475 	.word	0x71207475
 8005704:	65756575 	.word	0x65756575
 8005708:	00000073 	.word	0x00000073
 800570c:	74737953 	.word	0x74737953
 8005710:	202c6d65 	.word	0x202c6d65
 8005714:	74697263 	.word	0x74697263
 8005718:	6c616369 	.word	0x6c616369
 800571c:	6e6f7a20 	.word	0x6e6f7a20
 8005720:	00007365 	.word	0x00007365
 8005724:	74737953 	.word	0x74737953
 8005728:	202c6d65 	.word	0x202c6d65
 800572c:	65746e69 	.word	0x65746e69
 8005730:	70757272 	.word	0x70757272
 8005734:	68207374 	.word	0x68207374
 8005738:	6c646e61 	.word	0x6c646e61
 800573c:	00676e69 	.word	0x00676e69
 8005740:	74737953 	.word	0x74737953
 8005744:	202c6d65 	.word	0x202c6d65
 8005748:	65746e69 	.word	0x65746e69
 800574c:	74697267 	.word	0x74697267
 8005750:	00000079 	.word	0x00000079
 8005754:	202d2d2d 	.word	0x202d2d2d
 8005758:	726f6353 	.word	0x726f6353
 800575c:	203a2065 	.word	0x203a2065
 8005760:	00000000 	.word	0x00000000
 8005764:	67736d20 	.word	0x67736d20
 8005768:	2c532f73 	.word	0x2c532f73
 800576c:	00000020 	.word	0x00000020
 8005770:	78746320 	.word	0x78746320
 8005774:	2f637773 	.word	0x2f637773
 8005778:	00000053 	.word	0x00000053
 800577c:	636e6542 	.word	0x636e6542
 8005780:	72616d68 	.word	0x72616d68
 8005784:	6d202c6b 	.word	0x6d202c6b
 8005788:	61737365 	.word	0x61737365
 800578c:	20736567 	.word	0x20736567
 8005790:	00003123 	.word	0x00003123
 8005794:	636e6542 	.word	0x636e6542
 8005798:	72616d68 	.word	0x72616d68
 800579c:	6d202c6b 	.word	0x6d202c6b
 80057a0:	61737365 	.word	0x61737365
 80057a4:	20736567 	.word	0x20736567
 80057a8:	00003223 	.word	0x00003223
 80057ac:	636e6542 	.word	0x636e6542
 80057b0:	72616d68 	.word	0x72616d68
 80057b4:	6d202c6b 	.word	0x6d202c6b
 80057b8:	61737365 	.word	0x61737365
 80057bc:	20736567 	.word	0x20736567
 80057c0:	00003323 	.word	0x00003323
 80057c4:	636e6542 	.word	0x636e6542
 80057c8:	72616d68 	.word	0x72616d68
 80057cc:	63202c6b 	.word	0x63202c6b
 80057d0:	65746e6f 	.word	0x65746e6f
 80057d4:	73207478 	.word	0x73207478
 80057d8:	63746977 	.word	0x63746977
 80057dc:	00000068 	.word	0x00000068
 80057e0:	72687420 	.word	0x72687420
 80057e4:	73646165 	.word	0x73646165
 80057e8:	0000532f 	.word	0x0000532f
 80057ec:	636e6542 	.word	0x636e6542
 80057f0:	72616d68 	.word	0x72616d68
 80057f4:	74202c6b 	.word	0x74202c6b
 80057f8:	61657268 	.word	0x61657268
 80057fc:	202c7364 	.word	0x202c7364
 8005800:	6c6c7566 	.word	0x6c6c7566
 8005804:	63796320 	.word	0x63796320
 8005808:	0000656c 	.word	0x0000656c
 800580c:	636e6542 	.word	0x636e6542
 8005810:	72616d68 	.word	0x72616d68
 8005814:	74202c6b 	.word	0x74202c6b
 8005818:	61657268 	.word	0x61657268
 800581c:	202c7364 	.word	0x202c7364
 8005820:	61657263 	.word	0x61657263
 8005824:	6f206574 	.word	0x6f206574
 8005828:	00796c6e 	.word	0x00796c6e
 800582c:	73657220 	.word	0x73657220
 8005830:	64656863 	.word	0x64656863
 8005834:	73656c75 	.word	0x73656c75
 8005838:	202c532f 	.word	0x202c532f
 800583c:	00000000 	.word	0x00000000
 8005840:	636e6542 	.word	0x636e6542
 8005844:	72616d68 	.word	0x72616d68
 8005848:	6d202c6b 	.word	0x6d202c6b
 800584c:	20737361 	.word	0x20737361
 8005850:	63736572 	.word	0x63736572
 8005854:	75646568 	.word	0x75646568
 8005858:	202c656c 	.word	0x202c656c
 800585c:	68742035 	.word	0x68742035
 8005860:	64616572 	.word	0x64616572
 8005864:	00000073 	.word	0x00000073
 8005868:	636e6542 	.word	0x636e6542
 800586c:	72616d68 	.word	0x72616d68
 8005870:	72202c6b 	.word	0x72202c6b
 8005874:	646e756f 	.word	0x646e756f
 8005878:	626f7220 	.word	0x626f7220
 800587c:	63206e69 	.word	0x63206e69
 8005880:	65746e6f 	.word	0x65746e6f
 8005884:	73207478 	.word	0x73207478
 8005888:	63746977 	.word	0x63746977
 800588c:	676e6968 	.word	0x676e6968
 8005890:	00000000 	.word	0x00000000
 8005894:	74796220 	.word	0x74796220
 8005898:	532f7365 	.word	0x532f7365
 800589c:	00000000 	.word	0x00000000
 80058a0:	636e6542 	.word	0x636e6542
 80058a4:	72616d68 	.word	0x72616d68
 80058a8:	49202c6b 	.word	0x49202c6b
 80058ac:	51204f2f 	.word	0x51204f2f
 80058b0:	65756575 	.word	0x65756575
 80058b4:	68742073 	.word	0x68742073
 80058b8:	67756f72 	.word	0x67756f72
 80058bc:	74757068 	.word	0x74757068
 80058c0:	00000000 	.word	0x00000000
 80058c4:	6d697420 	.word	0x6d697420
 80058c8:	2f737265 	.word	0x2f737265
 80058cc:	00000053 	.word	0x00000053
 80058d0:	636e6542 	.word	0x636e6542
 80058d4:	72616d68 	.word	0x72616d68
 80058d8:	76202c6b 	.word	0x76202c6b
 80058dc:	75747269 	.word	0x75747269
 80058e0:	74206c61 	.word	0x74206c61
 80058e4:	72656d69 	.word	0x72656d69
 80058e8:	65732073 	.word	0x65732073
 80058ec:	65722f74 	.word	0x65722f74
 80058f0:	00746573 	.word	0x00746573
 80058f4:	69617720 	.word	0x69617720
 80058f8:	69732b74 	.word	0x69732b74
 80058fc:	6c616e67 	.word	0x6c616e67
 8005900:	0000532f 	.word	0x0000532f
 8005904:	636e6542 	.word	0x636e6542
 8005908:	72616d68 	.word	0x72616d68
 800590c:	73202c6b 	.word	0x73202c6b
 8005910:	70616d65 	.word	0x70616d65
 8005914:	65726f68 	.word	0x65726f68
 8005918:	61772073 	.word	0x61772073
 800591c:	732f7469 	.word	0x732f7469
 8005920:	616e6769 	.word	0x616e6769
 8005924:	0000006c 	.word	0x0000006c
 8005928:	636f6c20 	.word	0x636f6c20
 800592c:	6e752b6b 	.word	0x6e752b6b
 8005930:	6b636f6c 	.word	0x6b636f6c
 8005934:	0000532f 	.word	0x0000532f
 8005938:	636e6542 	.word	0x636e6542
 800593c:	72616d68 	.word	0x72616d68
 8005940:	6d202c6b 	.word	0x6d202c6b
 8005944:	78657475 	.word	0x78657475
 8005948:	6c207365 	.word	0x6c207365
 800594c:	2f6b636f 	.word	0x2f6b636f
 8005950:	6f6c6e75 	.word	0x6f6c6e75
 8005954:	00006b63 	.word	0x00006b63
 8005958:	202d2d2d 	.word	0x202d2d2d
 800595c:	74737953 	.word	0x74737953
 8005960:	203a6d65 	.word	0x203a6d65
 8005964:	00000000 	.word	0x00000000
 8005968:	74796220 	.word	0x74796220
 800596c:	00007365 	.word	0x00007365
 8005970:	202d2d2d 	.word	0x202d2d2d
 8005974:	65726854 	.word	0x65726854
 8005978:	203a6461 	.word	0x203a6461
 800597c:	00000000 	.word	0x00000000
 8005980:	202d2d2d 	.word	0x202d2d2d
 8005984:	656d6954 	.word	0x656d6954
 8005988:	203a2072 	.word	0x203a2072
 800598c:	00000000 	.word	0x00000000
 8005990:	202d2d2d 	.word	0x202d2d2d
 8005994:	616d6553 	.word	0x616d6553
 8005998:	203a6870 	.word	0x203a6870
 800599c:	00000000 	.word	0x00000000
 80059a0:	202d2d2d 	.word	0x202d2d2d
 80059a4:	6e657645 	.word	0x6e657645
 80059a8:	203a5374 	.word	0x203a5374
 80059ac:	00000000 	.word	0x00000000
 80059b0:	202d2d2d 	.word	0x202d2d2d
 80059b4:	6e657645 	.word	0x6e657645
 80059b8:	203a4c74 	.word	0x203a4c74
 80059bc:	00000000 	.word	0x00000000
 80059c0:	202d2d2d 	.word	0x202d2d2d
 80059c4:	6574754d 	.word	0x6574754d
 80059c8:	203a2078 	.word	0x203a2078
 80059cc:	00000000 	.word	0x00000000
 80059d0:	202d2d2d 	.word	0x202d2d2d
 80059d4:	646e6f43 	.word	0x646e6f43
 80059d8:	203a2e56 	.word	0x203a2e56
 80059dc:	00000000 	.word	0x00000000
 80059e0:	202d2d2d 	.word	0x202d2d2d
 80059e4:	75657551 	.word	0x75657551
 80059e8:	203a2065 	.word	0x203a2065
 80059ec:	00000000 	.word	0x00000000
 80059f0:	202d2d2d 	.word	0x202d2d2d
 80059f4:	6c69614d 	.word	0x6c69614d
 80059f8:	203a2e42 	.word	0x203a2e42
 80059fc:	00000000 	.word	0x00000000
 8005a00:	636e6542 	.word	0x636e6542
 8005a04:	72616d68 	.word	0x72616d68
 8005a08:	52202c6b 	.word	0x52202c6b
 8005a0c:	66204d41 	.word	0x66204d41
 8005a10:	70746f6f 	.word	0x70746f6f
 8005a14:	746e6972 	.word	0x746e6972
 8005a18:	00000000 	.word	0x00000000
 8005a1c:	74617473 	.word	0x74617473
 8005a20:	00007375 	.word	0x00007375
	...
 8005a30:	20414d44 	.word	0x20414d44
 8005a34:	6c696166 	.word	0x6c696166
 8005a38:	00657275 	.word	0x00657275
 8005a3c:	00000000 	.word	0x00000000
 8005a40:	31235653 	.word	0x31235653
 8005a44:	00000000 	.word	0x00000000
 8005a48:	32235653 	.word	0x32235653
 8005a4c:	00000000 	.word	0x00000000
 8005a50:	33235653 	.word	0x33235653
 8005a54:	00000000 	.word	0x00000000
 8005a58:	34235653 	.word	0x34235653
 8005a5c:	00000000 	.word	0x00000000
 8005a60:	35235653 	.word	0x35235653
 8005a64:	00000000 	.word	0x00000000
 8005a68:	36235653 	.word	0x36235653
 8005a6c:	00000000 	.word	0x00000000
 8005a70:	37235653 	.word	0x37235653
 8005a74:	00000000 	.word	0x00000000
 8005a78:	38235653 	.word	0x38235653
 8005a7c:	00000000 	.word	0x00000000
 8005a80:	39235653 	.word	0x39235653
 8005a84:	00000000 	.word	0x00000000
 8005a88:	31235653 	.word	0x31235653
 8005a8c:	00000030 	.word	0x00000030
 8005a90:	31235653 	.word	0x31235653
 8005a94:	00000031 	.word	0x00000031
 8005a98:	63617473 	.word	0x63617473
 8005a9c:	766f206b 	.word	0x766f206b
 8005aa0:	6c667265 	.word	0x6c667265
 8005aa4:	0000776f 	.word	0x0000776f
	...

08005ab0 <ram_areas.lto_priv.446>:
 8005ab0:	08006060 200013c8 200013c8 200013c8     ``..... ... ... 
 8005ac0:	08006060 00000000 00000000 00000000     ``..............
 8005ad0:	08006060 00000000 00000000 00000000     ``..............
 8005ae0:	08006060 00000000 00000000 00000000     ``..............
 8005af0:	08006060 00000000 00000000 00000000     ``..............
 8005b00:	08006060 00000000 00000000 00000000     ``..............
 8005b10:	08006060 00000000 00000000 00000000     ``..............
 8005b20:	08006060 00000000 00000000 00000000     ``..............

08005b30 <__func__.6399.lto_priv.104>:
 8005b30:	54566863 65536f44 00004974 00000000     chVTDoSetI......

08005b40 <__func__.6406.lto_priv.445>:
 8005b40:	54566863 65526f44 49746573 00000000     chVTDoResetI....

08005b50 <__func__.6396.lto_priv.126>:
 8005b50:	63536863 61655268 00497964 00000000     chSchReadyI.....

08005b60 <__func__.6424.lto_priv.128>:
 8005b60:	63536863 6b615768 53707565 00000000     chSchWakeupS....

08005b70 <__func__.6408.lto_priv.429>:
 8005b70:	68546863 65724364 49657461 00000000     chThdCreateI....

08005b80 <__func__.5691.lto_priv.5>:
 8005b80:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08005b90 <__func__.5862.lto_priv.431>:
 8005b90:	68546863 656c5364 00537065 00000000     chThdSleepS.....

08005ba0 <__func__.6452.lto_priv.428>:
 8005ba0:	68546863 69784564 00005374 00000000     chThdExitS......

08005bb0 <__func__.6462.lto_priv.426>:
 8005bb0:	68546863 73755364 646e6570 00000053     chThdSuspendS...

08005bc0 <__func__.6468.lto_priv.425>:
 8005bc0:	68546863 73755364 646e6570 656d6954     chThdSuspendTime
 8005bd0:	5374756f 00000000 00000000 00000000     outS............

08005be0 <__func__.6474.lto_priv.424>:
 8005be0:	68546863 73655264 49656d75 00000000     chThdResumeI....

08005bf0 <ch_debug>:
 8005bf0:	6e69616d 18811600 08680404 1814100c     main......h.....
 8005c00:	2221201c 00002423 00000000 00000000     . !"#$..........

08005c10 <__func__.6391.lto_priv.124>:
 8005c10:	744d6863 6a624f78 49746365 0074696e     chMtxObjectInit.

08005c20 <__func__.5691.lto_priv.15>:
 8005c20:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08005c30 <__func__.7382.lto_priv.300>:
 8005c30:	636d6d5f 675f6473 735f7465 6563696c     _mmcsd_get_slice
	...

08005c50 <__func__.7389.lto_priv.299>:
 8005c50:	636d6d5f 675f6473 635f7465 63617061     _mmcsd_get_capac
 8005c60:	00797469 00000000 00000000 00000000     ity.............

08005c70 <__func__.7397.lto_priv.298>:
 8005c70:	636d6d5f 675f6473 635f7465 63617061     _mmcsd_get_capac
 8005c80:	5f797469 00747865 00000000 00000000     ity_ext.........

08005c90 <__func__.7383.lto_priv.101>:
 8005c90:	53633269 74726174 00000000 00000000     i2cStart........

08005ca0 <__func__.5691.lto_priv.18>:
 8005ca0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08005cb0 <__func__.7391.lto_priv.92>:
 8005cb0:	47633269 72457465 73726f72 00000000     i2cGetErrors....

08005cc0 <__func__.7402.lto_priv.276>:
 8005cc0:	4d633269 65747361 61725472 696d736e     i2cMasterTransmi
 8005cd0:	6d695474 74756f65 00000000 00000000     tTimeout........

08005ce0 <__func__.7411.lto_priv.275>:
 8005ce0:	4d633269 65747361 63655272 65766965     i2cMasterReceive
 8005cf0:	656d6954 0074756f 00000000 00000000     Timeout.........

08005d00 <sdc_vmt.lto_priv.264>:
 8005d00:	080010c1 080010d1 080034e1 080036c1     .........4...6..
 8005d10:	08003741 080037c1 08003841 08003891     A7...7..A8...8..

08005d20 <__func__.7745.lto_priv.267>:
 8005d20:	5f636d6d 36646d63 6e6f635f 75727473     mmc_cmd6_constru
 8005d30:	00007463 00000000 00000000 00000000     ct..............

08005d40 <__func__.7752.lto_priv.266>:
 8005d40:	5f636473 36646d63 6e6f635f 75727473     sdc_cmd6_constru
 8005d50:	00007463 00000000 00000000 00000000     ct..............

08005d60 <__func__.7796.lto_priv.265>:
 8005d60:	5f636d6d 5f746573 5f737562 74646977     mmc_set_bus_widt
 8005d70:	00000068 00000000 00000000 00000000     h...............

08005d80 <__func__.6005.lto_priv.88>:
 8005d80:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08005d90 <__func__.7828.lto_priv.261>:
 8005d90:	43636473 656e6e6f 00007463 00000000     sdcConnect......

08005da0 <__func__.7839.lto_priv.260>:
 8005da0:	44636473 6f637369 63656e6e 00000074     sdcDisconnect...

08005db0 <__func__.7847.lto_priv.259>:
 8005db0:	52636473 00646165 00000000 00000000     sdcRead.........

08005dc0 <__func__.7855.lto_priv.258>:
 8005dc0:	57636473 65746972 00000000 00000000     sdcWrite........

08005dd0 <__func__.7865.lto_priv.256>:
 8005dd0:	53636473 00636e79 00000000 00000000     sdcSync.........

08005de0 <__func__.7870.lto_priv.255>:
 8005de0:	47636473 6e497465 00006f66 00000000     sdcGetInfo......

08005df0 <__func__.7384.lto_priv.253>:
 8005df0:	6369766e 53746553 65747379 6e61486d     nvicSetSystemHan
 8005e00:	72656c64 6f697250 79746972 00000000     dlerPriority....

08005e10 <_stm32_dma_streams>:
 8005e10:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8005e20:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8005e30:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8005e40:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8005e50:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8005e60:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8005e70:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8005e80:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8005e90:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8005ea0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8005eb0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8005ec0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08005ed0 <__func__.7457.lto_priv.90>:
 8005ed0:	53616d64 61657274 6c6c416d 7461636f     dmaStreamAllocat
 8005ee0:	00000065 00000000 00000000 00000000     e...............

08005ef0 <__func__.7392.lto_priv.219>:
 8005ef0:	5f633269 5f646c6c 5f746573 636f6c63     i2c_lld_set_cloc
 8005f00:	0000006b 00000000 00000000 00000000     k...............

08005f10 <__func__.7457.lto_priv.91>:
 8005f10:	5f633269 5f646c6c 72617473 00000074     i2c_lld_start...

08005f20 <__func__.5691.lto_priv.19>:
 8005f20:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08005f30 <__func__.7698.lto_priv.214>:
 8005f30:	5f636473 5f646c6c 70657270 5f657261     sdc_lld_prepare_
 8005f40:	64616572 7479625f 00007365 00000000     read_bytes......

08005f50 <__func__.6005.lto_priv.89>:
 8005f50:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08005f60 <__func__.7820.lto_priv.201>:
 8005f60:	5f636473 5f646c6c 64616572 696c615f     sdc_lld_read_ali
 8005f70:	64656e67 00000000 00000000 00000000     gned............

08005f80 <__func__.7829.lto_priv.200>:
 8005f80:	5f636473 5f646c6c 74697277 6c615f65     sdc_lld_write_al
 8005f90:	656e6769 00000064 00000000 00000000     igned...........

08005fa0 <pal_default_config>:
 8005fa0:	280a2000 00000000 ffffffff 65555555     . .(........UUUe
 8005fb0:	0000ffff 0c000000 000000cc 8005aa00     ................
 8005fc0:	000000c0 ffffffff 55595555 0000fcff     ........UUYU....
 8005fd0:	44cc0000 c0000000 00000000 00000000     ...D............
 8005fe0:	ffffffff 55555555 0000ffff 00000000     ....UUUU........
	...
 8005ffc:	ffffffff 55555555 0000ffff 00000000     ....UUUU........
	...
 8006018:	ffffffff 55555555 0000ffff 00000000     ....UUUU........
	...
 8006034:	ffffffff 55555555 0000ffff 00000000     ....UUUU........
	...

08006050 <i2c_cfg>:
 8006050:	00000001 00002710 00000001              .....'......
